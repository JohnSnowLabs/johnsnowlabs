Search.setIndex({"docnames": ["autosummary/sparkocr", "index", "reference/autosummary/sparkocr", "reference/autosummary/sparkocr/base/index", "reference/autosummary/sparkocr/base/light_pipelines/index", "reference/autosummary/sparkocr/databricks/index", "reference/autosummary/sparkocr/enums/index", "reference/autosummary/sparkocr/index", "reference/autosummary/sparkocr/internal/index", "reference/autosummary/sparkocr/metrics/index", "reference/autosummary/sparkocr/optimized/index", "reference/autosummary/sparkocr/pretrained/anonymization_pipeline_builder/index", "reference/autosummary/sparkocr/pretrained/dicom_pretrained_pipeline/index", "reference/autosummary/sparkocr/pretrained/index", "reference/autosummary/sparkocr/pretrained/pretrained_pipeline/index", "reference/autosummary/sparkocr/schemas/index", "reference/autosummary/sparkocr/tests/conftest/index", "reference/autosummary/sparkocr/tests/index", "reference/autosummary/sparkocr/tests/ocr/eval/icdar/icdar_table_extractor/index", "reference/autosummary/sparkocr/tests/ocr/eval/icdar/index", "reference/autosummary/sparkocr/tests/ocr/eval/index", "reference/autosummary/sparkocr/tests/ocr/index", "reference/autosummary/sparkocr/tests/ocr/pipelines/index", "reference/autosummary/sparkocr/tests/ocr/pipelines/test_pdf/index", "reference/autosummary/sparkocr/tests/ocr/test_start/index", "reference/autosummary/sparkocr/tests/ocr/transformers/annotators/index", "reference/autosummary/sparkocr/tests/ocr/transformers/annotators/test_form_relation_extractor/index", "reference/autosummary/sparkocr/tests/ocr/transformers/annotators/test_geo_relation_extractor/index", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/index", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_checkbox_detector/index", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_document_region_detector/index", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_layout_analyzer_dit/index", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_text_detector/index", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_text_detector_craft/index", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_text_detector_v2/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_deidentifier/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_draw_regions/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_metadata_deidentifier/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_splitter/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_image_v2/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_image_v3/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_metadata/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_pdf/index", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_update_pdf/index", "reference/autosummary/sparkocr/tests/ocr/transformers/embeddings/index", "reference/autosummary/sparkocr/tests/ocr/transformers/embeddings/test_vit_image_embeddings/index", "reference/autosummary/sparkocr/tests/ocr/transformers/index", "reference/autosummary/sparkocr/tests/ocr/transformers/inpainting/index", "reference/autosummary/sparkocr/tests/ocr/transformers/inpainting/test_image_inpainting/index", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/index", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_hocr_to_features/index", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner/index", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner_geo/index", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner_layoutlm_v1/index", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner_lilt/index", "reference/autosummary/sparkocr/tests/ocr/transformers/readers/index", "reference/autosummary/sparkocr/tests/ocr/transformers/readers/test_alab_readers/index", "reference/autosummary/sparkocr/tests/ocr/transformers/recognizers/index", "reference/autosummary/sparkocr/tests/ocr/transformers/recognizers/test_image_to_text_v2/index", "reference/autosummary/sparkocr/tests/ocr/transformers/recognizers/test_image_to_text_v3/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_binary_to_image/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_datasetreader/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_dicom_metadata_obfuscator/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_dicom_to_image/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_display_table/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_doc_to_pdf/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_doc_to_text/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_doc_to_text_table/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_foundationone_parser/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_hocr_merger/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_hocr_to_image/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_hocr_to_text_table/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_adaptive_binarizer/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_adaptive_thresholding/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_binarizer/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_brands_ocr/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_cells_to_text_table/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_cropper/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_draw_annotations/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_draw_regions/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_erosion/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_gpu_transform/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_handwritten_text_recognizer/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_layout_analyzer/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_morphology_operation/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_noise_scorer/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_regions_merger/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_remove_objects/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_signature_detector/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_skew_corrector/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_split_regions/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_table_cells_detector/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_table_detector/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_text_cleaner/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_dicom/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_hocr/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_pdf/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_text/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_transformer/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ner_output_cleaner/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ocr_resource_downloader/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_assembler/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_draw_regions/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_form/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_hocr/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_image/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_text/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_text_table/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_position_finder/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ppt_to_pdf/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ppt_to_text_table/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_text_to_pdf/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_update_text_position/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_classifier/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_classifier_lilt/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_classifier_v3/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_processor/index", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_question_answering/index", "reference/autosummary/sparkocr/tests/ocr/transformers/tokenizer/index", "reference/autosummary/sparkocr/tests/ocr/transformers/tokenizer/test_hocr_tokenizer/index", "reference/autosummary/sparkocr/tests/ocr/utils/index", "reference/autosummary/sparkocr/transformers/annotators/form_relation_extractor/index", "reference/autosummary/sparkocr/transformers/annotators/geo_relation_extractor/index", "reference/autosummary/sparkocr/transformers/annotators/index", "reference/autosummary/sparkocr/transformers/base64_to_binary/index", "reference/autosummary/sparkocr/transformers/base64_to_image/index", "reference/autosummary/sparkocr/transformers/binary_to_image/index", "reference/autosummary/sparkocr/transformers/chart_to_text_table/index", "reference/autosummary/sparkocr/transformers/dataset_reader/index", "reference/autosummary/sparkocr/transformers/detectors/document_layout_analyzer/index", "reference/autosummary/sparkocr/transformers/detectors/image_checkbox_detector/index", "reference/autosummary/sparkocr/transformers/detectors/image_document_region_detector/index", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector/index", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector_craft/index", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector_dit/index", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector_v2/index", "reference/autosummary/sparkocr/transformers/detectors/index", "reference/autosummary/sparkocr/transformers/dicom/base_dicom/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_deidentifier/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_draw_regions/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_metadata_deidentifier/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_splitter/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_image_v2/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_image_v3/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_metadata/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_pdf/index", "reference/autosummary/sparkocr/transformers/dicom/dicom_update_pdf/index", "reference/autosummary/sparkocr/transformers/dicom/index", "reference/autosummary/sparkocr/transformers/dicom_to_image/index", "reference/autosummary/sparkocr/transformers/doc_to_pdf/index", "reference/autosummary/sparkocr/transformers/doc_to_text/index", "reference/autosummary/sparkocr/transformers/doc_to_text_table/index", "reference/autosummary/sparkocr/transformers/embeddings/index", "reference/autosummary/sparkocr/transformers/embeddings/vit_image_embeddings/index", "reference/autosummary/sparkocr/transformers/extended_java_wrapper/index", "reference/autosummary/sparkocr/transformers/foundationone_parser/index", "reference/autosummary/sparkocr/transformers/hocr_merger/index", "reference/autosummary/sparkocr/transformers/hocr_to_image/index", "reference/autosummary/sparkocr/transformers/hocr_to_text_table/index", "reference/autosummary/sparkocr/transformers/image_adaptive_binarizer/index", "reference/autosummary/sparkocr/transformers/image_adaptive_scaler/index", "reference/autosummary/sparkocr/transformers/image_adaptive_thresholding/index", "reference/autosummary/sparkocr/transformers/image_base_transformer/index", "reference/autosummary/sparkocr/transformers/image_binarizer/index", "reference/autosummary/sparkocr/transformers/image_brands_ocr/index", "reference/autosummary/sparkocr/transformers/image_cells_to_text_table/index", "reference/autosummary/sparkocr/transformers/image_cropper/index", "reference/autosummary/sparkocr/transformers/image_draw_annotations/index", "reference/autosummary/sparkocr/transformers/image_draw_regions/index", "reference/autosummary/sparkocr/transformers/image_enhance_contrast/index", "reference/autosummary/sparkocr/transformers/image_erosion/index", "reference/autosummary/sparkocr/transformers/image_gpu_transform/index", "reference/autosummary/sparkocr/transformers/image_handwritten_detector/index", "reference/autosummary/sparkocr/transformers/image_handwritten_text_recognizer/index", "reference/autosummary/sparkocr/transformers/image_homogenize_light/index", "reference/autosummary/sparkocr/transformers/image_layout_analyzer/index", "reference/autosummary/sparkocr/transformers/image_morphology_operartion1/index", "reference/autosummary/sparkocr/transformers/image_morphology_operation/index", "reference/autosummary/sparkocr/transformers/image_noise_scorer/index", "reference/autosummary/sparkocr/transformers/image_remove_background/index", "reference/autosummary/sparkocr/transformers/image_remove_glare/index", "reference/autosummary/sparkocr/transformers/image_remove_objects/index", "reference/autosummary/sparkocr/transformers/image_scaler/index", "reference/autosummary/sparkocr/transformers/image_skew_corrector/index", "reference/autosummary/sparkocr/transformers/image_split_regions/index", "reference/autosummary/sparkocr/transformers/image_table_cell_detector/index", "reference/autosummary/sparkocr/transformers/image_table_detector/index", "reference/autosummary/sparkocr/transformers/image_text_cleaner/index", "reference/autosummary/sparkocr/transformers/image_to_dicom/index", "reference/autosummary/sparkocr/transformers/image_to_hocr/index", "reference/autosummary/sparkocr/transformers/image_to_text/index", "reference/autosummary/sparkocr/transformers/image_transformer/index", "reference/autosummary/sparkocr/transformers/index", "reference/autosummary/sparkocr/transformers/inpainting/image_inpainting/index", "reference/autosummary/sparkocr/transformers/inpainting/index", "reference/autosummary/sparkocr/transformers/ner/hocr_to_features/index", "reference/autosummary/sparkocr/transformers/ner/index", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner/index", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner_geo/index", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner_layoutlm_v1/index", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner_lilt/index", "reference/autosummary/sparkocr/transformers/ner_output_cleaner/index", "reference/autosummary/sparkocr/transformers/ocr_resource_downloader/index", "reference/autosummary/sparkocr/transformers/params/index", "reference/autosummary/sparkocr/transformers/pdf/image_to_pdf/index", "reference/autosummary/sparkocr/transformers/pdf/image_to_text_pdf/index", "reference/autosummary/sparkocr/transformers/pdf/index", "reference/autosummary/sparkocr/transformers/pdf/pdf_assembler/index", "reference/autosummary/sparkocr/transformers/pdf/pdf_draw_regions/index", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_form/index", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_hocr/index", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_image/index", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_text/index", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_text_table/index", "reference/autosummary/sparkocr/transformers/pdf/text_to_pdf/index", "reference/autosummary/sparkocr/transformers/position_finder/index", "reference/autosummary/sparkocr/transformers/ppt_to_pdf/index", "reference/autosummary/sparkocr/transformers/ppt_to_text_table/index", "reference/autosummary/sparkocr/transformers/readers/alab_readers/index", "reference/autosummary/sparkocr/transformers/readers/docvqa_reader/index", "reference/autosummary/sparkocr/transformers/readers/funsd_reader/index", "reference/autosummary/sparkocr/transformers/readers/iam_reader/index", "reference/autosummary/sparkocr/transformers/readers/index", "reference/autosummary/sparkocr/transformers/readers/mixed_iterator/index", "reference/autosummary/sparkocr/transformers/readers/rvlcdip_reader/index", "reference/autosummary/sparkocr/transformers/readers/sroie_reader/index", "reference/autosummary/sparkocr/transformers/readers/tacd_reader/index", "reference/autosummary/sparkocr/transformers/recognizers/image_to_text_v2/index", "reference/autosummary/sparkocr/transformers/recognizers/image_to_text_v3/index", "reference/autosummary/sparkocr/transformers/recognizers/index", "reference/autosummary/sparkocr/transformers/regions_merger/index", "reference/autosummary/sparkocr/transformers/tokenizer/bros_hocr_tokenizer/index", "reference/autosummary/sparkocr/transformers/tokenizer/hocr_document_assembler/index", "reference/autosummary/sparkocr/transformers/tokenizer/hocr_tokenizer/index", "reference/autosummary/sparkocr/transformers/tokenizer/index", "reference/autosummary/sparkocr/transformers/update_text_position/index", "reference/autosummary/sparkocr/transformers/visual_document_classifier/index", "reference/autosummary/sparkocr/transformers/visual_document_classifier_lilt/index", "reference/autosummary/sparkocr/transformers/visual_document_classifier_v3/index", "reference/autosummary/sparkocr/transformers/visual_document_processor/index", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/Dit/index", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/Lilt/index", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/engine_for_finetuning/index", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/index", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/optim_factory/index", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/utils/index", "reference/autosummary/sparkocr/transformers/visual_question_answering/index", "reference/autosummary/sparkocr/transformers/vqa/index", "reference/autosummary/sparkocr/transformers/vqa/visual_question_answering_donut/index", "reference/autosummary/sparkocr/transformers/vqa/visual_question_answering_pix2struct/index", "reference/autosummary/sparkocr/utils/compat_pkg/index", "reference/autosummary/sparkocr/utils/craft/craft_utils/index", "reference/autosummary/sparkocr/utils/craft/file_utils/index", "reference/autosummary/sparkocr/utils/craft/image_utils/index", "reference/autosummary/sparkocr/utils/craft/index", "reference/autosummary/sparkocr/utils/craft/models/basenet/index", "reference/autosummary/sparkocr/utils/craft/models/basenet/vgg16_bn/index", "reference/autosummary/sparkocr/utils/craft/models/craftnet/index", "reference/autosummary/sparkocr/utils/craft/models/index", "reference/autosummary/sparkocr/utils/craft/models/refinenet/index", "reference/autosummary/sparkocr/utils/craft/predict/index", "reference/autosummary/sparkocr/utils/craft/torch_utils/index", "reference/autosummary/sparkocr/utils/helpers/index", "reference/autosummary/sparkocr/utils/hocr_renderer/index", "reference/autosummary/sparkocr/utils/index", "reference/autosummary/sparkocr/utils/inpainting/index", "reference/autosummary/sparkocr/utils/rectangle/index", "reference/autosummary/sparkocr/utils/seqeval/index", "reference/autosummary/sparkocr/utils/svs/index", "reference/autosummary/sparkocr/utils/svs/phi_cleaning/index", "reference/autosummary/sparkocr/utils/svs/phi_redaction/index", "reference/autosummary/sparkocr/utils/svs/remove-phi/index", "reference/autosummary/sparkocr/utils/svs/tiffparser/index", "reference/autosummary/sparkocr/utils/svs/tile_extraction/index", "reference/autosummary/sparkocr/utils/torchutils/index", "reference/autosummary/test_basic_lp/index", "reference/index"], "filenames": ["autosummary/sparkocr.rst", "index.rst", "reference/autosummary/sparkocr.rst", "reference/autosummary/sparkocr/base/index.rst", "reference/autosummary/sparkocr/base/light_pipelines/index.rst", "reference/autosummary/sparkocr/databricks/index.rst", "reference/autosummary/sparkocr/enums/index.rst", "reference/autosummary/sparkocr/index.rst", "reference/autosummary/sparkocr/internal/index.rst", "reference/autosummary/sparkocr/metrics/index.rst", "reference/autosummary/sparkocr/optimized/index.rst", "reference/autosummary/sparkocr/pretrained/anonymization_pipeline_builder/index.rst", "reference/autosummary/sparkocr/pretrained/dicom_pretrained_pipeline/index.rst", "reference/autosummary/sparkocr/pretrained/index.rst", "reference/autosummary/sparkocr/pretrained/pretrained_pipeline/index.rst", "reference/autosummary/sparkocr/schemas/index.rst", "reference/autosummary/sparkocr/tests/conftest/index.rst", "reference/autosummary/sparkocr/tests/index.rst", "reference/autosummary/sparkocr/tests/ocr/eval/icdar/icdar_table_extractor/index.rst", "reference/autosummary/sparkocr/tests/ocr/eval/icdar/index.rst", "reference/autosummary/sparkocr/tests/ocr/eval/index.rst", "reference/autosummary/sparkocr/tests/ocr/index.rst", "reference/autosummary/sparkocr/tests/ocr/pipelines/index.rst", "reference/autosummary/sparkocr/tests/ocr/pipelines/test_pdf/index.rst", "reference/autosummary/sparkocr/tests/ocr/test_start/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/annotators/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/annotators/test_form_relation_extractor/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/annotators/test_geo_relation_extractor/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_checkbox_detector/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_document_region_detector/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_layout_analyzer_dit/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_text_detector/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_text_detector_craft/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/detectors/test_image_text_detector_v2/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_deidentifier/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_draw_regions/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_metadata_deidentifier/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_splitter/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_image_v2/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_image_v3/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_metadata/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_to_pdf/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/dicom/test_dicom_update_pdf/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/embeddings/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/embeddings/test_vit_image_embeddings/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/inpainting/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/inpainting/test_image_inpainting/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_hocr_to_features/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner_geo/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner_layoutlm_v1/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/ner/test_visual_document_ner_lilt/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/readers/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/readers/test_alab_readers/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/recognizers/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/recognizers/test_image_to_text_v2/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/recognizers/test_image_to_text_v3/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_binary_to_image/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_datasetreader/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_dicom_metadata_obfuscator/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_dicom_to_image/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_display_table/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_doc_to_pdf/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_doc_to_text/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_doc_to_text_table/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_foundationone_parser/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_hocr_merger/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_hocr_to_image/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_hocr_to_text_table/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_adaptive_binarizer/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_adaptive_thresholding/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_binarizer/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_brands_ocr/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_cells_to_text_table/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_cropper/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_draw_annotations/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_draw_regions/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_erosion/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_gpu_transform/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_handwritten_text_recognizer/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_layout_analyzer/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_morphology_operation/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_noise_scorer/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_regions_merger/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_remove_objects/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_signature_detector/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_skew_corrector/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_split_regions/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_table_cells_detector/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_table_detector/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_text_cleaner/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_dicom/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_hocr/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_pdf/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_to_text/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_image_transformer/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ner_output_cleaner/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ocr_resource_downloader/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_assembler/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_draw_regions/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_form/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_hocr/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_image/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_text/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_pdf_to_text_table/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_position_finder/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ppt_to_pdf/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_ppt_to_text_table/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_text_to_pdf/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_update_text_position/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_classifier/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_classifier_lilt/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_classifier_v3/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_document_processor/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/test_visual_question_answering/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/tokenizer/index.rst", "reference/autosummary/sparkocr/tests/ocr/transformers/tokenizer/test_hocr_tokenizer/index.rst", "reference/autosummary/sparkocr/tests/ocr/utils/index.rst", "reference/autosummary/sparkocr/transformers/annotators/form_relation_extractor/index.rst", "reference/autosummary/sparkocr/transformers/annotators/geo_relation_extractor/index.rst", "reference/autosummary/sparkocr/transformers/annotators/index.rst", "reference/autosummary/sparkocr/transformers/base64_to_binary/index.rst", "reference/autosummary/sparkocr/transformers/base64_to_image/index.rst", "reference/autosummary/sparkocr/transformers/binary_to_image/index.rst", "reference/autosummary/sparkocr/transformers/chart_to_text_table/index.rst", "reference/autosummary/sparkocr/transformers/dataset_reader/index.rst", "reference/autosummary/sparkocr/transformers/detectors/document_layout_analyzer/index.rst", "reference/autosummary/sparkocr/transformers/detectors/image_checkbox_detector/index.rst", "reference/autosummary/sparkocr/transformers/detectors/image_document_region_detector/index.rst", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector/index.rst", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector_craft/index.rst", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector_dit/index.rst", "reference/autosummary/sparkocr/transformers/detectors/image_text_detector_v2/index.rst", "reference/autosummary/sparkocr/transformers/detectors/index.rst", "reference/autosummary/sparkocr/transformers/dicom/base_dicom/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_deidentifier/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_draw_regions/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_metadata_deidentifier/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_splitter/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_image_v2/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_image_v3/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_metadata/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_to_pdf/index.rst", "reference/autosummary/sparkocr/transformers/dicom/dicom_update_pdf/index.rst", "reference/autosummary/sparkocr/transformers/dicom/index.rst", "reference/autosummary/sparkocr/transformers/dicom_to_image/index.rst", "reference/autosummary/sparkocr/transformers/doc_to_pdf/index.rst", "reference/autosummary/sparkocr/transformers/doc_to_text/index.rst", "reference/autosummary/sparkocr/transformers/doc_to_text_table/index.rst", "reference/autosummary/sparkocr/transformers/embeddings/index.rst", "reference/autosummary/sparkocr/transformers/embeddings/vit_image_embeddings/index.rst", "reference/autosummary/sparkocr/transformers/extended_java_wrapper/index.rst", "reference/autosummary/sparkocr/transformers/foundationone_parser/index.rst", "reference/autosummary/sparkocr/transformers/hocr_merger/index.rst", "reference/autosummary/sparkocr/transformers/hocr_to_image/index.rst", "reference/autosummary/sparkocr/transformers/hocr_to_text_table/index.rst", "reference/autosummary/sparkocr/transformers/image_adaptive_binarizer/index.rst", "reference/autosummary/sparkocr/transformers/image_adaptive_scaler/index.rst", "reference/autosummary/sparkocr/transformers/image_adaptive_thresholding/index.rst", "reference/autosummary/sparkocr/transformers/image_base_transformer/index.rst", "reference/autosummary/sparkocr/transformers/image_binarizer/index.rst", "reference/autosummary/sparkocr/transformers/image_brands_ocr/index.rst", "reference/autosummary/sparkocr/transformers/image_cells_to_text_table/index.rst", "reference/autosummary/sparkocr/transformers/image_cropper/index.rst", "reference/autosummary/sparkocr/transformers/image_draw_annotations/index.rst", "reference/autosummary/sparkocr/transformers/image_draw_regions/index.rst", "reference/autosummary/sparkocr/transformers/image_enhance_contrast/index.rst", "reference/autosummary/sparkocr/transformers/image_erosion/index.rst", "reference/autosummary/sparkocr/transformers/image_gpu_transform/index.rst", "reference/autosummary/sparkocr/transformers/image_handwritten_detector/index.rst", "reference/autosummary/sparkocr/transformers/image_handwritten_text_recognizer/index.rst", "reference/autosummary/sparkocr/transformers/image_homogenize_light/index.rst", "reference/autosummary/sparkocr/transformers/image_layout_analyzer/index.rst", "reference/autosummary/sparkocr/transformers/image_morphology_operartion1/index.rst", "reference/autosummary/sparkocr/transformers/image_morphology_operation/index.rst", "reference/autosummary/sparkocr/transformers/image_noise_scorer/index.rst", "reference/autosummary/sparkocr/transformers/image_remove_background/index.rst", "reference/autosummary/sparkocr/transformers/image_remove_glare/index.rst", "reference/autosummary/sparkocr/transformers/image_remove_objects/index.rst", "reference/autosummary/sparkocr/transformers/image_scaler/index.rst", "reference/autosummary/sparkocr/transformers/image_skew_corrector/index.rst", "reference/autosummary/sparkocr/transformers/image_split_regions/index.rst", "reference/autosummary/sparkocr/transformers/image_table_cell_detector/index.rst", "reference/autosummary/sparkocr/transformers/image_table_detector/index.rst", "reference/autosummary/sparkocr/transformers/image_text_cleaner/index.rst", "reference/autosummary/sparkocr/transformers/image_to_dicom/index.rst", "reference/autosummary/sparkocr/transformers/image_to_hocr/index.rst", "reference/autosummary/sparkocr/transformers/image_to_text/index.rst", "reference/autosummary/sparkocr/transformers/image_transformer/index.rst", "reference/autosummary/sparkocr/transformers/index.rst", "reference/autosummary/sparkocr/transformers/inpainting/image_inpainting/index.rst", "reference/autosummary/sparkocr/transformers/inpainting/index.rst", "reference/autosummary/sparkocr/transformers/ner/hocr_to_features/index.rst", "reference/autosummary/sparkocr/transformers/ner/index.rst", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner/index.rst", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner_geo/index.rst", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner_layoutlm_v1/index.rst", "reference/autosummary/sparkocr/transformers/ner/visual_document_ner_lilt/index.rst", "reference/autosummary/sparkocr/transformers/ner_output_cleaner/index.rst", "reference/autosummary/sparkocr/transformers/ocr_resource_downloader/index.rst", "reference/autosummary/sparkocr/transformers/params/index.rst", "reference/autosummary/sparkocr/transformers/pdf/image_to_pdf/index.rst", "reference/autosummary/sparkocr/transformers/pdf/image_to_text_pdf/index.rst", "reference/autosummary/sparkocr/transformers/pdf/index.rst", "reference/autosummary/sparkocr/transformers/pdf/pdf_assembler/index.rst", "reference/autosummary/sparkocr/transformers/pdf/pdf_draw_regions/index.rst", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_form/index.rst", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_hocr/index.rst", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_image/index.rst", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_text/index.rst", "reference/autosummary/sparkocr/transformers/pdf/pdf_to_text_table/index.rst", "reference/autosummary/sparkocr/transformers/pdf/text_to_pdf/index.rst", "reference/autosummary/sparkocr/transformers/position_finder/index.rst", "reference/autosummary/sparkocr/transformers/ppt_to_pdf/index.rst", "reference/autosummary/sparkocr/transformers/ppt_to_text_table/index.rst", "reference/autosummary/sparkocr/transformers/readers/alab_readers/index.rst", "reference/autosummary/sparkocr/transformers/readers/docvqa_reader/index.rst", "reference/autosummary/sparkocr/transformers/readers/funsd_reader/index.rst", "reference/autosummary/sparkocr/transformers/readers/iam_reader/index.rst", "reference/autosummary/sparkocr/transformers/readers/index.rst", "reference/autosummary/sparkocr/transformers/readers/mixed_iterator/index.rst", "reference/autosummary/sparkocr/transformers/readers/rvlcdip_reader/index.rst", "reference/autosummary/sparkocr/transformers/readers/sroie_reader/index.rst", "reference/autosummary/sparkocr/transformers/readers/tacd_reader/index.rst", "reference/autosummary/sparkocr/transformers/recognizers/image_to_text_v2/index.rst", "reference/autosummary/sparkocr/transformers/recognizers/image_to_text_v3/index.rst", "reference/autosummary/sparkocr/transformers/recognizers/index.rst", "reference/autosummary/sparkocr/transformers/regions_merger/index.rst", "reference/autosummary/sparkocr/transformers/tokenizer/bros_hocr_tokenizer/index.rst", "reference/autosummary/sparkocr/transformers/tokenizer/hocr_document_assembler/index.rst", "reference/autosummary/sparkocr/transformers/tokenizer/hocr_tokenizer/index.rst", "reference/autosummary/sparkocr/transformers/tokenizer/index.rst", "reference/autosummary/sparkocr/transformers/update_text_position/index.rst", "reference/autosummary/sparkocr/transformers/visual_document_classifier/index.rst", "reference/autosummary/sparkocr/transformers/visual_document_classifier_lilt/index.rst", "reference/autosummary/sparkocr/transformers/visual_document_classifier_v3/index.rst", "reference/autosummary/sparkocr/transformers/visual_document_processor/index.rst", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/Dit/index.rst", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/Lilt/index.rst", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/engine_for_finetuning/index.rst", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/index.rst", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/optim_factory/index.rst", "reference/autosummary/sparkocr/transformers/visual_encoder_decoder/utils/index.rst", "reference/autosummary/sparkocr/transformers/visual_question_answering/index.rst", "reference/autosummary/sparkocr/transformers/vqa/index.rst", "reference/autosummary/sparkocr/transformers/vqa/visual_question_answering_donut/index.rst", "reference/autosummary/sparkocr/transformers/vqa/visual_question_answering_pix2struct/index.rst", "reference/autosummary/sparkocr/utils/compat_pkg/index.rst", "reference/autosummary/sparkocr/utils/craft/craft_utils/index.rst", "reference/autosummary/sparkocr/utils/craft/file_utils/index.rst", "reference/autosummary/sparkocr/utils/craft/image_utils/index.rst", "reference/autosummary/sparkocr/utils/craft/index.rst", "reference/autosummary/sparkocr/utils/craft/models/basenet/index.rst", "reference/autosummary/sparkocr/utils/craft/models/basenet/vgg16_bn/index.rst", "reference/autosummary/sparkocr/utils/craft/models/craftnet/index.rst", "reference/autosummary/sparkocr/utils/craft/models/index.rst", "reference/autosummary/sparkocr/utils/craft/models/refinenet/index.rst", "reference/autosummary/sparkocr/utils/craft/predict/index.rst", "reference/autosummary/sparkocr/utils/craft/torch_utils/index.rst", "reference/autosummary/sparkocr/utils/helpers/index.rst", "reference/autosummary/sparkocr/utils/hocr_renderer/index.rst", "reference/autosummary/sparkocr/utils/index.rst", "reference/autosummary/sparkocr/utils/inpainting/index.rst", "reference/autosummary/sparkocr/utils/rectangle/index.rst", "reference/autosummary/sparkocr/utils/seqeval/index.rst", "reference/autosummary/sparkocr/utils/svs/index.rst", "reference/autosummary/sparkocr/utils/svs/phi_cleaning/index.rst", "reference/autosummary/sparkocr/utils/svs/phi_redaction/index.rst", "reference/autosummary/sparkocr/utils/svs/remove-phi/index.rst", "reference/autosummary/sparkocr/utils/svs/tiffparser/index.rst", "reference/autosummary/sparkocr/utils/svs/tile_extraction/index.rst", "reference/autosummary/sparkocr/utils/torchutils/index.rst", "reference/autosummary/test_basic_lp/index.rst", "reference/index.rst"], "titles": ["sparkocr", "Spark OCR Documentation", "sparkocr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.base.light_pipelines</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.databricks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.enums</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.optimized</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.pretrained.anonymization_pipeline_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.pretrained.dicom_pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.pretrained.pretrained_pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.schemas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.conftest</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.eval.icdar.icdar_table_extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.eval.icdar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.pipelines</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.pipelines.test_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.test_start</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.annotators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.detectors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.detectors.test_image_text_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.inpainting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.ner.test_hocr_to_features</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.ner.test_visual_document_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.readers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.readers.test_alab_readers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.recognizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_binary_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_datasetreader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_dicom_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_display_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_doc_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_doc_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_doc_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_foundationone_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_hocr_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_hocr_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_hocr_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_binarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_brands_ocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_cells_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_cropper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_draw_annotations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_draw_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_erosion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_gpu_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_layout_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_morphology_operation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_noise_scorer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_regions_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_remove_objects</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_signature_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_skew_corrector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_split_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_table_cells_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_table_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_text_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_to_dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_to_hocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_image_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_ner_output_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_ocr_resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_pdf_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_pdf_draw_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_pdf_to_form</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_pdf_to_hocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_pdf_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_pdf_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_pdf_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_position_finder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_ppt_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_ppt_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_text_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_update_text_position</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_visual_document_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_visual_document_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.test_visual_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.tests.ocr.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.annotators.form_relation_extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.annotators.geo_relation_extractor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.annotators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.base64_to_binary</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.base64_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.binary_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.chart_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dataset_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors.document_layout_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors.image_checkbox_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors.image_document_region_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors.image_text_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors.image_text_detector_craft</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors.image_text_detector_dit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors.image_text_detector_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.detectors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.base_dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_deidentifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_draw_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_metadata_deidentifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_to_image_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_to_image_v3</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_to_metadata</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom.dicom_update_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.dicom_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.doc_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.doc_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.doc_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.embeddings.vit_image_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.extended_java_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.foundationone_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.hocr_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.hocr_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.hocr_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_adaptive_binarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_adaptive_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_adaptive_thresholding</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_base_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_binarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_brands_ocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_cells_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_cropper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_draw_annotations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_draw_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_enhance_contrast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_erosion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_gpu_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_handwritten_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_handwritten_text_recognizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_homogenize_light</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_layout_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_morphology_operartion1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_morphology_operation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_noise_scorer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_remove_background</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_remove_glare</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_remove_objects</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_skew_corrector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_split_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_table_cell_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_table_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_text_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_to_dicom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_to_hocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.image_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.inpainting.image_inpainting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.inpainting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ner.hocr_to_features</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ner.visual_document_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ner.visual_document_ner_geo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ner.visual_document_ner_layoutlm_v1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ner.visual_document_ner_lilt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ner_output_cleaner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ocr_resource_downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.image_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.image_to_text_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.pdf_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.pdf_draw_regions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.pdf_to_form</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.pdf_to_hocr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.pdf_to_image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.pdf_to_text</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.pdf_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.pdf.text_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.position_finder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ppt_to_pdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.ppt_to_text_table</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.alab_readers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.docvqa_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.funsd_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.iam_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.mixed_iterator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.rvlcdip_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.sroie_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.readers.tacd_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.recognizers.image_to_text_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.recognizers.image_to_text_v3</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.recognizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.regions_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.tokenizer.bros_hocr_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.tokenizer.hocr_document_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.tokenizer.hocr_tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.tokenizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.update_text_position</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_document_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_document_classifier_lilt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_document_classifier_v3</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_document_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_encoder_decoder.Dit</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_encoder_decoder.Lilt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_encoder_decoder.optim_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_encoder_decoder.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.visual_question_answering</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.vqa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.vqa.visual_question_answering_donut</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.transformers.vqa.visual_question_answering_pix2struct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.compat_pkg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.craft_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.file_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.image_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.models.basenet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.models.basenet.vgg16_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.models.craftnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.models.refinenet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.predict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.craft.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.helpers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.hocr_renderer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.inpainting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.rectangle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.seqeval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.svs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.svs.phi_cleaning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.svs.phi_redaction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.svs.remove-phi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.svs.tiffparser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.svs.tile_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparkocr.utils.torchutils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test_basic_lp</span></code>", "API Reference"], "terms": {"6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "9": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "function": [0, 2, 170, 180, 203, 277], "start": [0, 2, 7, 270, 273], "secret": [0, 2, 7], "none": [0, 2, 7, 11, 12, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 243, 245, 246, 249, 250, 252, 253, 255, 261, 264, 265, 266, 270, 271, 273, 274], "jar_path": [0, 2, 7], "extra_conf": [0, 2, 7], "master_url": [0, 2, 7], "local": [0, 2, 4, 6, 7, 14, 144, 162, 265], "nlp_version": [0, 2, 7], "nlp_intern": [0, 2, 7], "fals": [0, 2, 7, 11, 12, 14, 23, 132, 136, 139, 140, 141, 143, 144, 146, 175, 186, 187, 194, 196, 201, 238, 239, 241, 242, 252, 253, 255, 258, 261, 265, 266, 270, 271, 273, 274], "nlp_jsl": [0, 2, 7], "nlp_secret": [0, 2, 7], "m1": [0, 2, 7], "keys_fil": [0, 2, 7], "kei": [0, 2, 7, 129, 136, 186, 194, 210, 263, 271, 273], "json": [0, 2, 6, 7, 136, 194, 219, 273], "loglevel": [0, 2, 7], "warn": [0, 2, 7, 246, 273], "use_gpu": [0, 2, 7, 11], "apple_silicon": [0, 2, 7], "creat": [0, 2, 4, 6, 7, 11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 249, 250, 253, 271, 273], "sparksess": [0, 2, 7, 136, 194, 220, 225], "spark": [0, 2, 4, 7, 11, 14, 123, 129, 130, 132, 134, 135, 136, 144, 152, 154, 155, 173, 174, 187, 188, 194, 199, 200, 201, 203, 214, 218, 219, 220, 221, 222, 225, 226, 227, 228, 237, 238, 239, 249, 250, 272, 277], "ocr": [0, 2, 4, 5, 7, 11, 12, 14, 17, 122, 123, 128, 130, 131, 132, 133, 134, 135, 154, 165, 173, 174, 187, 188, 191, 198, 199, 200, 201, 203, 219, 222, 227, 228, 229, 232, 237, 238, 239, 240, 247, 249, 250, 272, 277], "param": [0, 2, 7, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 249, 250, 253, 265], "get": [0, 2, 4, 7, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 270, 273], "jar": [0, 2, 7], "file": [0, 2, 4, 7, 14, 38, 63, 101, 140, 144, 147, 220, 225, 253, 270, 271, 273], "from": [0, 2, 4, 6, 7, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 249, 250, 253, 270, 271, 273, 274], "john": [0, 2, 7], "snow": [0, 2, 6, 7], "lab": [0, 2, 7], "server": [0, 2, 7], "path": [0, 2, 7, 14, 15, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 252, 253, 255, 261, 265, 270, 271, 273], "instanc": [0, 2, 7, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "sparkconf": [0, 2, 7], "dict": [0, 2, 7, 11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 271, 273], "extra": [0, 2, 7, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "configur": [0, 2, 7, 11], "master": [0, 2, 7, 246], "url": [0, 2, 7, 221, 253], "nlp": [0, 2, 4, 7, 11, 14, 203, 220, 225], "version": [0, 2, 7, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 273], "If": [0, 2, 6, 7, 11, 136, 140, 194, 203, 265, 271, 273], "run": [0, 2, 4, 7, 14, 172, 192, 203, 265, 266], "without": [0, 2, 7, 182, 270, 273], "intern": [0, 2, 7, 11, 204, 220, 265, 273], "jsl": [0, 2, 7], "healthcar": [0, 2, 7, 11], "valu": [0, 2, 4, 6, 7, 15, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 249, 250, 265, 270, 273], "mai": [0, 2, 7, 273], "simpli": [0, 2, 7], "boolean": [0, 2, 7, 140], "whether": [0, 2, 4, 7, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 270], "enabl": [0, 2, 7, 11, 211, 213, 261], "support": [0, 2, 7, 14, 140, 176, 182, 186, 271, 273], "maco": [0, 2, 7], "contain": [0, 1, 2, 4, 7, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 270, 271, 273], "your": [0, 2, 7], "default": [0, 2, 6, 7, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 270, 273], "log": [0, 2, 7, 270, 273], "level": [0, 2, 7, 136, 176, 194, 220, 225, 271, 273, 274], "session": [0, 2, 7, 129, 130, 132, 134, 135, 136, 154, 173, 174, 187, 188, 194, 200, 220, 225, 237, 238, 239, 250], "us": [0, 1, 2, 4, 6, 7, 11, 14, 18, 101, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 261, 265, 271, 273, 274], "gpu": [0, 2, 7, 11, 172], "appli": [0, 2, 6, 7, 11, 155, 162, 178, 220, 271], "appl": [0, 2, 7], "silicon": [0, 2, 7], "binari": [0, 2, 7, 125, 127, 142, 143, 144, 145, 146, 149, 151, 152, 160, 161, 164, 171, 177, 178, 179, 189, 205, 210, 211, 212, 213, 214, 217, 218, 273], "return": [0, 2, 4, 6, 7, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 249, 250, 253, 265, 270, 271, 273], "main": [1, 170, 180], "page": [1, 14, 15, 176, 206, 208, 211, 212, 213, 214, 265, 271, 273, 274, 277], "workshop": 1, "model": [1, 5, 11, 14, 101, 115, 123, 130, 132, 134, 135, 136, 152, 154, 160, 164, 173, 174, 177, 179, 187, 188, 194, 199, 200, 201, 203, 212, 214, 216, 218, 226, 228, 237, 238, 239, 241, 243, 245, 246, 249, 250, 255, 261, 265, 266, 273], "hub": [1, 203], "welcom": 1, "python": [1, 18, 24, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 273], "thi": [1, 4, 6, 11, 14, 18, 101, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 249, 250, 265, 270, 273, 277], "inform": [1, 226, 271, 273], "how": [1, 6], "librari": [1, 273], "exampl": [1, 4, 11, 203, 224, 253], "api": 1, "refer": [1, 265, 273], "modul": [1, 255, 265], "light_pipelin": [3, 7], "annotationtypeint": 4, "lightpipelin": [4, 14], "pipelinemodel": [4, 14, 203], "pyspark": [4, 9, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 249, 250, 271], "ml": [4, 9, 11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "pipelin": [4, 11, 14, 17, 18, 21, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "i": [4, 6, 11, 18, 101, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 253, 265, 270, 273], "specif": [4, 11, 136, 194, 270, 273], "equival": [4, 273], "The": [4, 6, 11, 14, 136, 139, 141, 142, 143, 144, 145, 146, 147, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 194, 196, 203, 204, 225, 226, 240, 265, 270, 271, 273], "differ": [4, 176, 240, 263, 265, 273], "": [4, 18, 38, 63, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 194, 199, 200, 201, 216, 228, 229, 231, 237, 238, 239, 249, 250, 265, 271, 273], "execut": [4, 273], "doe": [4, 11, 203, 246, 273], "hold": 4, "principl": 4, "instead": [4, 140, 271, 273], "comput": [4, 162, 170, 175, 180, 181, 265, 273], "everyth": [4, 271], "parallel": [4, 220, 225], "order": [4, 11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "achiev": 4, "fast": [4, 6, 171], "result": [4, 6, 11, 140, 206, 219, 221, 222, 226, 227, 253, 261, 272], "when": [4, 6, 246, 273], "deal": 4, "small": [4, 101, 182, 265, 273], "amount": 4, "data": [4, 6, 12, 14, 15, 144, 152, 156, 217, 218, 219, 220, 224, 225, 241, 242, 243, 253, 263, 265, 273, 275], "mean": [4, 6, 162, 254, 265], "we": [4, 38, 63, 140], "do": [4, 273], "input": [4, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 253, 265, 266, 270], "datafram": [4, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 249, 250, 271, 275], "string": [4, 6, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 273], "an": [4, 11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 249, 250, 265, 271, 273, 277], "arrai": [4, 6, 176, 253, 255, 261, 265, 273], "annot": [4, 6, 7, 14, 21, 47, 193, 196, 203, 216, 226], "To": [4, 101, 140], "light": [4, 14], "you": [4, 203, 220, 225], "need": [4, 11, 203], "pass": [4, 11, 273], "alreadi": [4, 14, 136, 194, 273], "train": [4, 14, 220, 224, 225, 226, 241, 242], "fit": [4, 11, 201, 239], "paramet": [4, 6, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 249, 250, 253, 255, 261, 265, 270, 271, 273], "note": 4, "fullannot": 4, "also": [4, 6, 162, 204], "output": [4, 11, 131, 136, 151, 152, 194, 205, 210, 211, 212, 213, 214, 216, 217, 218, 253, 255, 261, 270, 273], "metadata": [4, 136, 139, 140, 141, 194, 203, 270, 273], "import": [4, 11], "fromlocalpath": [4, 14], "document": [4, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 273], "pdf": [4, 7, 11, 14, 146, 147, 150, 184, 193, 219, 265, 273], "pipeline_model": [4, 11], "frombinari": 4, "buffer": [4, 6, 273], "provid": [4, 14, 204, 246, 270], "against": [4, 14, 38, 63], "memori": [4, 11, 271, 273, 274], "must": [4, 6, 265, 273], "byte": [4, 273], "docx": [4, 14, 150, 151, 152, 217, 218], "imag": [4, 5, 6, 11, 14, 15, 126, 127, 136, 142, 143, 144, 145, 149, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 177, 178, 179, 180, 182, 183, 184, 186, 189, 190, 192, 194, 196, 205, 206, 212, 220, 225, 226, 240, 241, 253, 254, 255, 261, 265, 266, 270, 273], "local_fold": [4, 14], "can": [4, 11, 14, 140, 203, 271, 273], "list": [4, 11, 14, 123, 139, 140, 141, 143, 144, 146, 157, 186, 196, 199, 200, 201, 203, 210, 216, 224, 228, 229, 231, 239, 240, 249, 250, 253, 255, 261, 265, 270, 271, 273, 277], "str": [4, 6, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 251, 252, 253, 255, 265, 266, 270, 271, 273], "type": [4, 6, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 253, 261, 265, 273], "fromstr": 4, "base64": [4, 125, 126], "encod": [4, 6, 140, 273], "getignoreunsupport": 4, "ignor": [4, 273], "unsupport": [4, 11, 140], "annotatormodel": [4, 203, 216], "bool": [4, 11, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 224, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 252, 253, 255, 261, 265, 270, 271, 273], "setignoreunsupport": 4, "set": [4, 11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "current": [4, 11, 216, 273], "transform": [4, 7, 11, 12, 14, 17, 18, 21, 253, 266, 273], "stage": [4, 11], "sql": [4, 14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "create_init_script_for_tesseract": 5, "display_imag": [5, 265], "df": [5, 238, 241, 242, 265], "displayhtml": 5, "field": [5, 136, 194, 210, 265, 273], "limit": [5, 265, 273], "5": [5, 6, 11, 173, 186, 264, 265, 266, 267, 271, 273, 274], "width": [5, 15, 134, 136, 154, 160, 172, 183, 188, 192, 194, 228, 241, 242, 249, 250, 265, 266, 273], "800": 5, "show_meta": [5, 265], "true": [5, 7, 11, 14, 136, 138, 140, 141, 144, 145, 203, 221, 222, 224, 226, 227, 245, 253, 255, 257, 261, 265, 266, 271, 273], "isrunningindatabrick": 5, "init_script_path": 5, "dbf": 5, "init": 5, "ocr_model_dir": 5, "adaptivethresholdingmethod": 6, "base": [6, 7, 9, 15, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 245, 246, 249, 250, 257, 258, 260, 265, 266, 268, 270, 271, 273, 274, 275], "method": [6, 23, 136, 139, 141, 142, 143, 144, 145, 146, 147, 160, 162, 163, 170, 171, 175, 178, 179, 180, 181, 182, 186, 194, 196, 203, 204, 214, 240, 273, 277], "determin": 6, "adapt": [6, 162], "threshold": [6, 11, 162, 164, 172, 175, 180, 261, 265, 273], "neighbourhood": 6, "weight": [6, 162, 224], "gaussian": 6, "filter": [6, 203], "arithmet": 6, "median": 6, "rank": 6, "singh": [6, 265], "wolf": [6, 265], "adaptivethresholdingmod": 6, "mode": [6, 15, 162, 176, 265, 273], "border": 6, "ar": [6, 11, 101, 136, 140, 194, 203, 265, 273], "handl": [6, 136, 194, 273], "where": [6, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 263, 270, 271, 273], "cval": [6, 162], "equal": [6, 265], "constant": [6, 162, 273], "mirror": 6, "nearest": 6, "reflect": [6, 266], "wrap": [6, 18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 216, 228, 229, 231, 237, 238, 239, 249, 250], "celldetectionalgo": 6, "object": [6, 9, 11, 15, 18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 141, 154, 155, 157, 158, 173, 174, 182, 185, 187, 188, 189, 199, 200, 201, 210, 228, 229, 231, 237, 238, 239, 245, 246, 249, 250, 265, 270, 273], "bytes_or_buff": 6, "error": [6, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "new": [6, 11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 271, 273], "given": [6, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 253], "specifi": [6, 212, 265, 270, 273], "expos": 6, "decod": [6, 140, 224, 273], "handler": [6, 140], "otherwis": [6, 14, 265], "__str__": 6, "defin": [6, 14, 182, 265], "repr": 6, "sy": 6, "getdefaultencod": 6, "strict": [6, 273], "contour": 6, "morphop": 6, "color": [6, 11, 160, 164, 168, 169, 177, 179, 212, 273], "gener": [6, 11, 144, 151, 152, 205, 211, 212, 213, 214, 217, 218, 266], "enumer": 6, "deriv": 6, "aliceblu": 6, "240": 6, "248": 6, "255": [6, 180], "antiquewhit": 6, "250": 6, "235": 6, "215": 6, "aqua": 6, "aquamarin": 6, "127": 6, "212": 6, "azur": 6, "beig": 6, "245": 6, "220": 6, "bisqu": 6, "228": 6, "196": [6, 273], "black": [6, 271], "blanchedalmond": 6, "205": 6, "blue": 6, "blueviolet": 6, "138": 6, "43": [6, 273], "226": 6, "brown": 6, "165": 6, "42": [6, 273], "burlywood": 6, "222": 6, "184": 6, "135": 6, "cadetblu": 6, "95": 6, "158": 6, "160": 6, "chartreus": 6, "chocol": 6, "210": 6, "105": [6, 263], "30": [6, 273], "coral": 6, "80": [6, 266], "cornflowerblu": 6, "100": [6, 196, 224, 263], "149": 6, "237": 6, "cornsilk": 6, "crimson": 6, "20": [6, 246], "60": 6, "cyan": 6, "darkblu": 6, "139": [6, 263], "darkcyan": 6, "darkgoldenrod": 6, "134": [6, 263], "11": [6, 273], "darkgrai": 6, "169": 6, "darkgreen": 6, "darkkhaki": 6, "189": 6, "183": 6, "107": 6, "darkmagenta": 6, "darkolivegreen": 6, "85": [6, 265], "47": 6, "darkorang": 6, "140": 6, "darkorchid": 6, "153": 6, "50": [6, 273], "204": 6, "darkr": 6, "darksalmon": 6, "233": 6, "150": 6, "122": 6, "darkseagreen": 6, "143": 6, "188": 6, "darkslateblu": 6, "72": [6, 182], "61": 6, "darkslategrai": 6, "79": [6, 273], "darkturquois": 6, "206": 6, "209": 6, "darkviolet": 6, "148": 6, "211": 6, "deeppink": 6, "147": 6, "deepskyblu": 6, "191": 6, "dimgrai": 6, "dodgerblu": 6, "144": 6, "firebrick": 6, "178": 6, "34": 6, "floralwhit": 6, "forestgreen": 6, "fuchsia": 6, "gainsboro": 6, "ghostwhit": 6, "gold": 6, "goldenrod": 6, "218": 6, "32": 6, "grai": 6, "128": [6, 242], "green": 6, "greenyellow": 6, "173": 6, "honeydew": 6, "hotpink": 6, "180": 6, "indianr": 6, "92": 6, "indigo": 6, "75": [6, 271, 273, 274], "130": 6, "ivori": 6, "khaki": 6, "230": 6, "lavend": 6, "lavenderblush": 6, "lawngreen": 6, "124": 6, "252": 6, "lemonchiffon": 6, "lightblu": 6, "216": 6, "lightcor": 6, "lightcyan": 6, "224": [6, 239, 241, 254], "lightgoldenrodyellow": 6, "lightgreen": 6, "238": 6, "lightgrei": 6, "lightpink": 6, "182": 6, "193": 6, "lightsalmon": 6, "lightseagreen": 6, "170": 6, "lightskyblu": 6, "lightslategrai": 6, "119": 6, "136": 6, "lightsteelblu": 6, "176": 6, "lightyellow": 6, "lime": 6, "limegreen": 6, "linen": 6, "magenta": 6, "maroon": 6, "mediumaquamarin": 6, "102": [6, 196, 263], "mediumblu": 6, "mediumorchid": 6, "186": 6, "mediumpurpl": 6, "112": 6, "219": 6, "mediumseagreen": 6, "179": 6, "113": 6, "mediumslateblu": 6, "123": 6, "104": 6, "mediumspringgreen": 6, "154": 6, "mediumturquois": 6, "mediumvioletr": 6, "199": 6, "21": 6, "133": 6, "midnightblu": 6, "25": [6, 175], "mintcream": 6, "mistyros": 6, "225": [6, 254], "moccasin": 6, "181": 6, "navajowhit": 6, "navi": 6, "oldlac": 6, "253": 6, "oliv": 6, "olivedrab": 6, "142": 6, "35": [6, 274], "orang": 6, "69": 6, "orchid": 6, "214": 6, "palegoldenrod": 6, "232": 6, "palegreen": 6, "152": 6, "251": 6, "paleturquois": 6, "175": 6, "palevioletr": 6, "papayawhip": 6, "239": 6, "213": 6, "peachpuff": 6, "185": 6, "peru": 6, "63": 6, "pink": 6, "192": 6, "203": 6, "plum": 6, "221": 6, "powderblu": 6, "purpl": 6, "red": [6, 11], "rosybrown": 6, "royalblu": 6, "65": 6, "saddlebrown": 6, "19": 6, "salmon": 6, "114": 6, "sandybrown": 6, "244": 6, "164": 6, "96": [6, 273], "seagreen": 6, "46": 6, "87": 6, "seashel": 6, "sienna": 6, "82": 6, "45": 6, "silver": 6, "skyblu": 6, "slateblu": 6, "106": 6, "90": 6, "slategrai": 6, "springgreen": 6, "steelblu": 6, "70": [6, 265], "tan": 6, "teal": 6, "thistl": 6, "tomato": 6, "99": [6, 263], "71": 6, "turquois": 6, "64": [6, 265, 266], "208": 6, "violet": 6, "wheat": 6, "white": 6, "whitesmok": 6, "yellow": 6, "yellowgreen": 6, "compressiontyp": 6, "jpeg": 6, "lossless": [6, 140], "cropsquaretyp": [6, 167], "bottom_cent": 6, "8": [6, 11, 220, 225, 273, 274, 275], "bottom_left": [6, 267], "7": [6, 11, 136, 255, 261, 273], "bottom_right": [6, 267], "center": [6, 171, 172], "center_left": 6, "center_right": 6, "top_cent": 6, "2": [6, 101, 136, 155, 194, 203, 220, 246, 252, 265, 271, 273], "top_left": [6, 267], "top_right": [6, 267], "datasettyp": 6, "basic": [6, 140], "iter": [6, 176, 243, 246, 273], "detectoroutputformat": 6, "hocr": [6, 190, 211, 219, 242], "region": [6, 15, 140, 168, 169, 171, 172, 176, 194, 209, 253, 273], "dicomcompress": 6, "jpegbaseline8bit": 6, "jpeglslossless": 6, "rlelossless": 6, "enginemod": 6, "intenum": 6, "member": [6, 14, 273], "int": [6, 136, 224, 225, 243, 261, 265, 266, 273], "lstm_onli": 6, "tesseract_lstm_combin": 6, "tesseract_onli": 6, "fontstyl": [6, 169], "auto": [6, 274], "bold": 6, "plain": 6, "imagetyp": [6, 11, 126, 127, 160, 164, 172, 184, 185, 192, 204, 212], "type_3byte_bgr": [6, 11], "type_4byte_abgr": 6, "type_byte_binari": 6, "12": 6, "type_byte_grai": 6, "10": [6, 7, 263, 265, 273], "type_jpeg": 6, "13": 6, "type_ushort_grai": 6, "kernelshap": [6, 171, 178], "diamond": 6, "disk": [6, 273], "octagon": 6, "octahedron": 6, "squar": 6, "star": 6, "languag": [6, 11, 159, 165, 166, 176, 190, 191, 203, 204, 229, 240], "ara": 6, "chi": 6, "chi_sim": 6, "dan": 6, "deu": 6, "eng": 6, "fra": 6, "ita": 6, "kor": 6, "ru": 6, "spa": 6, "tur": 6, "vie": 6, "modeltyp": [6, 159, 165, 166, 176, 190, 191, 203, 204, 229, 240], "best": 6, "morphologyoperationtyp": 6, "morpholog": [6, 171, 172, 178], "oper": [6, 177, 178, 271, 273], "close": [6, 273], "dilat": [6, 172, 266], "eros": [6, 171, 172], "open": [6, 140, 273], "noisemethod": 6, "ratio": [6, 255, 261], "varianc": [6, 254], "ocroutputformat": 6, "formatted_text": 6, "text": [6, 11, 15, 151, 159, 166, 186, 206, 211, 213, 214, 215, 236, 240, 253, 255, 261, 265, 273], "text_with_posit": 6, "pageiteratorlevel": [6, 159, 165, 166, 176, 190, 191, 204, 229, 240], "block": 6, "paragraph": 6, "symbol": [6, 182], "textlin": 6, "word": 6, "pagesegmentationmod": 6, "auto_onli": 6, "auto_osd": 6, "circle_word": 6, "osd_onli": 6, "single_block": 6, "single_block_vert_text": 6, "single_char": 6, "single_column": 6, "single_lin": 6, "single_word": 6, "sparse_text": 6, "sparse_text_osd": 6, "relationoutputformat": 6, "splittingstrategi": 6, "fixed_number_of_partit": 6, "fixed_size_of_partit": 6, "tableoutputformat": 6, "csv": [6, 38, 63, 141], "tabl": [6, 152, 159, 166, 214, 217, 218, 240, 265, 273], "textstrippertyp": 6, "stripper": 6, "pdf_layout_text_stripp": 6, "pdflayouttextstripp": 6, "pdf_text_stripp": 6, "pdftextstripp": 6, "thresholdingmethod": 6, "otsu": 6, "sauvola": 6, "tokenizertyp": [6, 232, 234], "simpl": 6, "visualdocumentprocessorocrengin": 6, "easyocr": 6, "ocrmac": 6, "rapidocr": 6, "tesseract": [6, 165, 176, 191], "tesseractocr": 6, "tesseractcli": 6, "tesseractcliocropt": 6, "optim": [7, 243, 246, 274], "pretrain": [7, 123, 128, 130, 131, 132, 133, 134, 135, 136, 154, 173, 174, 187, 188, 194, 198, 199, 200, 201, 203, 228, 232, 237, 238, 239, 247, 249, 250, 257, 258], "anonymization_pipeline_build": [7, 13], "dicom_pretrained_pipelin": [7, 13], "pretrained_pipelin": [7, 13], "test": [7, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "conftest": [7, 17], "detector": [7, 21, 47, 193, 273], "dicom": [7, 11, 21, 47, 63, 149, 189, 193], "embed": [7, 14, 18, 21, 47, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 224, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "inpaint": [7, 21, 47, 193, 265], "ner": [7, 21, 47, 193, 202], "reader": [7, 21, 47, 193, 203], "recogn": [7, 21, 47, 159, 166, 193, 206], "token": [7, 21, 47, 193, 196, 201, 224, 242], "visual_encoder_decod": [7, 193], "vqa": [7, 193, 220], "base64_to_binari": [7, 193], "base64_to_imag": [7, 193], "binary_to_imag": [7, 193], "chart_to_text_t": [7, 193], "dataset_read": [7, 193], "dicom_to_imag": [7, 193], "doc_to_pdf": [7, 193], "doc_to_text": [7, 193], "doc_to_text_t": [7, 193], "extended_java_wrapp": [7, 193], "foundationone_pars": [7, 193], "hocr_merg": [7, 193], "hocr_to_imag": [7, 193], "hocr_to_text_t": [7, 193], "image_adaptive_binar": [7, 193], "image_adaptive_scal": [7, 193], "image_adaptive_threshold": [7, 193], "image_base_transform": [7, 162, 170, 171, 175, 178, 180, 181, 182, 193], "image_binar": [7, 193], "image_brands_ocr": [7, 193], "image_cells_to_text_t": [7, 193], "image_cropp": [7, 193], "image_draw_annot": [7, 193], "image_draw_region": [7, 193], "image_enhance_contrast": [7, 193], "image_eros": [7, 193], "image_gpu_transform": [7, 193], "image_handwritten_detector": [7, 193], "image_handwritten_text_recogn": [7, 193], "image_homogenize_light": [7, 193], "image_layout_analyz": [7, 193], "image_morphology_operartion1": [7, 193], "image_morphology_oper": [7, 193], "image_noise_scor": [7, 193], "image_remove_background": [7, 193], "image_remove_glar": [7, 193], "image_remove_object": [7, 193], "image_scal": [7, 193], "image_skew_corrector": [7, 193], "image_split_region": [7, 193], "image_table_cell_detector": [7, 193], "image_table_detector": [7, 193], "image_text_clean": [7, 193], "image_to_dicom": [7, 193], "image_to_hocr": [7, 193], "image_to_text": [7, 193], "image_transform": [7, 193], "ner_output_clean": [7, 193], "ocr_resource_download": [7, 193], "position_find": [7, 193], "ppt_to_pdf": [7, 193], "ppt_to_text_t": [7, 193], "regions_merg": [7, 193], "update_text_posit": [7, 193], "visual_document_classifi": [7, 193], "visual_document_classifier_lilt": [7, 193], "visual_document_classifier_v3": [7, 193], "visual_document_processor": [7, 193], "visual_question_answ": [7, 193], "util": [7, 11, 17, 21, 123, 125, 126, 127, 130, 131, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 176, 177, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 224, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 249, 250], "craft": [7, 265], "sv": [7, 265], "compat_pkg": [7, 265], "helper": [7, 265], "hocr_render": [7, 265], "rectangl": [7, 265, 271], "seqev": [7, 265], "torchutil": [7, 265], "databrick": 7, "enum": [7, 169, 273], "metric": [7, 268], "schema": [7, 221, 226, 227], "info": [7, 273], "load_license_valid": 7, "retri": 7, "fun": 7, "max_tri": 7, "johnsnowlabs_modul": 7, "spark32": 7, "spark_vers": [7, 220], "with_spark_nlp": 7, "with_spark_nlp_jsl": 7, "ocrmetr": 9, "wrapper": [9, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "javawrapp": [9, 155], "java": [9, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "companion": [9, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "levenshtein_dist": 9, "str1": 9, "str2": 9, "score": [9, 15, 261], "correct": 9, "detect": [9, 11, 186, 253, 255, 261, 271], "anonymizationpipelinebuild": 11, "hc_pipelin": 11, "en": [11, 12, 14, 123, 128, 130, 131, 132, 133, 134, 135, 136, 154, 173, 174, 187, 188, 194, 198, 199, 200, 201, 203, 228, 232, 237, 238, 239, 247, 249, 250, 264], "remote_loc": [11, 12, 14, 123, 128, 130, 131, 132, 133, 134, 135, 136, 154, 173, 174, 187, 188, 194, 198, 199, 200, 201, 203, 228, 232, 237, 238, 239, 247, 249, 250], "clinic": [11, 12, 123, 128, 133, 198, 199, 232, 247], "task": 11, "deid": 11, "input_typ": 11, "kwarg": [11, 140, 221, 222, 226, 227, 246, 266, 273], "builder": 11, "construct": [11, 14], "deidentif": [11, 271], "obfusc": [11, 141], "autom": 11, "process": [11, 175, 202, 246, 253, 255, 261, 270], "end": [11, 273], "extract": [11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 271], "via": 11, "redact": 11, "consist": 11, "pre": 11, "prepar": [11, 266], "post": [11, 202], "coordin": [11, 15, 214, 271], "find": [11, 140, 186, 271, 274], "visual": [11, 220, 240, 255, 261], "reconstruct": 11, "name": [11, 14, 18, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 247, 249, 250, 253, 265, 271, 273], "remot": [11, 14, 203], "locat": [11, 14, 123, 130, 132, 134, 135, 136, 152, 154, 173, 174, 187, 188, 194, 199, 200, 201, 214, 218, 228, 237, 238, 239, 249, 250, 273], "either": 11, "disabl": [11, 246], "one": [11, 163, 186, 196, 253, 273], "v1": [11, 273], "v2": 11, "v3": [11, 273], "acceler": 11, "keep_memori": 11, "preserv": [11, 273], "auxiliari": 11, "map": [11, 15, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "default_matcher_threshold": 11, "float": [11, 136, 243, 246, 261, 265, 271, 273], "entiti": [11, 242], "matcher": 11, "matcher_dict": 11, "dictionari": [11, 271, 273], "final": [11, 273], "includ": [11, 140], "image_to_pdf": [11, 193, 207], "destroi": 11, "intermedi": 11, "rais": [11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "valueerror": [11, 273], "invalid": [11, 140, 270, 273], "argument": [11, 203, 265, 273], "except": [11, 15, 136, 139, 140, 141, 142, 144, 147, 194, 240, 273], "cannot": 11, "load": [11, 14, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 255], "clinical_deidentif": 11, "date": [11, 141, 270, 273], "build": 11, "input_df": 11, "read": [11, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 270, 273], "format": [11, 131, 141, 211, 240, 271, 273], "binaryfil": [11, 15, 144], "result_df": 11, "displai": [11, 265, 273], "display_pdf": [11, 265], "usag": [11, 273], "updat": [11, 140, 147, 236, 246, 270, 273], "clinical_deidentification_docwise_wip_v2": 11, "config": [11, 141, 266], "get_config": 11, "pdftoimag": [11, 212], "imagedrawregion": [11, 169], "rectcolor": [11, 168, 169], "update_config": 11, "individual_stage_set": 11, "stage_config": 11, "full": [11, 253], "step": [11, 246], "initi": [11, 220, 225, 273], "empti": [11, 265, 273], "nlp_builder": 11, "pre_nlp_stag": 11, "matter": 11, "here": 11, "ad": [11, 270], "front": 11, "nlp_stage": 11, "append": [11, 273], "post_nlp_stag": 11, "assembl": [11, 208], "build_deidentification_branch": 11, "keepmemori": 11, "toggl": 11, "build_dicom_branch": 11, "build_memory_branch": 11, "In": 11, "case": [11, 101, 136, 140, 194, 220, 225, 226, 271], "skip": [11, 273], "build_obfuscation_branch": 11, "check_pretrained_pipelin": 11, "valid": [11, 140, 201, 220, 239, 241, 242, 273], "onli": [11, 273], "compon": [11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 265], "ensur": [11, 18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 228, 229, 231, 237, 238, 239, 249, 250, 265], "relat": [11, 273], "retriev": [11, 14], "deep": 11, "copi": [11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265], "get_matcher_ent": 11, "pipelinetrac": 11, "possibl": [11, 136, 194, 273], "custom": 11, "all": [11, 18, 38, 63, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 271, 273, 277], "static": [11, 14, 123, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 144, 145, 152, 154, 173, 174, 187, 188, 194, 196, 198, 199, 200, 201, 203, 214, 218, 219, 221, 222, 226, 227, 228, 232, 237, 238, 239, 247, 249, 250, 267, 273], "get_names_from_uid": 11, "normal": [11, 273], "lowercas": 11, "requir": [11, 139, 141, 143, 144, 146, 196, 265], "e": [11, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 273, 274], "g": [11, 265, 273, 274], "documentassembl": 11, "regextoken": 11, "miss": [11, 140, 202, 273], "depend": [11, 140], "self": [11, 273], "reset_config": 11, "reset": 11, "back": 11, "show_config": 11, "pretti": [11, 273], "print": [11, 203, 246], "replac": [11, 236, 270], "validate_match": 11, "rule": 11, "outsid": 11, "uppercas": 11, "logger": 11, "dicompretrainedpipelin": 12, "name_or_pipelin": 12, "lang": [12, 14, 123, 128, 130, 131, 132, 133, 134, 135, 136, 154, 173, 174, 187, 188, 194, 198, 199, 200, 201, 203, 228, 232, 237, 238, 239, 247, 249, 250, 264], "parse_embed": [12, 14], "disk_loc": [12, 14], "dicom_to_image_pip": 12, "draw_regions_pip": 12, "iterable_stag": 12, "region_col": 12, "keep_all_col": 12, "pretrainedpipelin": 14, "fulli": 14, "readi": 14, "wai": 14, "whole": 14, "line": [14, 186], "addition": 14, "light_model": 14, "These": [14, 273], "gather": 14, "option": [14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 270, 271, 273], "langaug": 14, "link": [14, 255, 261], "wa": 14, "download": [14, 203, 253, 257], "pars": [14, 156, 273], "store": [14, 204, 273], "from_disk": 14, "supports_lp": 14, "check": [14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "dataset": [14, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 249, 250, 253, 263, 275], "answersoutput": 15, "question_answ": 15, "questions_and_answ": 15, "base64fil": 15, "file_descript": 15, "desc": 15, "index": [15, 140, 265, 270, 271, 273, 275], "x": [15, 257, 258, 263, 266, 267, 271, 273], "y": [15, 260, 266, 267, 271, 273], "height": [15, 134, 154, 172, 183, 188, 192, 194, 228, 241, 242, 249, 250, 266, 273], "label": [15, 123, 130, 131, 132, 173, 187, 199, 200, 201, 225, 237, 238, 239, 241, 242, 252, 265, 270, 273], "angl": [15, 266, 273], "merg": [15, 18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "origin": [15, 138, 140, 143, 144, 145, 146, 194, 205, 270, 271], "nchannel": 15, "resolut": [15, 184, 205, 212], "imageoutput": 15, "lightpipelineexcept": 15, "messag": [15, 273], "pagenum": 15, "positionsoutput": 15, "binaryfield": 15, "modificationtim": 15, "length": [15, 140, 273], "binaryschema": 15, "coordinatefield": 15, "rotat": [15, 266], "coordinateschema": 15, "imagefield": 15, "imageschema": 15, "mappingschema": 15, "pagematrixschema": 15, "tablecontainerschema": 15, "textchunkcoordinatetyp": 15, "all_dicoms_df": [16, 38, 63], "spark_sess": [16, 23, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 51, 53, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 123, 129, 130, 131, 132, 134, 135, 136, 154, 173, 174, 187, 188, 199, 200, 221, 222, 226, 227, 237, 238, 239, 250, 276], "dicom_image_df": [16, 37, 40, 41, 42, 64], "dicom_image_with_metadata_df": [16, 36], "dicom_pdf_df": [16, 43, 44], "dicom_single_image_df": [16, 37, 38], "digital_pdf_df": [16, 117], "doc_text_multipage_df": [16, 66, 67, 68, 117], "form1_expected_output": [16, 26], "form_df": 16, "genomic_json": [16, 69], "hocr_table_df": 16, "html_df": [16, 117], "htr_span_fake_model": [16, 83], "image_brand_df": [16, 76], "image_cells_header_df": [16, 92], "image_check_df": [16, 34, 59], "image_check_full_df": 16, "image_check_hocr": [16, 59], "image_checkbox_document_df": [16, 29, 70], "image_cropped_df": [16, 78], "image_df": [16, 75, 76, 80, 81, 84, 86, 90, 91, 96, 98], "image_df_draw": [16, 80], "image_df_keeplayout": [16, 98], "image_handwritten_text_df": [16, 83], "image_kor_df": [16, 98], "image_multi_dicom_df": [16, 95], "image_noised_df": [16, 33, 46, 73, 74, 82, 85, 88, 94, 99], "image_noised_text": [16, 73, 74, 82, 85, 88, 99], "image_signature_df": [16, 89], "image_table_cells_document_df": 16, "image_table_cells_testdocument_df": [16, 77], "image_table_df": [16, 77, 92], "image_table_document_corrected_df": [16, 93], "image_table_document_df": [16, 30, 91, 93, 117], "image_table_hocr_cells_img_df": [16, 72], "image_text_lines_df": [16, 59], "pdf_df": [16, 97, 106], "pdf_fonts_df": [16, 88], "pdf_genomic_df": [16, 69], "pdf_rotated_df": [16, 23], "pdf_rotated_text": [16, 23], "pdf_table_hocr_df": [16, 105], "pdf_table_hocr_nonascii_df": [16, 105], "pdf_table_image_df": [16, 112], "pdf_text_multipage_df": [16, 102, 103, 107, 109, 120], "pdf_text_tables_df": [16, 108], "pdf_with_acro_form_df": [16, 104], "pdf_with_xfa_form_df": 16, "ppt_table_df": [16, 111], "ppt_text_multipage_df": [16, 110], "pptx_table_df": [16, 111, 117], "pptx_text_multipage_df": [16, 110], "raw_image_df": [16, 61], "raw_jpeg2k_df": [16, 61], "raw_png_df": 16, "raw_tiff_df": [16, 61], "regions_merger_df": [16, 87], "torch_fake_model": [16, 89], "updated_text_multipage_df": [16, 113], "visual_document_classifier_lilt_df": [16, 115], "visual_document_classifier_v2_df": 16, "visual_document_classifier_v3_df": [16, 116], "visual_document_df": [16, 31, 114], "visual_document_ner_df": [16, 51, 52, 54, 55, 60], "visual_document_ner_v2_df": [16, 27, 53], "visual_document_ner_v2_train_df": 16, "visual_qa_df": [16, 118], "eval": [17, 21], "test_start": [17, 21], "icdartableextractor": 18, "javatransform": [18, 122, 123, 125, 126, 127, 129, 130, 131, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "share": [18, 122, 123, 125, 126, 127, 130, 131, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "hasinputcol": [18, 122, 123, 125, 126, 127, 130, 131, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "hasoutputcol": [18, 122, 123, 125, 126, 127, 130, 131, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 249, 250], "py": [18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 216, 228, 229, 231, 237, 238, 239, 249, 250], "scala": [18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 216, 228, 229, 231, 237, 238, 239, 249, 250], "implement": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "subclass": [18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 154, 157, 158, 162, 163, 170, 171, 173, 174, 175, 178, 180, 181, 182, 185, 186, 187, 188, 194, 196, 199, 200, 201, 204, 216, 228, 229, 231, 237, 238, 239, 240, 249, 250], "should": [18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 154, 157, 158, 162, 163, 170, 171, 173, 174, 175, 178, 180, 181, 182, 185, 186, 187, 188, 194, 196, 199, 200, 201, 204, 216, 228, 229, 231, 237, 238, 239, 240, 249, 250, 265], "thei": [18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 140, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 228, 229, 231, 237, 238, 239, 249, 250, 273], "have": [18, 38, 63, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 226, 228, 229, 231, 237, 238, 239, 249, 250, 273], "avail": [18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 203, 228, 229, 231, 237, 238, 239, 249, 250, 273], "_java_obj": [18, 122, 123, 129, 130, 131, 132, 134, 135, 136, 154, 157, 158, 173, 174, 185, 187, 188, 199, 200, 201, 228, 229, 231, 237, 238, 239, 249, 250], "groundtruthpath": 18, "inputcol": [18, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 249, 250], "outputcol": [18, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 242, 249, 250], "uid": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "clear": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "ha": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "been": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "explicitli": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "_type": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "parammap": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "jp": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 273], "same": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 273], "some": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "first": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 265, 271, 273], "call": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 141, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 273], "make": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 265], "so": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "both": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 265, 271], "javaparam": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 140, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "explainparam": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "explain": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "singl": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 265, 271, 273], "its": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "doc": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "user": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 270], "suppli": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "extractparammap": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "them": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 270], "flat": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "latter": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "exist": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "conflict": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "getinputcol": [18, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "getordefault": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "ani": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 273], "t": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 249, 250, 265, 273], "neither": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "getoutputcol": [18, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 249, 250], "getparam": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "paramnam": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "hasdefault": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "hasparam": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "isdefin": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "isset": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "setgroundtruthpath": 18, "setinputcol": [18, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250], "setoutputcol": [18, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 249, 250], "overrid": [18, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 250, 270], "icdar_table_extractor": [19, 20], "icdar": [20, 21], "test_pdf": [21, 22], "test_binary_to_imag": [21, 47], "test_datasetread": [21, 47], "test_dicom_metadata_obfusc": [21, 47], "test_dicom_to_imag": [21, 40, 41, 47], "test_display_t": [21, 47], "test_doc_to_pdf": [21, 47], "test_doc_to_text": [21, 47], "test_doc_to_text_t": [21, 47], "test_foundationone_pars": [21, 47], "test_hocr_merg": [21, 47], "test_hocr_to_imag": [21, 47], "test_hocr_to_text_t": [21, 47], "test_image_adaptive_binar": [21, 47], "test_image_adaptive_threshold": [21, 47, 73], "test_image_binar": [21, 47], "test_image_brands_ocr": [21, 47], "test_image_cells_to_text_t": [21, 47], "test_image_cropp": [21, 47], "test_image_draw_annot": [21, 47], "test_image_draw_region": [21, 47], "test_image_eros": [21, 47], "test_image_gpu_transform": [21, 47], "test_image_handwritten_text_recogn": [21, 47], "test_image_layout_analyz": [21, 31, 47], "test_image_morphology_oper": [21, 47], "test_image_noise_scor": [21, 47], "test_image_regions_merg": [21, 47], "test_image_remove_object": [21, 47], "test_image_signature_detector": [21, 47], "test_image_skew_corrector": [21, 47], "test_image_split_region": [21, 47], "test_image_table_cells_detector": [21, 47], "test_image_table_detector": [21, 47], "test_image_text_clean": [21, 47], "test_image_to_dicom": [21, 47], "test_image_to_hocr": [21, 47], "test_image_to_pdf": [21, 47], "test_image_to_text": [21, 47, 59, 96], "test_image_transform": [21, 47], "test_ner_output_clean": [21, 47], "test_ocr_resource_download": [21, 47], "test_pdf_assembl": [21, 47], "test_pdf_draw_region": [21, 47], "test_pdf_to_form": [21, 47], "test_pdf_to_hocr": [21, 47], "test_pdf_to_imag": [21, 47], "test_pdf_to_text": [21, 47], "test_pdf_to_text_t": [21, 47], "test_position_find": [21, 47], "test_ppt_to_pdf": [21, 47], "test_ppt_to_text_t": [21, 47], "test_text_to_pdf": [21, 47], "test_update_text_posit": [21, 47], "test_visual_document_classifi": [21, 47], "test_visual_document_classifier_lilt": [21, 47], "test_visual_document_classifier_v3": [21, 47], "test_visual_document_processor": [21, 47], "test_visual_question_answ": [21, 47], "testpdfocrpipelin": 23, "pipeline_path": 23, "pdf_ocr_pipelin": 23, "get_pipelin": [23, 95, 102, 103, 109, 112, 113, 120, 276], "auto_skew_correct": 23, "teardown_method": 23, "test_ocr_with_skew_correct": 23, "test_saving_and_loading_pipelin": 23, "teststart": 24, "lib_path": 24, "lib": 24, "test_form_relation_extractor": [25, 47], "test_geo_relation_extractor": [25, 47], "testformrelationextract": 26, "distancethreshold": 26, "15": [26, 265, 273], "test_new_form_relation_log": 26, "testvisualdocumentnergeo": [27, 53], "test_infer": [27, 51, 53], "test_image_checkbox_detector": [28, 47], "test_image_document_region_detector": [28, 47], "test_image_layout_analyzer_dit": [28, 47], "test_image_text_detector": [28, 33, 34, 47, 60, 94], "test_image_text_detector_craft": [28, 32, 47], "test_image_text_detector_v2": [28, 47], "testimagecheckboxdetector": 29, "test_image_checkbox_detector_pretrain": 29, "testimagedocumentregiondetector": 30, "test_image_region_detector_pretrain": 30, "testdocumentlayoutanalyz": 31, "testimagetextdetector": 32, "test_image_text_detector_dit": 32, "testimagetextdetectorcraft": 33, "test_loading_from_disk": 33, "tmpmodelfold": [33, 93, 94], "tmp_model": [33, 93, 94], "testimagetextdetectorv2": 34, "test_image_text_detector_panda": 34, "test_load_model": [34, 59], "test_dicom_deidentifi": [35, 47], "test_dicom_draw_region": [35, 47], "test_dicom_metadata_deidentifi": [35, 47], "test_dicom_splitt": [35, 47], "test_dicom_to_image_v2": [35, 47], "test_dicom_to_image_v3": [35, 47], "test_dicom_to_metadata": [35, 47], "test_dicom_to_pdf": [35, 47], "test_dicom_update_pdf": [35, 47], "testdicomdeidentifi": 36, "testdicomdrawregion": 37, "test_drawregion": 37, "test_format_exception_from_traceback": 37, "test_jpeg_12_bit_compress": 37, "test_reject_badvr": 37, "test_reject_dicom_with_no_pixel_data": 37, "test_rle_reject_ybr_full_422": 37, "test_ybr_full_422_8bit_compress": 37, "test_ybr_full_422_no_compress": 37, "get_draw_region": 37, "testdicommetadatadeidentifi": 38, "last_names_fil": 38, "names_fil": 38, "test_customcsvfil": 38, "test_metadatadeidentifi": 38, "test_uid_obfusc": 38, "test_dicom_basic_obfusc": [38, 63], "let": [38, 63], "try": [38, 63, 140], "test_remove_all_private_tag": 38, "testdicomsplitt": 39, "test_fixed_number_partit": 39, "test_fixed_size_partit": 39, "testdicomtoimagev2": 40, "test_dicom_to_image_with_splitt": 40, "testdicomtoimagev3": 41, "testdicomtometadata": 42, "test_dicom_to_metadata_s3": 42, "testdicomtopdf": 43, "testdicomupdatepdf": 44, "test_vit_image_embed": [45, 47], "testvitimageembed": 46, "test_image_inpaint": [47, 48], "test_hocr_to_featur": [47, 50], "test_visual_document_n": [47, 50, 54], "test_visual_document_ner_geo": [47, 50], "test_visual_document_ner_layoutlm_v1": [47, 50], "test_visual_document_ner_lilt": [47, 50], "test_alab_read": [47, 56], "test_image_to_text_v2": [47, 58], "test_image_to_text_v3": [47, 58], "test_hocr_token": [47, 119], "testimageinpaint": 49, "test_model_io_oper": 49, "test_pretrained_io_oper": 49, "test_with_region": 49, "testhocrtofeatur": 51, "testvisualdocumentn": [52, 54], "testvisualdocumentnerlilt": 55, "test_visual_document_ner_lilt_infer": 55, "test_visual_document_ner_lilt_train": 55, "visual_document_ner_lilt_from_dataset": 55, "testalabread": 57, "test_json_reader_v1": 57, "testimagetotextv2": 59, "test_batch_image_to_formatted_text": 59, "test_batch_image_to_hocr": 59, "test_regions_with_confid": 59, "testimagetotextv3": 60, "testbinarytoimag": 61, "test_binary_to_jpeg2k_imag": 61, "test_binary_to_tiff_imag": 61, "testdatasetread": 62, "test_load_dataset": 62, "test_load_preprocessed_dataset": 62, "testdicommetadataobfusc": 63, "testdicomtoimag": 64, "test_deidentified_metadata_dicom_to_imag": 64, "test_metadata_dicom_to_imag": 64, "testdisplayt": 65, "test_displai": 65, "test_display_empti": 65, "testdoctopdf": 66, "test_without_split_by_pag": [66, 67, 68, 106, 107, 109], "testdoctotext": 67, "testdoctotextt": 68, "test_should_save_and_load": [68, 108, 111], "testfindingspars": 69, "test_split_by_pag": [69, 106, 107, 108], "testhocrmerg": 70, "testhocrtoimag": 71, "testhocrtotextt": 72, "test_hocr_to_text_table_using_cel": 72, "test_hocr_to_text_table_using_cells_region": 72, "testimageadaptivebinar": 73, "testimageadaptivethreshold": 74, "test_image_adaptive_thresholding_wolf": 74, "testimagebinar": 75, "test_image_binaraz": 75, "testimagebrandsocr": 76, "test_tesseract_ocr_with_brand": 76, "test_whole_image_ocr": 76, "testimagecellstotextt": 77, "test_image_table_to_text_contour": 77, "test_image_table_to_text_csv_output": 77, "test_image_table_to_text_morphop": 77, "testimagecropp": 78, "test_image_cropper_with_provide_squar": 78, "testimagedrawannot": 79, "imagepath": 79, "returnpipelin": 79, "test_using_wildcard_in_colormap": 79, "test_with_missing_label_in_colormap": 79, "testimagedrawregion": 80, "test_exception_thrown_empty_annot": 80, "test_exception_thrown_empty_coordin": 80, "test_for_displai": 80, "test_no_color_seri": 80, "test_redaction_mixed_obfusc": 80, "test_split_by_region": [80, 84], "test_with_color_seri": 80, "testimageeros": 81, "testimagegpuoper": 82, "testimagehandwrittentextrecogn": 83, "testimagelayoutanalyz": 84, "testimagemorphologyoper": 85, "test_image_morphology_open": 85, "testimagenoisescor": 86, "testimageregionsmerg": 87, "test_merge_regions_keeptxt": 87, "test_merge_regions_mergetocel": 87, "testimageremoveobject": 88, "test_image_remove_objects_with_min_font_s": 88, "testimagesignaturedetector": 89, "testimageskewcorrector": 90, "test_base_skew_corrector": 90, "testimagesplitregion": 91, "test_split_by_region_after_layout_analyz": 91, "test_split_by_region_after_table_detector": 91, "testimagetablecelldetector": 92, "test_cell_detector_contour": 92, "test_cell_detector_cut_head": 92, "test_cell_detector_morphops_default_param": 92, "test_cell_detector_morphops_params_dict": 92, "test_cell_detector_morphops_params_str": 92, "testimagetabledetector": 93, "test_image_table_detector_apply_correct": 93, "test_image_table_detector_apply_sc": 93, "test_image_table_detector_load": 93, "test_image_table_detector_loadonnx": 93, "test_image_table_detector_pretrain": 93, "test_image_table_detector_sav": 93, "test_image_table_detector_savepipelin": 93, "testimagetextclean": 94, "testimagetodicom": 95, "test_metadata_image_to_dicom": 95, "testimagetohocr": 96, "testimagetopdf": 97, "test_with_split_by_pag": 97, "testimagetotext": 98, "test_image_to_text_keep_layout": 98, "test_image_to_text_kor": 98, "testimageoper": 99, "testneroutputclean": 100, "test_stage_seri": 100, "testocrresourcedownload": 101, "levenshtein_distance_threshold": 101, "test_download_model": 101, "For": [101, 203, 273], "purpos": [101, 273], "zip": [101, 221, 222, 226, 227, 253], "1024_test": 101, "1mb": 101, "pix2struct": 101, "checkpoint": 101, "1024_uniform": 101, "1024_gener": 101, "There": 101, "assert": 101, "condit": 101, "test_handling_non_existent_model": 101, "testpdfassembl": 102, "testpdfdrawregion": 103, "test_draw_region": 103, "testpdftoform": 104, "test_extract_acro_form": 104, "testpdftohocr": 105, "test_pdf_to_hocr_nonascii": 105, "test_pdf_to_hocr_nonascii_keepencod": 105, "testpdftoimag": [106, 107], "test_pipeline_seri": 107, "testpdftotextt": 108, "testpositionfind": 109, "entityschema": 109, "postionschema": 109, "test_position_finder_serializes_wel": 109, "test_position_finder_throws_except": 109, "testppttopdf": 110, "test_ppt_without_split_by_pag": [110, 111], "test_pptx_without_split_by_pag": [110, 111], "testppttotextt": 111, "testtexttopdf": 112, "test_render_to_pdf": 112, "testupdatetextposit": 113, "test_update_position_render_to_pdf": 113, "testvisualdocumentclassifi": 114, "test_classify_docu": 114, "testvisualdocumentclassifierlilt": 115, "test_preprocess": 115, "test_pretrain": [115, 116], "delimit": [115, 246], "tmp_dataset_dir": 115, "sample_data": 115, "vocab": 115, "vocab_fil": 115, "resourc": [115, 203, 219, 220, 225, 251, 270, 273], "lilt_rvl_cdip_model": 115, "vocabulari": [115, 201, 232, 238, 239, 250], "txt": [115, 225], "testvisualdocumentclassifierv3": 116, "testvisualdocumentprocessor": 117, "test_visual_document_processor_docx": 117, "test_visual_document_processor_freetextonli": 117, "test_visual_document_processor_html": 117, "test_visual_document_processor_json": 117, "test_visual_document_processor_notformattedtext": 117, "test_visual_document_processor_pdf": 117, "test_visual_document_processor_pptx": 117, "test_visual_document_processor_t": 117, "test_visual_document_processor_tablecv": 117, "test_visual_document_processor_userapidocr": 117, "testvisualquestionansw": 118, "test_question_answering_donut": 118, "test_question_answering_donut_load": 118, "test_question_answering_pix2struct": 118, "test_question_answering_pix2struct_from_piec": 118, "test_question_answering_pix2struct_load": 118, "cachedir": 118, "testhocrtoken": 120, "test_hoct_tokenizz": 120, "intersection_over_union": 121, "boxa": 121, "boxb": 121, "matchcoordin": 121, "atoli": 121, "atolscor": 121, "formrelationextractor": 122, "classnam": [122, 123, 130, 131, 132, 134, 135, 136, 154, 173, 174, 187, 188, 194, 199, 200, 201, 228, 229, 232, 237, 238, 239, 249, 250], "com": [122, 123, 130, 131, 132, 134, 135, 154, 173, 174, 187, 188, 199, 200, 201, 222, 226, 227, 228, 229, 232, 237, 238, 239, 249, 250, 252, 253, 273], "johnsnowlab": [122, 123, 130, 131, 132, 134, 135, 154, 173, 174, 187, 188, 199, 200, 201, 222, 227, 228, 229, 232, 237, 238, 239, 249, 250], "keypattern": 122, "linetoler": [122, 228], "valuepattern": 122, "setkeypattern": 122, "setlinetoler": [122, 228], "setvaluepattern": 122, "georelationextractor": 123, "java_model": [123, 130, 131, 132, 134, 135, 136, 152, 154, 173, 174, 187, 188, 194, 199, 200, 201, 214, 218, 228, 229, 232, 237, 238, 239, 249, 250], "javamlread": [123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 143, 146, 149, 150, 151, 152, 154, 156, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239], "javamlwrit": [123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 143, 146, 149, 150, 151, 152, 154, 156, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239], "outputformat": [123, 131, 159, 166, 218, 228, 229, 240], "folder": [123, 130, 131, 132, 134, 135, 136, 152, 154, 173, 174, 187, 188, 194, 199, 200, 201, 203, 214, 218, 220, 228, 237, 238, 239, 249, 250, 253, 271], "loadonnxmodel": [123, 130, 131, 132, 134, 135, 154, 173, 174, 187, 188, 199, 238, 239, 250], "onnx": [123, 130, 132, 134, 135, 136, 154, 187, 188, 199, 238, 239, 250], "classmethod": [123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "rl": [123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "mlreader": [123, 125, 126, 127, 130, 131, 132, 134, 135, 143, 146, 149, 150, 151, 152, 154, 156, 159, 160, 161, 164, 165, 166, 167, 168, 169, 172, 173, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 231, 232, 233, 234, 236, 237, 238, 239], "save": [123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 253, 270, 271, 273], "shortcut": [123, 125, 126, 127, 130, 131, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "write": [123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250, 273], "savemodel": [123, 131, 132, 134, 136, 154, 187, 188, 194, 199, 201, 228, 238, 239, 249, 250], "model_path": [123, 130, 131, 132, 134, 135, 136, 154, 187, 188, 194, 199, 201, 228, 238, 239, 249, 250, 266], "setlabel": [123, 130, 131, 132, 173, 187, 199, 200, 201, 237, 238, 239], "setmaxsentencelength": [123, 199, 200, 201, 237, 238], "maxsentencelength": [123, 199, 200, 201, 237, 238], "setoutputformat": [123, 131, 159, 166, 218, 228, 229, 240], "mlwriter": [123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 249, 250], "form_relation_extractor": [124, 193], "geo_relation_extractor": [124, 193], "base64tobinari": 125, "haskeepinput": [125, 126, 127, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 163, 186, 189, 194, 196, 204, 210, 212, 228, 249, 250], "filenamecol": 125, "keepinput": [125, 126, 127, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 189, 194, 196, 204, 210, 212, 228, 249, 250], "truncateinput": [125, 126], "setfilenamecol": 125, "origincol": [125, 126, 127, 140, 142, 143, 144, 145, 146, 149, 156, 168, 169, 189, 194, 205, 206, 208, 209, 212, 215], "setkeepinput": [125, 126, 127, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 189, 194, 196, 204, 210, 212, 228, 249, 250], "settruncateinput": [125, 126], "base64toimag": 126, "hasimagetyp": [126, 127, 184, 185, 204], "pagenumcol": [126, 127, 143, 144, 149, 151, 205, 206, 208, 211, 212, 213, 215, 216], "setimagetyp": [126, 127, 160, 164, 172, 184, 185, 192, 204, 212], "setorigincol": [126, 127, 140, 142, 143, 144, 146, 149, 156, 168, 169, 189, 194, 205, 206, 208, 209, 212, 215], "setpagenumcol": [126, 127, 143, 144, 149, 151, 205, 206, 208, 211, 212, 213, 215, 216], "binarytoimag": 127, "charttotextt": 128, "datasetread": 129, "java_obj": [129, 155, 220], "py4j": 129, "java_gatewai": 129, "javaobject": 129, "readdataset": [129, 220], "key_column_nam": 129, "column": [129, 151, 152, 205, 210, 211, 212, 213, 214, 216, 217, 218, 265], "readpreprocesseddataset": 129, "documentlayoutanalyz": 130, "defaultparamsread": [130, 134, 135, 136, 139, 140, 141, 142, 144, 145, 147, 154, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 194, 196, 228, 229, 249, 250], "defaultparamswrit": [130, 134, 135, 136, 139, 140, 141, 142, 144, 145, 147, 154, 157, 158, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 194, 196, 228, 229, 231, 249, 250], "mergeintersect": [130, 136], "nmsthreshold": 130, "outputlabel": [130, 131, 132, 173, 187], "scalefactor": [130, 135, 140, 183], "scorethreshold": [130, 131, 132, 134, 135, 136, 173, 187], "graph": [130, 132, 134, 135, 136, 154, 173, 174, 187, 188, 200, 237, 238, 239, 250], "setup": [130, 132, 134, 135, 136, 154, 173, 174, 187, 188, 200, 237, 238, 239, 250], "setmergeintersect": [130, 136], "setnmsthreshold": 130, "setoutputlabel": [130, 131, 132, 173, 187], "setscalefactor": [130, 135, 140, 183], "setscorethreshold": [130, 131, 132, 134, 135, 136, 173, 187], "imagecheckboxdetector": 131, "margin": [131, 166, 229], "setmargin": [131, 166, 229], "imagedocumentregiondetector": 132, "imagetabledetector": [132, 187], "applycorrect": [132, 187], "scaleheighttocol": [132, 187], "scalewidthtocol": [132, 187], "setapplycorrect": [132, 187], "setscaleheighttocol": [132, 187], "setscalewidthtocol": [132, 187], "imagetextdetector": 133, "imagetextdetectorcraft": 134, "linkthreshold": [134, 136, 188], "sizethreshold": [134, 136, 188], "textthreshold": [134, 136, 188], "usegpu": [134, 136, 194, 228, 250], "withrefin": [134, 136], "setheight": [134, 154, 183, 188, 194, 228, 249, 250], "setlinkthreshold": [134, 136, 188], "setsizethreshold": [134, 136, 188], "settextthreshold": [134, 136, 188], "setusegpu": [134, 136, 194, 228, 250], "setuseinputimagedim": 134, "setwidth": [134, 136, 154, 160, 183, 188, 194, 228, 249, 250], "setwithrefin": [134, 136], "imagetextdetectordit": 135, "imagetextdetectorv2": 136, "hasforceprocess": [136, 145, 194, 204, 228, 249, 250], "imagetextdetectorv2writ": 136, "forceprocess": [136, 145, 194, 204, 228, 249, 250], "optionmap": [136, 194], "shouldoverwrit": [136, 194], "usepandasudf": 136, "exploding_wrap": [136, 145, 194, 204, 228, 249, 250], "func": [136, 145, 194, 204, 228, 249, 250, 273], "extractjsonparam": [136, 194], "skipparam": [136, 194], "sequenc": [136, 194, 273], "getmodelpath": [136, 194, 228], "get_predict": [136, 255, 261], "craft_net": [136, 255, 261], "refine_net": [136, 255, 261], "text_threshold": [136, 252, 255, 261], "link_threshold": [136, 252, 255, 261], "low_text": [136, 252, 255, 261], "cuda": [136, 252, 255, 261], "long_siz": [136, 254, 255, 261], "1280": [136, 255, 261], "poli": [136, 252, 253, 255, 261], "loadpytorchmodel": 136, "pytorch": [136, 257], "add": [136, 194, 224, 273], "underli": [136, 194], "see": [136, 194, 203, 273], "writer": [136, 194, 246], "insensit": [136, 194, 271], "overwrit": [136, 194], "pandas_udf": 136, "saveimpl": [136, 194], "actual": [136, 194], "savemetadata": [136, 194], "sc": [136, 155, 194, 220], "sparkcontext": [136, 194], "extrametadata": [136, 194], "timestamp": [136, 194, 273], "sparkvers": [136, 194], "defaultparammap": [136, 194], "sinc": [136, 194, 273], "etc": [136, 194, 273], "rw": [136, 194], "setforceprocess": [136, 145, 194, 204, 228, 249, 250], "setusepandasudf": 136, "spacewidth": [136, 228], "udf": 136, "special": [136, 194, 224, 273], "estim": [136, 194, 265], "whose": [136, 194, 273], "serializ": [136, 194], "document_layout_analyz": [137, 193], "image_checkbox_detector": [137, 193], "image_document_region_detector": [137, 193], "image_text_detector": [137, 193], "image_text_detector_craft": [137, 193], "image_text_detector_dit": [137, 193], "image_text_detector_v2": [137, 193], "basedicom": [138, 140, 144, 145], "readmaxbyt": [138, 140, 144, 145], "get_s3_cr": [138, 140, 144, 145], "sql_ctx": [138, 140, 144, 145], "read_dicom": [138, 140, 144, 145], "read_max_byt": [138, 140, 144, 145], "stop_before_pixel": [138, 140, 144, 145], "setreadmaxbyt": [138, 140, 144, 145], "dicomdeidentifi": 139, "de": [139, 141, 270, 271], "identifi": [139, 141, 270, 271, 273], "blacklist": [139, 169], "p": [139, 141, 142, 143, 144, 145, 146, 147, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 196, 204, 240, 273], "shallow": [139, 141, 142, 143, 144, 145, 146, 147, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 196, 204, 240], "over": [139, 141, 142, 143, 144, 145, 146, 147, 162, 163, 170, 171, 172, 175, 178, 180, 181, 182, 186, 196, 204, 240, 246], "approach": [139, 141, 142, 143, 144, 145, 146, 147, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 196, 204, 240], "suffici": [139, 141, 142, 143, 144, 145, 146, 147, 162, 163, 170, 171, 175, 178, 180, 181, 182, 186, 196, 204, 240], "get_input_col": [139, 141, 143, 144, 146, 196], "col_typ": [139, 141, 143, 144, 146, 196], "posit": [139, 141, 143, 144, 146, 196, 215, 236, 273], "get_tag": 139, "strategy_fil": 139, "setblacklist": [139, 169], "setblacklistfil": 139, "transform_dicom": [139, 140, 141, 142, 143, 144, 145, 146, 147], "noimag": 140, "common": [140, 216], "non": [140, 265, 273], "exit": 140, "dicomclean": 140, "base_dicom": [140, 144, 145, 148, 193], "overlay_tag": 140, "24576": 140, "cleaned_overlay_data": 140, "frame_numb": 140, "htj2k_color_spac": 140, "htj2k_lossless_color_spac": 140, "htj2k_lossless_rpcl_color_spac": 140, "is_compress": 140, "jpeg_2000_color_spac": 140, "jpeg_2000_lossless_color_spac": 140, "jpeg_baseline_8bit_color_spac": 140, "jpeg_extended_12_bit_color_spac": 140, "jpeg_lossless_p14_color_spac": 140, "jpeg_lossless_sv1_color_spac": 140, "jpeg_ls_lossless_color_spac": 140, "jpeg_ls_near_lossless_color_spac": 140, "overlay_data": 140, "rle_color_spac": 140, "transfer_syntax": 140, "add_compression_ratio": 140, "clean": [140, 273], "fix_interpret": 140, "pixel_data_attribut": 140, "pixeldata": 140, "clean_fram": 140, "extract_pixel_using_handl": 140, "get_transfer_syntax_based_on_dicom_tag": 140, "tri": 140, "syntax": 140, "pixel": [140, 162, 171, 172, 265, 273], "transfer": 140, "vari": [140, 273], "pydicom": 140, "overcom": 140, "gap": 140, "other": [140, 267, 273], "keep": [140, 273], "compress": [140, 205, 273], "els": [140, 273], "chang": [140, 155, 220], "lossi": 140, "fail": 140, "match": [140, 273], "tupl": [140, 266, 271, 273], "compresss": 140, "_": [140, 273], "infer_reshape_s": 140, "frame": [140, 144, 273], "row": [140, 144, 211, 212, 213, 214], "col": [140, 214], "sampl": [140, 243, 273], "dicom_fil": 140, "forceoutput": 140, "compressionqu": [140, 144], "resolve_compression_qu": 140, "save_dicom": 140, "validate_input_dicom_tag": 140, "attribut": 140, "photometr": [140, 273], "interpret": 140, "per": [140, 212, 213, 214, 271, 273], "relev": 140, "pydicom_vers": 140, "forc": 140, "photometricinterpret": 140, "transfersyntaxuid": 140, "samplesperpixel": [140, 273], "bitsalloc": 140, "bitsstor": 140, "highbit": 140, "tag": [140, 141, 270, 273], "dicomdrawregion": 140, "draw": [140, 168, 169, 209, 271], "aggcol": 140, "inputregionscol": [140, 169, 179, 185, 194, 209], "memoryoptim": [140, 144], "setaggcol": 140, "setcompressionqu": [140, 144], "setforceoutput": 140, "setinputregionscol": [140, 169, 179, 185, 194, 209], "setmemoryoptim": [140, 144], "dicommetadatadeidentifi": 141, "placeholdertext": 141, "removeprivatetag": 141, "strategyfilecont": 141, "userse": 141, "clean_tag_nam": 141, "getrul": 141, "rulesfilecont": 141, "setplaceholdertext": 141, "setremoveprivatetag": 141, "setstrategyfil": 141, "setuserse": 141, "names_file_path": 141, "surnames_file_path": 141, "placehold": 141, "user_se": 141, "delete_tag": 141, "dummy_graphic_annotation_sequ": 141, "dummy_person_identification_code_sequ": 141, "dummy_verifying_observer_identification_sequ": 141, "generate_random_str": 141, "max_len": 141, "get_random_nam": 141, "coher": 141, "get_random_name_with_se": 141, "get_random_uid": 141, "hash_uid": 141, "keepoid": 141, "liter": 141, "read_newline_separ": 141, "filenam": [141, 203, 221, 265, 270, 273], "remove_d": 141, "remove_sequ": 141, "remove_str": 141, "resolve_method": 141, "vr": 141, "action": 141, "resolv": 141, "accord": [141, 220, 225, 273], "return_empty_if_value_empti": 141, "shift_age_randomli": 141, "shift_date_fixed_dai": 141, "shift_date_random_dai": 141, "shift_date_time_dai": 141, "shift_dai": 141, "dt_format": 141, "shift_time_fixed_dai": 141, "shift_time_random_dai": 141, "dicomsplitt": 142, "documentnumcol": [142, 145], "partitionnum": [142, 145, 212, 213], "splitnumbatch": [142, 145, 212], "splittingstategi": [142, 145, 212], "setpartitionnum": [142, 212, 213], "setsplitnumbatch": [142, 212], "setsplittingstategi": [142, 212], "dicomtoimagev2": 143, "metadatacol": [143, 144, 149, 189], "setmetadatacol": [143, 144, 149], "part": [143, 144], "dicomtoimagev3": 144, "compressionmod": 144, "compressionthreshold": 144, "framelimit": 144, "scale": [144, 160, 180, 183, 271], "add_imag": 144, "arr": [144, 275], "d": [144, 273], "f": [144, 270], "setcompressionmod": 144, "setcompressionthreshold": 144, "setframelimit": 144, "setscal": [144, 160], "datasourc": 144, "number": [144, 211, 212, 213, 220, 225, 273, 274], "each": [144, 211, 212, 213, 214, 265, 273], "item": [144, 219, 263, 265, 273], "dicomtometadata": 145, "dicomtopdf": 146, "encapsul": [146, 147], "dicomupdatepdf": 147, "inputpdfcol": 147, "setinputpdfcol": 147, "dicom_deidentifi": [148, 193], "dicom_draw_region": [148, 193], "dicom_metadata_deidentifi": [148, 193], "dicom_splitt": [148, 193], "dicom_to_image_v2": [148, 193], "dicom_to_image_v3": [148, 193], "dicom_to_metadata": [148, 193], "dicom_to_pdf": [148, 193], "dicom_update_pdf": [148, 193], "dicomtoimag": 149, "deidentifymetadata": 149, "setdeidentifymetadata": 149, "doctopdf": 150, "convert": [150, 271, 273], "doctotext": 151, "represent": [151, 152, 205, 210, 211, 212, 213, 214, 217, 218, 273], "As": [151, 152, 205, 211, 212, 213, 214, 217, 218], "doctotextt": 152, "tablecontain": [152, 217, 218], "vit_image_embed": [153, 193], "vitimageembed": 154, "normmean": [154, 228, 249, 250], "normstd": [154, 228, 249, 250], "setnormmean": [154, 228, 249, 250], "extendedjavawrapp": [155, 220], "arg": [155, 220, 245, 246, 273, 274], "new_java_arrai": [155, 220], "pylist": [155, 220], "java_class": [155, 220], "todo": [155, 220], "inspir": [155, 220], "review": [155, 220], "new_java_array_integ": [155, 220], "new_java_array_str": [155, 220], "new_java_obj": [155, 220], "foundationonereportpars": 156, "foundationon": 156, "parser": [156, 273], "hocrmerg": 157, "hocrtoimag": 158, "hocrtotextt": 159, "hasocr": [159, 165, 166, 176, 190, 191, 204, 229, 240], "cell": [159, 166], "annotator_typ": 159, "_to_tabl": 159, "downloadmodeldata": [159, 165, 166, 176, 190, 191, 204, 229, 240], "modeldata": [159, 165, 166, 176, 190, 191, 204, 229, 240], "ocrenginemod": [159, 165, 166, 176, 190, 191, 204, 229, 240], "pagesegmod": [159, 165, 166, 176, 190, 191, 204, 229, 240], "recognizeralgo": 159, "regioncol": 159, "usecellscol": 159, "usetess4j": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setdownloadmodeldata": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setlanguag": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setmodeldata": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setmodeltyp": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setocrenginemod": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setpageiteratorlevel": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setpagesegmod": [159, 165, 166, 176, 190, 191, 204, 229, 240], "setrecognizeralgo": 159, "setregioncol": 159, "setusecellscol": 159, "setusetess4j": [159, 165, 166, 176, 190, 191, 204, 229, 240], "imageadaptivebinar": 160, "setmethod": [160, 162, 179, 214], "imageadaptivescal": 161, "desireds": 161, "setdesireds": 161, "imageadaptivethreshold": 162, "blocksiz": [162, 192], "offset": [162, 273], "imagebasetransform": [162, 163, 170, 171, 175, 178, 180, 181, 182], "mask": [162, 255, 261, 266], "neighborhood": [162, 171, 172, 265], "known": [162, 273], "dynam": [162, 273], "subtract": 162, "getblocks": 162, "getcval": 162, "getmethod": 162, "getmod": 162, "getoffset": 162, "setblocks": 162, "setcval": 162, "setmod": 162, "setoffset": 162, "setparam": [162, 170, 171, 172, 175, 178, 180, 181, 182, 192, 216], "transform_imag": [162, 163, 170, 171, 175, 178, 180, 181, 182, 194], "abstract": [163, 186, 196], "anoth": [163, 186, 196, 273], "imagebinar": 164, "setthreshold": [164, 175], "imagebrandstotext": 165, "brandscoord": 165, "confidencecol": [165, 191, 237], "confidencethreshold": [165, 191, 237], "ignoreresolut": [165, 190, 191], "includeconfid": [165, 191, 228, 249], "ocrparam": [165, 166, 190, 191, 206], "positionscol": [165, 191], "textcol": 165, "setbrandscoord": 165, "setconfidencecol": [165, 191, 237], "setconfidencethreshold": [165, 191, 237], "setignoreresolut": [165, 190, 191], "setincludeconfid": [165, 191, 228, 249], "setocrparam": [165, 166, 190, 191, 206], "setpositionscol": [165, 191], "settextcol": 165, "imagecellstotextt": 166, "cellscol": 166, "strip": [166, 273], "setcellscol": 166, "setstrip": 166, "imagecropp": 167, "crop": 167, "croprectangl": 167, "setcroprectangl": 167, "tuple_4_v": 167, "setcropsquaretyp": 167, "croptyp": 167, "imagedrawannot": 168, "colormap": [168, 273], "filledrect": [168, 169], "fontsiz": [168, 169], "inputchunkscol": 168, "linewidth": [168, 169, 209], "setcolormap": 168, "setfilledrect": [168, 169], "setfonts": [168, 169], "setinputchunkscol": 168, "setlinewidth": [168, 169, 209], "displaymetadata": 169, "dynamiccolor": 169, "fontnam": 169, "ignoreschema": [169, 202, 216], "inpaintedcol": 169, "inputchunkmappingcol": 169, "pagematrixcol": [169, 216], "patchbackgroundcolor": 169, "patchimag": 169, "patchtextcolor": 169, "redactionentitylist": 169, "scaleboundingbox": 169, "sourceimageheightcol": 169, "sourceimagewidthcol": 169, "usecontrasttextcolor": 169, "setdisplaymetadata": 169, "setdynamiccolor": 169, "setfontnam": 169, "setfontstyl": 169, "setinpaintedcol": 169, "setinputchunkmappingcol": 169, "setpatchbackgroundcolor": 169, "nee": 169, "setpatchimag": 169, "setpatchtextcolor": 169, "setrectcolor": 169, "setredactionentitylist": 169, "setscaleboundingbox": 169, "setsourceimageheightcol": 169, "setsourceimagewidthcol": 169, "setusecontrasttextcolor": 169, "imageenhancecontrast": 170, "cliplimit": 170, "tilegrids": 170, "contrast": [170, 265], "enhac": 170, "getcliplimit": 170, "gettilegrids": 170, "setcliplimit": 170, "settilegrids": 170, "img": [170, 175, 180, 181, 186, 253, 254, 265, 266], "enhanc": 170, "imageeros": 171, "kernels": [171, 177, 178], "j": [171, 172, 265], "minimum": [171, 172, 220, 225], "shrink": [171, 172], "bright": [171, 172, 175], "enlarg": [171, 172], "dark": [171, 172], "getkernel": [171, 178], "getkernelshap": [171, 178], "getkernels": [171, 178], "setkernelshap": [171, 178], "setkernels": [171, 177, 178], "gpuimagetransform": 172, "gpunam": 172, "adddilatetransform": [172, 192], "adderodetransform": [172, 192], "addhuangtransform": 172, "addotsutransform": [172, 192], "addscalingtransform": [172, 192], "factor": [172, 192, 266], "setgpunam": 172, "imagehandwrittendetector": 173, "getlabel": [173, 238], "tensorflow": [173, 174, 200, 237], "setcasesensit": [173, 200, 237], "casesensit": [173, 200, 237, 238], "imagehandwrittentextrecogn": 174, "imagehomogenizelight": 175, "exp_in": 175, "illumin": 175, "homogen": 175, "getexpin": 175, "getthreshold": 175, "image_homogen": 175, "truncated_cdf": 175, "process_bright": 175, "process_dim": 175, "dimend": 175, "setexpin": 175, "imagelayoutanalyz": 176, "layout": 176, "analyz": 176, "segment": [176, 186], "imagemorphologyoperation1": 177, "setoper": [177, 178], "imagemorphologyoper": 178, "getbinari": 178, "getoper": 178, "setbinari": 178, "imagenoisescor": 179, "byregion": 179, "setbyregion": 179, "imageremovebackground": 180, "bl": 180, "background": [180, 182], "remov": [180, 181, 182, 265, 269, 270, 271], "getbl": 180, "img_threshold": 180, "th": 180, "flag": [180, 273], "edg": 180, "cei": 180, "setbl": 180, "imageremoveglar": 181, "glare": 181, "imageremoveobject": 182, "minsizeobject": 182, "It": [182, 186, 203, 241, 265], "avoid": [182, 274], "font": 182, "size": [182, 224, 255, 261, 265, 273, 274], "minsizefont": 182, "less": 182, "hole": 182, "minsizehol": 182, "more": [182, 263, 273], "maxsizeobject": 182, "connectivityhol": 182, "connectivitymaxobject": 182, "connectivityobject": 182, "getconnectivityhol": 182, "getconnectivitymaxobject": 182, "getconnectivityobject": 182, "getmaxsizeobject": 182, "getminsizefont": 182, "getminsizehol": 182, "getminsizeobject": 182, "setconnectivityhol": 182, "setconnectivitymaxobject": 182, "setconnectivityobject": 182, "setmaxsizeobject": 182, "setminsizefont": 182, "setminsizehol": 182, "setminsizeobject": 182, "dot_ratio": 182, "point_siz": 182, "imagescal": 183, "heightcol": 183, "keepratio": 183, "widthcol": 183, "setheightcol": 183, "setkeepratio": 183, "setwidthcol": 183, "imageskewcorrector": 184, "skew": 184, "corrector": 184, "http": [184, 221, 226, 252, 257, 273], "iit": 184, "demokrito": 184, "gr": 184, "bgat": 184, "icdar2011_skew": 184, "automaticskewcorrect": 184, "halfangl": 184, "rotationangl": 184, "setautomaticskewcorrect": 184, "sethalfangl": 184, "setresolut": [184, 205, 212], "setrotationangl": 184, "imagesplitregion": 185, "dropcol": 185, "setdropcol": 185, "imagetablecelldetector": 186, "cell_detection_algo": 186, "algoparam": 186, "algotyp": 186, "drawdetectedlin": 186, "keeporiginallin": 186, "outputimagecol": 186, "createtransformfunc": 186, "debug": 186, "getalgoparam": 186, "getalgotyp": 186, "getdrawdetectedlin": 186, "getkeeporiginallin": 186, "getoutputimagecol": 186, "get_cel": 186, "get_cells_morph": 186, "setalgoparam": 186, "pair": [186, 273], "setalgotyp": 186, "setdrawdetectedlin": 186, "setkeeporiginallin": 186, "setoutputimagecol": 186, "cut_head": 186, "detect_lin": 186, "axi": 186, "treshold": 186, "05": [186, 245], "treshold_wid": 186, "min_wid": 186, "preprocess": 186, "along": 186, "select": 186, "ax": [186, 273], "get_cells_opencv": 186, "normalize_image_s": 186, "norm_max_shap": 186, "remove_lin": 186, "morph_default_param": 186, "imagetextclean": 188, "binar": [188, 212, 265], "medianblur": 188, "pad": [188, 266], "setbinar": [188, 212], "setmedianblur": 188, "setpad": 188, "imagetodicom": 189, "inputmetadata": 189, "setinputmetadata": 189, "imagetohocr": 190, "imagetotext": 191, "keeplayout": 191, "outputspacecharacterwidth": 191, "pdfcoordin": 191, "withspac": 191, "setkeeplayout": 191, "setoutputspacecharacterwidth": 191, "setpdfcoordin": 191, "setwithspac": 191, "imagetransform": 192, "addadaptivethreshold": 192, "c": [192, 254, 258, 260, 265, 266, 273], "addblur": 192, "ksize": 192, "addinvert": 192, "addmedianblur": 192, "addremoveobject": 192, "minsiz": 192, "maxsiz": [192, 273], "1000": 192, "connect": [192, 265], "image_inpaint": [193, 195], "hocr_to_featur": [193, 197], "visual_document_n": [193, 197], "visual_document_ner_geo": [193, 197], "visual_document_ner_layoutlm_v1": [193, 197], "visual_document_ner_lilt": [193, 197], "image_to_text_pdf": [193, 207], "pdf_assembl": [193, 207], "pdf_draw_region": [193, 207], "pdf_to_form": [193, 207], "pdf_to_hocr": [193, 207], "pdf_to_imag": [193, 207], "pdf_to_text": [193, 207], "pdf_to_text_t": [193, 207], "text_to_pdf": [193, 207], "alab_read": [193, 223], "docvqa_read": [193, 223], "funsd_read": [193, 223], "iam_read": [193, 223], "mixed_iter": [193, 223], "rvlcdip_read": [193, 223], "sroie_read": [193, 223], "tacd_read": [193, 223], "image_to_text_v2": [193, 230], "image_to_text_v3": [193, 230], "bros_hocr_token": [193, 235], "hocr_document_assembl": [193, 235], "hocr_token": [193, 235], "dit": [193, 239, 244], "lilt": [193, 201, 244], "engine_for_finetun": [193, 244], "optim_factori": [193, 244], "visual_question_answering_donut": [193, 248], "visual_question_answering_pix2struct": [193, 248], "imageinpaint": 194, "imageinpaintingwrit": 194, "inferencecl": 194, "inpaint_imag": 194, "load_model_object": 194, "process_region_inform": 194, "box": [194, 252, 253, 255, 261, 264, 267], "hocrtofeatur": 196, "o": [196, 265], "header": [196, 246, 273], "question": [196, 220, 249, 250], "answer": [196, 273], "classes_valid": 196, "voca": 196, "bert": 196, "uncas": 196, "bio_class_idx_d": 196, "bio_class_nam": 196, "class_idx_d": 196, "class_nam": 196, "cls_token_id": 196, "101": 196, "img_h": 196, "768": 196, "img_w": 196, "max_block_num": 196, "256": [196, 273], "max_seq_length": 196, "512": [196, 242], "pad_token_id": 196, "sep_token_id": 196, "unk_token_id": 196, "getitem_geo": 196, "json_obj": 196, "to_geo": 196, "funsd_json": 196, "tokens_to_funsd_json": 196, "transform_hocr": 196, "visualdocumentn": 198, "visualdocumentnergeo": 199, "whitelist": [199, 200, 201], "setwhitelist": [199, 200, 201], "visualdocumentnerlayoutlmv1": 200, "loadtfmodel": [200, 237], "visualdocumentnerlilt": 201, "evalbatchs": 201, "evals": [201, 239], "evalstep": 201, "labelalltoken": 201, "learningr": 201, "maxstep": 201, "removecach": 201, "savestep": 201, "stride": [201, 242, 266], "trainbatchs": [201, 239], "base_model": [201, 239, 242], "nielsr": 201, "xlm": 201, "roberta": 201, "atol": [201, 239, 241, 242], "01": [201, 239, 241, 242, 273], "setevals": [201, 239], "setevalstep": 201, "setlabelalltoken": 201, "setlearningr": 201, "setmaxstep": 201, "setmerg": 201, "setmergesfil": 201, "setremovecach": 201, "setsavestep": 201, "setstrid": 201, "settrainbatchs": [201, 239], "setvocabulari": [201, 232, 238, 250], "setvocabularyfil": [201, 232], "neroutputclean": 202, "fix": 202, "chunkid": 202, "outputnercol": 202, "setignoreschema": [202, 216], "setoutputnercol": 202, "ocrresourcedownload": 203, "sparknlp": [203, 216, 220], "resourcedownload": 203, "manag": [203, 273], "usual": 203, "directli": 203, "howev": 203, "want": 203, "nerdlmodel": 203, "english": 203, "showpublicmodel": 203, "onto_100": 203, "onto_300": 203, "ner_dl_bert": 203, "similarli": 203, "showpublicpipelin": 203, "dependency_pars": 203, "check_spel": 203, "match_datetim": 203, "clearcach": 203, "cach": [203, 273], "entri": 203, "directori": [203, 253, 270, 271, 273], "downloadendpointmodel": 203, "downloadmodel": 203, "j_dwn": 203, "ocrpythonresourcedownload": 203, "obj": 203, "which": [203, 273], "pythonresourcedownload": 203, "downloadmodeldirectli": 203, "public": 203, "unzip": [203, 220, 225], "past": [203, 273], "s3": [203, 222, 227], "uri": 203, "pleas": 203, "downloadpipelin": 203, "showavailableannot": 203, "show": [203, 253], "particular": 203, "compat": [203, 273], "consid": 203, "filer": 203, "showuncategorizedresourc": 203, "categor": 203, "yet": 203, "take": [204, 273], "attach": 204, "imagetopdf": 205, "group": [205, 263, 266, 271, 273], "aggregatepag": 205, "qualiti": 205, "setaggregatepag": 205, "setcompress": 205, "setqual": 205, "imagetotextpdf": 206, "render": [206, 215, 264], "pdfassembl": 208, "multi": [208, 273], "pdfdrawregion": 209, "pdftoform": 210, "export": [210, 253, 255, 261], "form": [210, 273], "prop": 210, "coordiat": 210, "usefullyqualifiednam": 210, "setusefullyqualifiednam": 210, "pdftohocr": 211, "explod": [211, 212, 213], "separ": [211, 212, 213, 273], "split": [211, 213, 224, 242], "keeporiginalencod": 211, "sort": [211, 213, 273], "textstripp": [211, 213], "setkeeporiginalencod": 211, "setsort": [211, 213], "setstoresplittedpdf": [211, 213], "storesplittedpdf": [211, 213], "settextstripp": [211, 213], "sever": [212, 213], "binarizationparam": 212, "fallbackcol": 212, "minsizebeforefallback": 212, "partitionnumaftersplit": 212, "splitpag": [212, 213], "setbinarizationparam": 212, "setfallbackcol": 212, "setminsizebeforefallback": 212, "setpartitionnumaftersplit": 212, "setsplitpag": [212, 213], "pdftotext": 213, "extractcoordin": 213, "normalizeligatur": 213, "onlypagenum": 213, "setextractcoordin": 213, "setnormalizeligatur": 213, "setonlypagenum": 213, "pdftotextt": 214, "report": 214, "chunk": [214, 216, 265, 274], "guess": 214, "pageindex": 214, "setguess": 214, "setpageindex": 214, "texttopdf": 215, "inputcont": 215, "inputimag": 215, "inputtext": [215, 236], "setinputcont": 215, "setinputimag": 215, "setinputtext": [215, 236], "positionfind": 216, "inherit": 216, "befor": [216, 271], "mix": 216, "ins": 216, "becaus": 216, "getter_attr": 216, "inputannotatortyp": 216, "lazyannot": 216, "ocrscalefactor": 216, "optionalinputannotatortyp": 216, "outputannotatortyp": 216, "pdfscalefactor": 216, "smoothcoordin": 216, "splitonnewlin": 216, "getlazyannot": 216, "evalu": [216, 243, 268], "lazili": 216, "recursivepipelin": 216, "getparamvalu": 216, "inputcolsvalid": 216, "setlazyannot": 216, "setocrscalefactor": 216, "setpagematrixcol": 216, "setparamvalu": 216, "setpdfscalefactor": 216, "setsmoothcoordin": 216, "setsplitonnewlin": 216, "ppttopdf": 217, "ppttotextt": 218, "alabread": 219, "datalabel": 219, "jsonpath": [219, 220], "imagefolderpath": 219, "getprepareddataitem": 219, "ind": 219, "get_word": 219, "isrectangleoverlap": 219, "r1": 219, "r2": 219, "jsonread": 219, "json_path": 219, "llmv2_alab_data": 219, "alabreadersv1": 219, "doc_typ": 219, "docvqa": 220, "questionscol": [220, 249, 250], "consum": 220, "getdatafram": 220, "jdf": 220, "imagesfold": 220, "partit": [220, 225], "storage_level": [220, 225], "storagelevel": [220, 225], "disk_onli": [220, 225], "extern": [220, 225], "lift": [220, 225], "multipl": [220, 225, 271, 273], "persist": [220, 225], "definit": [220, 225], "funsdread": 221, "root_work_dir": [221, 222, 226, 227], "funsd_process": 221, "target_dir": [221, 222, 226, 227], "funsd_result": 221, "supported_label": 221, "clean_up": [221, 222, 226, 227], "funsd": 221, "guillaumejaum": 221, "github": 221, "io": [221, 273], "create_file_identifi": [221, 226, 227], "file_path": [221, 222, 226, 227, 253, 271], "download_and_extract": [221, 222, 226, 227], "combined_byt": [221, 226, 227], "combined_extens": [221, 226, 227], "process_funsd_split": 221, "load_dir": [221, 222, 226, 227], "iamread": 222, "iam_process": 222, "iam_result": 222, "aws_access_key_id": [222, 227], "aws_secret_access_kei": [222, 227], "aws_session_token": [222, 227], "aws_key_id": [222, 227], "aws_secret_kei": [222, 227], "file_nam": [222, 227, 253], "s3_uri": [222, 227], "dev": [222, 227, 270], "iam": 222, "extract_file_nam": 222, "read_annotation_fil": 222, "mixeddataset": 224, "max_patch": 224, "2048": 224, "max_length": [224, 242], "48": 224, "ignore_id": 224, "task_start_token": 224, "prompt_end_token": 224, "sort_json_kei": 224, "repo_id": 224, "torch": [224, 241, 242, 243, 246, 257, 258, 260, 266, 275], "iterabledataset": [224, 241, 242, 275], "df_iter": 224, "df_size": 224, "gt_token_sequ": 224, "processor": [224, 240, 273], "produc": [224, 240], "produced_distribut": 224, "prompt_end_token_id": 224, "total_weight": 224, "add_token": 224, "list_of_token": 224, "resiz": 224, "process_input_row": 224, "added_token": 224, "rvlcdipread": 225, "readtestdataset": 225, "rvl": 225, "cdp": 225, "rvlcdip": 225, "readtraindataset": 225, "labels_path": 225, "images_path": 225, "sroieread": 226, "sensit": [226, 270, 271], "dont": 226, "sroie_process": 226, "sroie_result": 226, "sroie_test": 226, "doctr": 226, "minde": 226, "id": [226, 252, 265], "v0": 226, "sroie2019_test": 226, "src": 226, "sroie_train": 226, "sroie2019_train_task1": 226, "process_sroie_split": 226, "combined_path": 226, "tacdread": 227, "tacd_process": 227, "tacd_result": 227, "tacd": 227, "process_tacd_split": 227, "imagetotextv2": 228, "batchsiz": 228, "borderwidth": 228, "endtokenid": [228, 249, 250], "groupimag": 228, "limitmultipli": 228, "maximageratio": 228, "maximages": 228, "regionscolumn": 228, "scorescol": 228, "spaceencod": [228, 249, 250], "starttokenid": [228, 249, 250], "taskparallel": 228, "usecach": [228, 250], "setbatchs": 228, "setborderwidth": 228, "setendtokenid": [228, 249, 250], "setgroupimag": 228, "setlimitmultipli": 228, "setmaximageratio": 228, "setmaximages": 228, "setnormstd": [228, 249, 250], "setregionscolumn": 228, "setscorescol": 228, "setspaceencod": [228, 249, 250], "setspacewidth": 228, "setstarttokenid": [228, 249, 250], "settaskparallel": 228, "setusecach": [228, 250], "imagetotextv3": 229, "regionsmerg": 231, "cellinputcol": 231, "handwrittenlabel": 231, "imageinputcol": 231, "keeptextregion": 231, "setcellinputcol": 231, "sethandwrittenlabel": 231, "setimageinputcol": 231, "setkeeptextregion": 231, "broshocrtoken": 232, "hocrtoken": [232, 234], "settokenizertyp": [232, 234], "hocrdocumentassembl": 233, "updatetextposit": 236, "old": 236, "visualdocumentclassifi": 237, "labelcol": 237, "setlabelcol": 237, "visualdocumentclassifierlilt": 238, "getpreprocesseddataset": 238, "loaddataset": 238, "loadpreprocesseddataset": 238, "loadvocabulari": 238, "preprocess_preprocessed_df": 238, "label2id_convers": 238, "visualdocumentclassifierv3": 239, "trainepoch": 239, "p16": 239, "500k": 239, "62d53a": 239, "pth": [239, 257], "base_model_path": [239, 241], "settrainepoch": 239, "visualdocumentprocessor": 240, "freetextonli": 240, "ocrengin": 240, "outputtableformat": 240, "process_imag": 240, "setfreetextonli": 240, "setocrengin": 240, "setoutputtableformat": 240, "batch_siz": [241, 275], "checkpoint_model": 241, "devic": [241, 242, 243, 266, 275], "label2id": [241, 242], "patch_siz": 241, "smooth": [241, 246], "window_s": [241, 246], "finish_model": 241, "to_onnx": [241, 242], "onnx_model_path": [241, 242], "update_config_label": [241, 242], "ditdatasetiter": 241, "image_col": [241, 242], "labels_col": 241, "n_width": 241, "n_height": 241, "label_col": 241, "normalize_bbox": [241, 242], "bbox": [241, 242, 253, 271], "getdataset": 242, "to_onnx_optimum": 242, "liltnerdatasetiter": 242, "entities_col": 242, "label_all_token": 242, "data_load": 243, "get_loss_scale_for_deepspe": 243, "train_class_batch": 243, "target": 243, "criterion": 243, "train_one_epoch": 243, "nn": [243, 257, 258, 260, 266], "epoch": [243, 246, 273], "loss_scal": [243, 246], "max_norm": 243, "model_ema": [243, 246], "timm": 243, "modelema": 243, "mixup_fn": 243, "mixup": 243, "log_writ": 243, "start_step": 243, "lr_schedule_valu": 243, "wd_schedule_valu": 243, "num_training_steps_per_epoch": 243, "update_freq": 243, "layerdecayvalueassign": 245, "get_layer_id": 245, "var_nam": 245, "get_scal": 245, "layer_id": 245, "create_optim": 245, "get_num_lay": 245, "get_layer_scal": 245, "filter_bias_and_bn": 245, "skip_list": 245, "get_num_layer_for_vit": 245, "num_max_lay": 245, "get_parameter_group": 245, "weight_decai": 245, "1e": 245, "has_apex": 245, "metriclogg": 246, "meter": 246, "add_met": 246, "log_everi": 246, "print_freq": 246, "synchronize_between_process": 246, "nativescalerwithgradnormcount": 246, "state_dict_kei": 246, "amp_scal": 246, "load_state_dict": 246, "state_dict": [246, 252], "smoothedvalu": 246, "fmt": 246, "track": 246, "seri": [246, 273], "access": [246, 273], "window": [246, 265, 273], "global": 246, "averag": 246, "count": [246, 273], "dequ": 246, "total": 246, "synchron": 246, "n": [246, 271, 273, 274, 275], "tensorboardlogg": 246, "log_dir": 246, "flush": [246, 273], "set_step": 246, "head": 246, "scalar": 246, "auto_load_model": 246, "model_without_ddp": 246, "cosine_schedul": 246, "base_valu": 246, "final_valu": 246, "niter_per_ep": 246, "warmup_epoch": 246, "start_warmup_valu": 246, "warmup_step": 246, "create_ds_config": 246, "get_grad_norm_": 246, "norm_typ": 246, "tensor": [246, 266], "get_rank": 246, "get_world_s": 246, "init_distributed_mod": 246, "is_dist_avail_and_initi": 246, "is_main_process": 246, "prefix": [246, 273], "ignore_miss": 246, "relative_position_index": 246, "save_model": 246, "save_on_mast": 246, "setup_for_distribut": 246, "is_mast": 246, "visualquestionansw": 247, "visualquestionansweringdonut": 249, "answerendmark": [249, 250], "answerstartmark": [249, 250], "encoderhiddenstatedim1": [249, 250], "encoderhiddenstatedim2": [249, 250], "maxseqlength": [249, 250], "numchannel": [249, 250], "padtokenid": [249, 250], "questionendmark": [249, 250], "questionstartmark": [249, 250], "taskendmark": [249, 250], "taskstartmark": [249, 250], "setmaxseqlength": [249, 250], "setnumchannel": [249, 250], "setpadtokenid": [249, 250], "setquestionendmark": [249, 250], "setquestionstartmark": [249, 250], "setquest": [249, 250], "setquestionscol": [249, 250], "settaskendmark": [249, 250], "settaskstartmark": [249, 250], "visualquestionansweringpix2struct": 250, "maxanswerlength": 250, "maxpatch": 250, "resource_filenam": 251, "packag": [251, 273], "fallback": 251, "pkg_resourc": 251, "deprec": 251, "parse_vers": 251, "adjustresultcoordin": 252, "ratio_w": 252, "ratio_h": 252, "ratio_net": 252, "copystatedict": 252, "getdetbox": 252, "textmap": 252, "linkmap": 252, "getdetboxes_cor": 252, "getpoly_cor": 252, "mapper": 252, "load_craftnet_model": [252, 255], "weight_path": [252, 255], "pathlib": 252, "load_refinenet_model": [252, 255], "warpcoord": 252, "minv": 252, "pt": 252, "craft_gdrive_url": 252, "drive": 252, "googl": 252, "uc": 252, "1bupfxqt": 252, "vu6jjeul13xp7yx2sg5ihr4j": 252, "refinenet_gdrive_url": 252, "1xce9qpjxp4ofinwxwvhhqih9s8z7cugj": 252, "create_dir": 253, "_dir": 253, "present": [253, 254, 258, 260], "crop_poli": 253, "save_path": 253, "gdrive": 253, "progress": 253, "ftp": 253, "smartengin": 253, "midv": 253, "500": [253, 265], "01_alb_id": 253, "export_detected_region": [253, 255], "rectifi": [253, 255], "point": [253, 255, 261, 267], "polygon": [253, 261], "affin": 253, "output_dir": [253, 255, 261], "numpi": [253, 255, 261, 273], "pil": [253, 255, 261, 266], "export_extra_result": [253, 255], "heatmap": [253, 255, 261], "vertic": 253, "shape": [253, 265, 273], "num_detect": 253, "bb": 253, "quad": 253, "get_fil": [253, 270], "img_dir": 253, "list_fil": 253, "in_path": 253, "rectify_poli": 253, "copyright": [254, 258, 260], "2019": [254, 258, 260], "naver": [254, 258, 260], "corp": [254, 258, 260], "mit": [254, 258, 260], "licens": [254, 258, 260, 273], "cvt2heatmapimg": 254, "denormalizemeanvari": 254, "in_img": 254, "485": 254, "456": 254, "406": 254, "229": 254, "normalizemeanvari": 254, "read_imag": [254, 255], "resize_aspect_ratio": 254, "interpol": [254, 266, 273], "basenet": [255, 258, 259], "craftnet": [255, 259], "refinenet": [255, 259], "craft_util": [255, 265], "file_util": [255, 265], "image_util": [255, 265], "predict": [255, 265, 273], "torch_util": [255, 265], "export_extra": 255, "refin": [255, 261], "crop_typ": 255, "weight_path_craft_net": 255, "weight_path_refine_net": 255, "detect_text": 255, "image_path": 255, "2d": [255, 261], "coord": [255, 261], "boxes_as_ratio": [255, 261], "polys_as_ratio": [255, 261], "charact": [255, 261, 273], "text_crop_path": 255, "time": [255, 261, 270, 273], "elaps": [255, 261], "sub": [255, 261, 273], "second": [255, 261, 265], "unload_craftnet_model": 255, "unload": 255, "unload_refinenet_model": 255, "empty_cuda_cach": 255, "vgg16_bn": [256, 259], "freez": [257, 258], "model_url": 257, "org": [257, 273], "6c64b313": 257, "slice1": 257, "slice2": 257, "slice3": 257, "slice4": 257, "slice5": 257, "forward": [257, 258, 260, 266], "init_weight": 257, "u": 258, "network": [258, 273], "conv_cl": 258, "upconv1": 258, "upconv2": 258, "upconv3": 258, "upconv4": [258, 260], "double_conv": 258, "in_ch": 258, "mid_ch": 258, "out_ch": 258, "conv": 258, "aspp1": 260, "aspp2": 260, "aspp3": 260, "aspp4": 260, "last_conv": 260, "net": [261, 273], "confid": 261, "low": 261, "bound": 261, "infer": 261, "canvas_s": 261, "desir": 261, "longest": 261, "cluster": 263, "maxgap": 263, "lambda": [263, 273], "arrang": 263, "success": [263, 274], "element": 263, "than": [263, 265, 273], "109": 263, "141": 263, "get_siz": 263, "write_dataset_to_byt": 263, "hocrrender": 264, "htmlid": 264, "ocr_class": 264, "baselin": 264, "page_height": 264, "page_width": 264, "titl": [264, 273], "templat": 264, "x0": 264, "x1": [264, 271], "y0": 264, "y1": [264, 271], "maximize_bbox": 264, "phi_clean": [265, 269], "phi_redact": [265, 269], "phi": [265, 269], "tiffpars": [265, 269], "tile_extract": [265, 269], "display_pdf_fil": 265, "600": 265, "tmp": 265, "compare_vers": 265, "version1": 265, "version2": 265, "compar": 265, "two": [265, 273], "older": 265, "newer": 265, "display_dicom": 265, "700": 265, "only_meta": 265, "desc_width": 265, "limit_fram": 265, "display_images_horizont": 265, "display_markup": 265, "display_t": 265, "table_col": 265, "empty_v": 265, "table_index_col": 265, "keyword": 265, "display_xml": 265, "ensure_packages_instal": 265, "instal": 265, "get_nam": 265, "keep_subfolder_level": 265, "get_packbits_func": 265, "get_read_dicom_func": 265, "get_vocabulary_dict": 265, "delimet": 265, "get_xml": 265, "remove_dependency_from_traceback": 265, "exception_str": 265, "remove_large_object": 265, "max_siz": 265, "in_plac": 265, "greater": 265, "expect": [265, 266, 273], "largest": 265, "lead": 265, "potenti": 265, "behavior": 265, "ndarrai": [265, 273], "arbitrari": 265, "interest": [265, 273], "neg": 265, "allow": 265, "ndim": [265, 273], "dure": 265, "itself": 265, "out": [265, 273], "save_table_to_csv": 265, "fname": 265, "save_tables_to_csv": 265, "singh_threshold": 265, "w_size": 265, "k": 265, "algorithm": 265, "sinam": 265, "jame": 265, "r": [265, 273], "2012": 265, "techniqu": 265, "journal": 265, "applic": [265, 273], "51": [265, 273], "modif": 265, "integr": 265, "standard": [265, 271, 273], "deviat": 265, "odd": 265, "control": 265, "li": 265, "interv": 265, "rtype": 265, "split_bylen": 265, "maxlen": 265, "sliceabl": 265, "__getitem__": 265, "to_opencv_imag": 265, "to_pil_imag": 265, "to_xml": 265, "wolf_threshold": 265, "m": [265, 273], "jolion": 265, "recognit": 265, "artifici": 265, "multimedia": 265, "pattern": [265, 273], "analysi": 265, "309": 265, "326": 265, "2003": 265, "image_mode_display_map": 265, "image_mode_map": 265, "baseinpaintingtrainingmodul": 266, "cpu": [266, 274], "prepare_batch": 266, "orig": 266, "resize_dim": 266, "concattuplelay": 266, "ffc": 266, "in_channel": 266, "out_channel": 266, "kernel_s": 266, "ratio_gin": 266, "ratio_gout": 266, "bia": 266, "enable_lfu": 266, "padding_typ": 266, "gate": 266, "spectral_kwarg": 266, "convg2g": 266, "convg2l": 266, "convl2g": 266, "convl2l": 266, "global_in_num": 266, "ffcresnetgener": 266, "kind": [266, 273], "input_nc": 266, "output_nc": 266, "ngf": 266, "n_downsampl": 266, "n_block": 266, "norm_lay": 266, "batchnorm2d": 266, "activation_lay": 266, "relu": 266, "up_norm_lay": 266, "up_activ": 266, "init_conv_kwarg": 266, "downsample_conv_kwarg": 266, "resnet_conv_kwarg": 266, "spatial_transform_lay": 266, "spatial_transform_kwarg": 266, "add_out_act": 266, "max_featur": 266, "1024": 266, "out_ffc": 266, "out_ffc_kwarg": 266, "ffcresnetblock": 266, "dim": 266, "inlin": 266, "conv_kwarg": 266, "conv1": 266, "conv2": 266, "ffcse_block": 266, "channel": [266, 273], "ratio_g": 266, "avgpool": 266, "conv_a2g": 266, "conv_a2l": 266, "relu1": 266, "sigmoid": 266, "ffc_bn_act": 266, "ident": [266, 273], "act_g": 266, "act_l": 266, "bn_g": 266, "bn_l": 266, "fourierunit": 266, "spatial_scale_factor": 266, "spatial_scale_mod": 266, "bilinear": 266, "spectral_pos_encod": 266, "use_s": 266, "se_kwarg": 266, "ffc3d": 266, "fft_norm": 266, "ortho": 266, "bn": 266, "conv_lay": 266, "learnablespatialtransformwrapp": 266, "impl": 266, "pad_coef": 266, "angle_init_rang": 266, "train_angl": 266, "inverse_transform": 266, "y_padded_rot": 266, "orig_x": 266, "selay": 266, "reduct": 266, "16": [266, 273], "avg_pool": 266, "fc": 266, "spectraltransform": 266, "fu_kwarg": 266, "fu": 266, "ceil_modulo": 266, "mod": 266, "get_activ": 266, "tanh": 266, "pad_img_to_modulo": 266, "rotate_detector_region": 266, "rotate_tensor": 266, "angle_deg": 266, "batch": [266, 271, 274], "degre": 266, "b": [266, 270, 273], "h": [266, 271, 273], "w": [266, 271, 273], "scale_imag": 266, "cv2": 266, "inter_area": 266, "from_box": 267, "get_height": 267, "intersect": 267, "intersects_horizont": 267, "tolerance_x": 267, "merge_intersect": 267, "line_toler": 267, "merge_rect": 267, "rect1": 267, "rect2": 267, "to_region": 267, "copyop": 270, "lock": [270, 273], "val": 270, "add_descript": 270, "check_free_spac": 270, "copy_and_strip": 270, "verbos": [270, 273], "copy_and_strip_al": 270, "delete_associated_imag": 270, "slide_path": 270, "image_typ": 270, "delete_associated_metadata": 270, "detect_format": 270, "do_strip_in_plac": 270, "file_progress": 270, "generate_unique_id": 270, "get_config_path": 270, "dlgtype": 270, "nativ": [270, 273], "get_csv_messag": 270, "get_dir": 270, "get_dir_": 270, "get_filenam": 270, "get_files_": 270, "get_files_structur": 270, "renam": 270, "get_inplace_dir": 270, "get_inplace_fil": 270, "get_inplace_info": 270, "inplace_info": 270, "parse_csv": 270, "filelist": 270, "parse_fil": 270, "parse_inplace_fil": 270, "remove_phi": 270, "predefined_tag": 270, "append_tag": 270, "macro": 270, "associ": 270, "By": 270, "imagedescript": 270, "A": [270, 273], "addit": [270, 273], "plot": [270, 273], "detail": [270, 273], "remove_tag_sect": 270, "input_str": 270, "resource_path": 270, "relative_path": 270, "absolut": [270, 273], "work": 270, "pyinstal": 270, "test_file_dialog": 270, "track_copy_progress": 270, "calculate_actual_level_height": 271, "level_info": 271, "calculate_actual_level_width": 271, "calculate_max_group_mem_gb": 271, "mem_per_worker_gb": [271, 274], "ram_fract": [271, 274], "overhead_mem_gb": 271, "chunk_list": 271, "lst": [271, 274], "dataframe_to_detect": 271, "detections_df": 271, "detect_tile_level": 271, "folder_path": 271, "detections_to_datafram": 271, "detections_dict": 271, "dir_path": 271, "svs_name": 271, "df2list": 271, "tiles_deid": 271, "stringifi": 271, "estimate_svs_memory_gb": 271, "svs_path": 271, "extract_base_nam": 271, "tile_path": 271, "tile": [271, 273], "png": 271, "jpg": 271, "_l": 271, "digit": [271, 273], "_t": 271, "ext": 271, "extract_svs_name_from_til": 271, "files_path": 271, "find_intersecting_til": 271, "x2": 271, "y2": 271, "find_thumbnail_index": 271, "tif": [271, 274], "thumbnail": [271, 274], "aperio": [271, 273, 274], "convent": [271, 274], "get_existing_extens": 271, "tile_num": 271, "get_svs_info_from_imag": 271, "get_tile_position_and_s": 271, "tile_index": 271, "group_svs_files_by_memori": 271, "svs_file": [271, 274], "max_group_mem_gb": 271, "prepare_thumbnail_deid": 271, "only_thumbnail_deid": 271, "main_fold": 271, "process_fil": 271, "thumbnail_deid": 271, "output_svs_path": 271, "create_new_svs_fil": 271, "redact_phi_in_til": 271, "modifi": 271, "pyramid": 271, "identif": 271, "instruct": 271, "max": 271, "scale_boxes_to_all_level": 271, "setup_log": 271, "input_path": [272, 274], "home": 272, "jose": 272, "notebook": 272, "mskcc": 272, "1620696": 272, "output_path": 272, "tiff": 273, "meta": 273, "bigtiff": 273, "om": 273, "stk": 273, "lsm": 273, "sgi": 273, "nihimag": 273, "imagej": 273, "micromanag": 273, "fluoview": 273, "scanimag": 273, "seq": 273, "gel": 273, "scn": 273, "si": 273, "zif": 273, "qptiff": 273, "ndpi": 273, "geotiff": 273, "author": 273, "christoph": 273, "gohlk": 273, "organ": 273, "laboratori": 273, "fluoresc": 273, "univers": 273, "california": 273, "irvin": 273, "bsd": 273, "claus": 273, "2020": 273, "supplement": 273, "adob": 273, "system": [273, 274], "incorpor": 273, "www": 273, "html": 273, "faq": 273, "awaresystem": 273, "metamorph": 273, "stack": 273, "mdc": 273, "custhelp": 273, "app": 273, "a_id": 273, "18862": 273, "descript": 273, "releas": 273, "zen": 273, "2010": 273, "carl": 273, "zeiss": 273, "microimag": 273, "gmbh": 273, "bioscienc": 273, "2011": 273, "openmicroscopi": 273, "ultraqu": 273, "up": 273, "guid": 273, "ultralum": 273, "20ultralum": 273, "uqstart": 273, "20up": 273, "20guid": 273, "micro": 273, "wiki": 273, "manager_file_format": 273, "loc": 273, "gov": 273, "tiff_tag": 273, "shtml": 273, "2016": 273, "vidriotechnologi": 273, "si2016": 273, "cipa": 273, "dc": 273, "008": 273, "exchang": 273, "still": 273, "camera": 273, "exif": 273, "31": 273, "std": 273, "translat": 273, "zoomabl": 273, "photo": 273, "gdal": 273, "driver": 273, "raster": 273, "gtiff": 273, "tifffileerror": 273, "indic": 273, "structur": 273, "tiffparsererror": 273, "exceed": 273, "filehandl": 273, "rb": 273, "czi": 273, "within": 273, "re": 273, "record": 273, "like": 273, "wb": 273, "concurr": 273, "stream": 273, "untest": 273, "unless": 273, "is_fil": 273, "filno": 273, "memmap_arrai": 273, "dtype": 273, "until": 273, "eof": 273, "reach": 273, "read_arrai": 273, "read_record": 273, "byteord": 273, "read_seg": 273, "bytecount": 273, "buffers": 273, "readinto": 273, "len": 273, "seek": 273, "whenc": 273, "tell": 273, "bytestr": 273, "write_arrai": 273, "write_empti": 273, "filesequ": 273, "fromfil": 273, "axesord": 273, "exclud": 273, "individu": 273, "asarrai": 273, "iowork": 273, "indexerror": 273, "maximum": 273, "thread": 273, "asynchron": 273, "multipli": 273, "significantli": 273, "improv": 273, "runtim": 273, "mani": 273, "writabl": 273, "memmap": 273, "temporari": 273, "lazyconst": 273, "cl": 273, "nullcontext": 273, "null": 273, "context": 273, "openfilecach": 273, "openend": 273, "longer": 273, "necessari": 273, "namespac": 273, "allocationgranular": 273, "axes_label": 273, "big_b": 273, "big_l": 273, "classic_b": 273, "classic_l": 273, "colorresponseunit": 273, "compessor": 273, "cz_lsminfo": 273, "cz_lsminfo_datatyp": 273, "cz_lsminfo_dimens": 273, "cz_lsminfo_read": 273, "cz_lsminfo_scaninfo_arrai": 273, "cz_lsminfo_scaninfo_attribut": 273, "cz_lsminfo_scaninfo_struct": 273, "cz_lsminfo_scantyp": 273, "cz_lsminfo_typeofdata": 273, "datatyp": 273, "data_dtyp": 273, "data_format": 273, "decompessor": 273, "exif_tag": 273, "extrasampl": 273, "fileopen_filt": 273, "filetyp": 273, "file_extens": 273, "file_flag": 273, "fillord": 273, "frame_attr": 273, "geo_cod": 273, "geo_kei": 273, "gps_tag": 273, "grayresponseunit": 273, "group4opt": 273, "iop_tag": 273, "maxwork": 273, "mm_dimens": 273, "mm_header": 273, "ndpi_l": 273, "ndpi_tag": 273, "nih_colortable_typ": 273, "nih_curvefit_typ": 273, "nih_image_head": 273, "nih_lutmode_typ": 273, "nih_units_typ": 273, "ofiletyp": 273, "orient": 273, "pilatus_head": 273, "planarconfig": 273, "predictor": 273, "resunit": 273, "sampleformat": 273, "sample_dtyp": 273, "tag_attribut": 273, "tag_enum": 273, "tag_read": 273, "tag_tupl": 273, "threshhold": 273, "tvips_header_v1": 273, "tvips_header_v2": 273, "uic_tag": 273, "unpredictor": 273, "tifffil": 273, "multifil": 273, "_usefram": 273, "automat": 273, "safe": 273, "tiffpag": 273, "similar": 273, "properti": 273, "tiffpageseri": 273, "is_flag": 273, "certain": 273, "uniform": 273, "nih": 273, "vista": 273, "metaseri": 273, "mdgel": 273, "mediaci": 273, "tvip": 273, "fei": 273, "sem": 273, "andor": 273, "epic": 273, "pilatu": 273, "qpi": 273, "fei_metadata": 273, "sfeg": 273, "helio": 273, "fluoview_metadata": 273, "consolid": 273, "fstat": 273, "statu": 273, "stat_result": 273, "imagej_metadata": 273, "is_mdgel": 273, "md": 273, "is_uniform": 273, "mdgel_metadata": 273, "metaseries_metadata": 273, "micromanager_metadata": 273, "nih_metadata": 273, "nihimagehead": 273, "pilatus_metadata": 273, "scanimage_metadata": 273, "roi": 273, "side": 273, "effect": 273, "after": 273, "might": 273, "tifffram": 273, "shaped_metadata": 273, "sis_metadata": 273, "olympu": 273, "ini": 273, "stk_metadata": 273, "uic": 273, "parent": 273, "keyfram": 273, "lightweight": 273, "ifd": 273, "stripoffset": 273, "stripbytecount": 273, "assum": 273, "intend": 273, "reduc": 273, "speed": 273, "introspect": 273, "aspag": 273, "asrgb": 273, "rgb": 273, "dimens": 273, "code": 273, "plane": 273, "z": 273, "depth": 273, "em": 273, "wavelength": 273, "ex": 273, "phase": 273, "lifetim": 273, "l": 273, "exposur": 273, "v": 273, "event": 273, "q": 273, "unknown": 273, "multidict": 273, "interfac": 273, "tifftag": 273, "look": 273, "dimension": 273, "ij": 273, "imagedepth": 273, "imagelength": 273, "imagewidth": 273, "contig": 273, "bitspersampl": 273, "databytecount": 273, "dataoffset": 273, "description1": 273, "nodata": 273, "rowsperstrip": 273, "4294967295": 273, "softwar": 273, "subfiletyp": 273, "tiledepth": 273, "tilelength": 273, "tilewidth": 273, "andor_tag": 273, "squeez": 273, "reopen": 273, "uint8": 273, "alpha": 273, "dmin": 273, "dmax": 273, "epics_tag": 273, "areadetector": 273, "geotiff_tag": 273, "hash": 273, "checksum": 273, "is_contigu": 273, "contigu": 273, "fill_ord": 273, "is_fin": 273, "swap": 273, "is_imagej": 273, "is_memmapp": 273, "is_ndpi": 273, "is_shap": 273, "ot": 273, "hamamatsu": 273, "subifd": 273, "truncat": 273, "mappabl": 273, "chain": 273, "state": 273, "taghead": 273, "tagoffset": 273, "decim": 273, "One": 273, "variou": 273, "valueoffset": 273, "regular": 273, "although": 273, "slower": 273, "setdefault": 273, "pop": 273, "getal": 273, "view": 273, "items": 273, "lazyattr": 273, "apply_colormap": 273, "asbool": 273, "typeerror": 273, "askopenfilenam": 273, "astyp": 273, "14": 273, "neee": 273, "wom": 273, "byteorder_isn": 273, "bytes2str": 273, "unicod": 273, "cp1252": 273, "through": 273, "clean_whitespac": 273, "compact": 273, "whitespac": 273, "create_output": 273, "suffix": 273, "enumarg": 273, "enumstr": 273, "short": 273, "excel_datetim": 273, "datetim": 273, "excel": 273, "serial": 273, "stamp": 273, "40237": 273, "029999999795": 273, "28": 273, "999982": 273, "fluoview_description_metadata": 273, "ignoresect": 273, "metatata": 273, "unspecifi": 273, "failur": 273, "descr": 273, "intens": 273, "nmap": 273, "ch0": 273, "rang": 273, "00000": 273, "02047": 273, "format_s": 273, "1536": 273, "1234": 273, "12345678901": 273, "gib": 273, "getdtyp": 273, "hexdump": 273, "24": 273, "snipat": 273, "modulo": 273, "ellipsi": 273, "binascii": 273, "unhexlifi": 273, "49492a00080000000e00fe0004000100": 273, "49": 273, "2a": 273, "00": 273, "08": 273, "0e": 273, "fe": 273, "04": 273, "ii": 273, "identityfunc": 273, "imagej_descript": 273, "hyperstack": 273, "loop": 273, "tzcyx": 273, "171": 273, "11a": 273, "510": 273, "slice": 273, "grayscal": 273, "imagej_description_metadata": 273, "nimag": 273, "nhyperstack": 273, "ijmetadata": 273, "oif": 273, "matlabstr2pi": 273, "oiffil": 273, "settingsfil": 273, "overlai": 273, "imagejroi": 273, "frombyt": 273, "roifil": 273, "imagej_metadata_tag": 273, "ijmetadatabytecount": 273, "tiffwrit": 273, "extratag": 273, "follow": 273, "human": 273, "readabl": 273, "doubl": 273, "lower": 273, "upper": 273, "lut": 273, "palett": 273, "undocu": 273, "imagej_shap": 273, "6d": 273, "imshow": 273, "cmap": 273, "vmin": 273, "vmax": 273, "figur": 273, "dpi": 273, "subplot": 273, "maxdim": 273, "isprint": 273, "printabl": 273, "abc": 273, "json_descript": 273, "utf": 273, "yx": 273, "json_description_metadata": 273, "valuerror": 273, "julian_datetim": 273, "juliandai": 273, "milisecond": 273, "dai": 273, "4713": 273, "bc": 273, "midnight": 273, "julian": 273, "2451576": 273, "54362783": 273, "2000": 273, "783": 273, "log_warn": 273, "msg": 273, "lsm2bin": 273, "lsmfile": 273, "binfil": 273, "metaseries_description_metadata": 273, "natural_sort": 273, "f1": 273, "f2": 273, "f10": 273, "nullfunc": 273, "olympusini_metadata": 273, "inistr": 273, "olympussi": 273, "No": 273, "parse_filenam": 273, "parse_kwarg": 273, "keyvalu": 273, "keyval": 273, "delet": 273, "four": 273, "kwargs2": 273, "three": 273, "five": 273, "pformat": 273, "pformat_xml": 273, "xml": 273, "pilatus_description_metadata": 273, "dectri": 273, "camserv": 273, "tvx": 273, "pixel_s": 273, "172e": 273, "000172": 273, "product": 273, "functool": 273, "mul": 273, "integ": 273, "overflow": 273, "274877906944": 273, "read_byt": 273, "fh": 273, "offsets": 273, "read_colormap": 273, "read_cz_lsminfo": 273, "read_cz_sem": 273, "sourceforg": 273, "gwyddion": 273, "mailman": 273, "29275000": 273, "unnam": 273, "read_exif_ifd": 273, "read_fei_metadata": 273, "read_gps_ifd": 273, "gp": 273, "read_interoperability_ifd": 273, "interoper": 273, "read_json": 273, "read_lsm_channelcolor": 273, "channelcolor": 273, "read_lsm_eventlist": 273, "read_lsm_floatpair": 273, "read_lsm_posit": 273, "read_lsm_scaninfo": 273, "scaninfo": 273, "read_lsm_timestamp": 273, "read_metaseries_catalog": 273, "hint": 273, "catalog": 273, "read_micromanager_metadata": 273, "read_mm_head": 273, "read_mm_stamp": 273, "mm_stamp": 273, "read_nih_image_head": 273, "read_numpi": 273, "read_scanimage_metadata": 273, "read_si": 273, "avali": 273, "few": 273, "read_sis_ini": 273, "read_tag": 273, "tagnam": 273, "customtag": 273, "maxifd": 273, "read_tvips_head": 273, "menu": 273, "read_uic1tag": 273, "planecount": 273, "uic1tag": 273, "read_uic2tag": 273, "uic2tag": 273, "read_uic3tag": 273, "uic3tag": 273, "read_uic4tag": 273, "uic4tag": 273, "read_uic_image_properti": 273, "imagepropertyex": 273, "read_uic_tag": 273, "tagid": 273, "read_utf8": 273, "recarray2dict": 273, "recarrai": 273, "reorient": 273, "repeat_nd": 273, "repeat": 273, "reshape_ax": 273, "newshap": 273, "reshape_nd": 273, "data_or_shap": 273, "scanimage_artist_metadata": 273, "artist": 273, "scanimage_description_metadata": 273, "ab": 273, "snipstr": 273, "cut": 273, "abcdefghijklmnop": 273, "op": 273, "squeeze_ax": 273, "stack_pag": 273, "stk_description_metadata": 273, "stripascii": 273, "last": 273, "bit": 273, "ascii": 273, "termin": 273, "x00string": 273, "x01": 273, "x00": 273, "stripnul": 273, "svs_description_metadata": 273, "transpose_ax": 273, "asax": 273, "unpack_rgb": 273, "rescal": 273, "update_kwarg": 273, "validate_jhov": 273, "jhove": 273, "hul": 273, "xml2dict": 273, "sanit": 273, "root": 273, "attr": 273, "level1": 273, "level2": 273, "5322": 273, "yield": 274, "extract_til": 274, "find_thumbnail_pag": 274, "get_mid_level_til": 274, "flat_tiles_fold": 274, "output_fold": 274, "get_optimal_workers_and_batch": 274, "min_batch": 274, "max_batch": 274, "calcul": 274, "worker": 274, "leav": 274, "headroom": 274, "satur": 274, "process_sv": 274, "output_root": 274, "num_work": 274, "svs_to_til": 274, "imageiterabledataset": 275, "spark_df": 275, "lbl": 275, "max_sent_len": 275, "pandasdataset": 275, "target_kei": 275, "get_chunk": 275, "files_": 275, "chunk_siz": 275, "pad_or_cut": 275, "padd_val": 275, "testlightpipelin": 276, "test_binary_input_lp": 276, "overview": 277, "class": 277}, "objects": {"": [[7, 0, 0, "-", "sparkocr"], [276, 0, 0, "-", "test_basic_lp"]], "sparkocr": [[3, 0, 0, "-", "base"], [5, 0, 0, "-", "databricks"], [6, 0, 0, "-", "enums"], [7, 5, 1, "", "info"], [8, 0, 0, "-", "internal"], [7, 4, 1, "", "johnsnowlabs_module"], [7, 5, 1, "", "load_license_validator"], [9, 0, 0, "-", "metrics"], [10, 0, 0, "-", "optimized"], [13, 0, 0, "-", "pretrained"], [7, 5, 1, "", "retry"], [15, 0, 0, "-", "schemas"], [7, 4, 1, "", "spark32"], [7, 4, 1, "", "spark_version"], [7, 5, 1, "", "start"], [17, 0, 0, "-", "tests"], [193, 0, 0, "-", "transformers"], [265, 0, 0, "-", "utils"], [7, 5, 1, "", "version"], [7, 4, 1, "", "with_spark_nlp"], [7, 4, 1, "id0", "with_spark_nlp_jsl"]], "sparkocr.base": [[4, 0, 0, "-", "light_pipelines"]], "sparkocr.base.light_pipelines": [[4, 1, 1, "", "AnnotationTypeInt"], [4, 1, 1, "", "LightPipeline"]], "sparkocr.base.light_pipelines.LightPipeline": [[4, 2, 1, "", "fromBinary"], [4, 2, 1, "", "fromLocalPath"], [4, 2, 1, "", "fromString"], [4, 2, 1, "", "getIgnoreUnsupported"], [4, 3, 1, "", "pipeline_model"], [4, 2, 1, "", "setIgnoreUnsupported"], [4, 2, 1, "", "transform"]], "sparkocr.databricks": [[5, 4, 1, "", "INIT_SCRIPT_PATH"], [5, 4, 1, "", "OCR_MODEL_DIR"], [5, 5, 1, "", "create_init_script_for_tesseract"], [5, 5, 1, "", "display_images"], [5, 5, 1, "", "isRunningInDatabricks"]], "sparkocr.enums": [[6, 1, 1, "", "AdaptiveThresholdingMethod"], [6, 1, 1, "", "AdaptiveThresholdingMode"], [6, 1, 1, "", "CellDetectionAlgos"], [6, 1, 1, "", "Color"], [6, 1, 1, "", "CompressionType"], [6, 1, 1, "", "CropSquareType"], [6, 1, 1, "", "DatasetType"], [6, 1, 1, "", "DetectorOutputFormat"], [6, 1, 1, "", "DicomCompression"], [6, 1, 1, "", "EngineMode"], [6, 1, 1, "", "FontStyle"], [6, 1, 1, "", "ImageType"], [6, 1, 1, "", "KernelShape"], [6, 1, 1, "", "Language"], [6, 1, 1, "", "ModelType"], [6, 1, 1, "", "MorphologyOperationType"], [6, 1, 1, "", "NoiseMethod"], [6, 1, 1, "", "OcrOutputFormat"], [6, 1, 1, "", "PageIteratorLevel"], [6, 1, 1, "", "PageSegmentationMode"], [6, 1, 1, "", "RelationOutputFormat"], [6, 1, 1, "", "SplittingStrategy"], [6, 1, 1, "", "TableOutputFormat"], [6, 1, 1, "", "TextStripperType"], [6, 1, 1, "", "ThresholdingMethod"], [6, 1, 1, "", "TokenizerType"], [6, 1, 1, "", "VisualDocumentProcessorOcrEngines"]], "sparkocr.enums.AdaptiveThresholdingMethod": [[6, 3, 1, "", "GAUSSIAN"], [6, 3, 1, "", "MEAN"], [6, 3, 1, "", "MEDIAN"], [6, 3, 1, "", "SINGH"], [6, 3, 1, "", "WOLF"]], "sparkocr.enums.AdaptiveThresholdingMode": [[6, 3, 1, "", "CONSTANT"], [6, 3, 1, "", "MIRROR"], [6, 3, 1, "", "NEAREST"], [6, 3, 1, "", "REFLECT"], [6, 3, 1, "", "WRAP"]], "sparkocr.enums.CellDetectionAlgos": [[6, 3, 1, "", "CONTOURS"], [6, 3, 1, "", "MORPHOPS"]], "sparkocr.enums.Color": [[6, 3, 1, "", "aliceblue"], [6, 3, 1, "", "antiquewhite"], [6, 3, 1, "", "aqua"], [6, 3, 1, "", "aquamarine"], [6, 3, 1, "", "azure"], [6, 3, 1, "", "beige"], [6, 3, 1, "", "bisque"], [6, 3, 1, "", "black"], [6, 3, 1, "", "blanchedalmond"], [6, 3, 1, "", "blue"], [6, 3, 1, "", "blueviolet"], [6, 3, 1, "", "brown"], [6, 3, 1, "", "burlywood"], [6, 3, 1, "", "cadetblue"], [6, 3, 1, "", "chartreuse"], [6, 3, 1, "", "chocolate"], [6, 3, 1, "", "coral"], [6, 3, 1, "", "cornflowerblue"], [6, 3, 1, "", "cornsilk"], [6, 3, 1, "", "crimson"], [6, 3, 1, "", "cyan"], [6, 3, 1, "", "darkblue"], [6, 3, 1, "", "darkcyan"], [6, 3, 1, "", "darkgoldenrod"], [6, 3, 1, "", "darkgray"], [6, 3, 1, "", "darkgreen"], [6, 3, 1, "", "darkkhaki"], [6, 3, 1, "", "darkmagenta"], [6, 3, 1, "", "darkolivegreen"], [6, 3, 1, "", "darkorange"], [6, 3, 1, "", "darkorchid"], [6, 3, 1, "", "darkred"], [6, 3, 1, "", "darksalmon"], [6, 3, 1, "", "darkseagreen"], [6, 3, 1, "", "darkslateblue"], [6, 3, 1, "", "darkslategray"], [6, 3, 1, "", "darkturquoise"], [6, 3, 1, "", "darkviolet"], [6, 3, 1, "", "deeppink"], [6, 3, 1, "", "deepskyblue"], [6, 3, 1, "", "dimgray"], [6, 3, 1, "", "dodgerblue"], [6, 3, 1, "", "firebrick"], [6, 3, 1, "", "floralwhite"], [6, 3, 1, "", "forestgreen"], [6, 3, 1, "", "fuchsia"], [6, 3, 1, "", "gainsboro"], [6, 3, 1, "", "ghostwhite"], [6, 3, 1, "", "gold"], [6, 3, 1, "", "goldenrod"], [6, 3, 1, "", "gray"], [6, 3, 1, "", "green"], [6, 3, 1, "", "greenyellow"], [6, 3, 1, "", "honeydew"], [6, 3, 1, "", "hotpink"], [6, 3, 1, "", "indianred"], [6, 3, 1, "", "indigo"], [6, 3, 1, "", "ivory"], [6, 3, 1, "", "khaki"], [6, 3, 1, "", "lavender"], [6, 3, 1, "", "lavenderblush"], [6, 3, 1, "", "lawngreen"], [6, 3, 1, "", "lemonchiffon"], [6, 3, 1, "", "lightblue"], [6, 3, 1, "", "lightcoral"], [6, 3, 1, "", "lightcyan"], [6, 3, 1, "", "lightgoldenrodyellow"], [6, 3, 1, "", "lightgreen"], [6, 3, 1, "", "lightgrey"], [6, 3, 1, "", "lightpink"], [6, 3, 1, "", "lightsalmon"], [6, 3, 1, "", "lightseagreen"], [6, 3, 1, "", "lightskyblue"], [6, 3, 1, "", "lightslategray"], [6, 3, 1, "", "lightsteelblue"], [6, 3, 1, "", "lightyellow"], [6, 3, 1, "", "lime"], [6, 3, 1, "", "limegreen"], [6, 3, 1, "", "linen"], [6, 3, 1, "", "magenta"], [6, 3, 1, "", "maroon"], [6, 3, 1, "", "mediumaquamarine"], [6, 3, 1, "", "mediumblue"], [6, 3, 1, "", "mediumorchid"], [6, 3, 1, "", "mediumpurple"], [6, 3, 1, "", "mediumseagreen"], [6, 3, 1, "", "mediumslateblue"], [6, 3, 1, "", "mediumspringgreen"], [6, 3, 1, "", "mediumturquoise"], [6, 3, 1, "", "mediumvioletred"], [6, 3, 1, "", "midnightblue"], [6, 3, 1, "", "mintcream"], [6, 3, 1, "", "mistyrose"], [6, 3, 1, "", "moccasin"], [6, 3, 1, "", "navajowhite"], [6, 3, 1, "", "navy"], [6, 3, 1, "", "oldlace"], [6, 3, 1, "", "olive"], [6, 3, 1, "", "olivedrab"], [6, 3, 1, "", "orange"], [6, 3, 1, "", "orangered"], [6, 3, 1, "", "orchid"], [6, 3, 1, "", "palegoldenrod"], [6, 3, 1, "", "palegreen"], [6, 3, 1, "", "paleturquoise"], [6, 3, 1, "", "palevioletred"], [6, 3, 1, "", "papayawhip"], [6, 3, 1, "", "peachpuff"], [6, 3, 1, "", "peru"], [6, 3, 1, "", "pink"], [6, 3, 1, "", "plum"], [6, 3, 1, "", "powderblue"], [6, 3, 1, "", "purple"], [6, 3, 1, "", "red"], [6, 3, 1, "", "rosybrown"], [6, 3, 1, "", "royalblue"], [6, 3, 1, "", "saddlebrown"], [6, 3, 1, "", "salmon"], [6, 3, 1, "", "sandybrown"], [6, 3, 1, "", "seagreen"], [6, 3, 1, "", "seashell"], [6, 3, 1, "", "sienna"], [6, 3, 1, "", "silver"], [6, 3, 1, "", "skyblue"], [6, 3, 1, "", "slateblue"], [6, 3, 1, "", "slategray"], [6, 3, 1, "", "snow"], [6, 3, 1, "", "springgreen"], [6, 3, 1, "", "steelblue"], [6, 3, 1, "", "tan"], [6, 3, 1, "", "teal"], [6, 3, 1, "", "thistle"], [6, 3, 1, "", "tomato"], [6, 3, 1, "", "turquoise"], [6, 3, 1, "", "violet"], [6, 3, 1, "", "wheat"], [6, 3, 1, "", "white"], [6, 3, 1, "", "whitesmoke"], [6, 3, 1, "", "yellow"], [6, 3, 1, "", "yellowgreen"]], "sparkocr.enums.CompressionType": [[6, 3, 1, "", "JPEG"], [6, 3, 1, "", "LOSSLESS"]], "sparkocr.enums.CropSquareType": [[6, 3, 1, "", "BOTTOM_CENTER"], [6, 3, 1, "", "BOTTOM_LEFT"], [6, 3, 1, "", "BOTTOM_RIGHT"], [6, 3, 1, "", "CENTER"], [6, 3, 1, "", "CENTER_LEFT"], [6, 3, 1, "", "CENTER_RIGHT"], [6, 3, 1, "", "TOP_CENTER"], [6, 3, 1, "", "TOP_LEFT"], [6, 3, 1, "", "TOP_RIGHT"]], "sparkocr.enums.DatasetType": [[6, 3, 1, "", "BASIC"], [6, 3, 1, "", "ITERABLE"]], "sparkocr.enums.DetectorOutputFormat": [[6, 3, 1, "", "HOCR"], [6, 3, 1, "", "REGIONS"]], "sparkocr.enums.DicomCompression": [[6, 3, 1, "", "JPEGBaseline8Bit"], [6, 3, 1, "", "JPEGLSLossless"], [6, 3, 1, "", "RLELossless"]], "sparkocr.enums.EngineMode": [[6, 3, 1, "", "DEFAULT"], [6, 3, 1, "", "LSTM_ONLY"], [6, 3, 1, "", "TESSERACT_LSTM_COMBINED"], [6, 3, 1, "", "TESSERACT_ONLY"]], "sparkocr.enums.FontStyle": [[6, 3, 1, "", "AUTO"], [6, 3, 1, "", "BOLD"], [6, 3, 1, "", "PLAIN"]], "sparkocr.enums.ImageType": [[6, 3, 1, "", "TYPE_3BYTE_BGR"], [6, 3, 1, "", "TYPE_4BYTE_ABGR"], [6, 3, 1, "", "TYPE_BYTE_BINARY"], [6, 3, 1, "", "TYPE_BYTE_GRAY"], [6, 3, 1, "", "TYPE_JPEG"], [6, 3, 1, "", "TYPE_USHORT_GRAY"]], "sparkocr.enums.KernelShape": [[6, 3, 1, "", "DIAMOND"], [6, 3, 1, "", "DISK"], [6, 3, 1, "", "OCTAGON"], [6, 3, 1, "", "OCTAHEDRON"], [6, 3, 1, "", "SQUARE"], [6, 3, 1, "", "STAR"]], "sparkocr.enums.Language": [[6, 3, 1, "", "ARA"], [6, 3, 1, "", "CHI"], [6, 3, 1, "", "DAN"], [6, 3, 1, "", "DEU"], [6, 3, 1, "", "ENG"], [6, 3, 1, "", "FRA"], [6, 3, 1, "", "ITA"], [6, 3, 1, "", "KOR"], [6, 3, 1, "", "RUS"], [6, 3, 1, "", "SPA"], [6, 3, 1, "", "TUR"], [6, 3, 1, "", "VIE"]], "sparkocr.enums.ModelType": [[6, 3, 1, "", "BASE"], [6, 3, 1, "", "BEST"], [6, 3, 1, "", "FAST"]], "sparkocr.enums.MorphologyOperationType": [[6, 3, 1, "", "CLOSING"], [6, 3, 1, "", "DILATION"], [6, 3, 1, "", "EROSION"], [6, 3, 1, "", "OPENING"]], "sparkocr.enums.NoiseMethod": [[6, 3, 1, "", "RATIO"], [6, 3, 1, "", "VARIANCE"]], "sparkocr.enums.OcrOutputFormat": [[6, 3, 1, "", "FORMATTED_TEXT"], [6, 3, 1, "", "HOCR"], [6, 3, 1, "", "JSON"], [6, 3, 1, "", "TEXT"], [6, 3, 1, "", "TEXT_WITH_POSITIONS"]], "sparkocr.enums.PageIteratorLevel": [[6, 3, 1, "", "BLOCK"], [6, 3, 1, "", "PARAGRAPH"], [6, 3, 1, "", "SYMBOL"], [6, 3, 1, "", "TEXTLINE"], [6, 3, 1, "", "WORD"]], "sparkocr.enums.PageSegmentationMode": [[6, 3, 1, "", "AUTO"], [6, 3, 1, "", "AUTO_ONLY"], [6, 3, 1, "", "AUTO_OSD"], [6, 3, 1, "", "CIRCLE_WORD"], [6, 3, 1, "", "OSD_ONLY"], [6, 3, 1, "", "SINGLE_BLOCK"], [6, 3, 1, "", "SINGLE_BLOCK_VERT_TEXT"], [6, 3, 1, "", "SINGLE_CHAR"], [6, 3, 1, "", "SINGLE_COLUMN"], [6, 3, 1, "", "SINGLE_LINE"], [6, 3, 1, "", "SINGLE_WORD"], [6, 3, 1, "", "SPARSE_TEXT"], [6, 3, 1, "", "SPARSE_TEXT_OSD"]], "sparkocr.enums.RelationOutputFormat": [[6, 3, 1, "", "ANNOTATIONS"], [6, 3, 1, "", "JSON"]], "sparkocr.enums.SplittingStrategy": [[6, 3, 1, "", "FIXED_NUMBER_OF_PARTITIONS"], [6, 3, 1, "", "FIXED_SIZE_OF_PARTITION"]], "sparkocr.enums.TableOutputFormat": [[6, 3, 1, "", "CSV"], [6, 3, 1, "", "TABLE"]], "sparkocr.enums.TextStripperType": [[6, 3, 1, "", "PDF_LAYOUT_TEXT_STRIPPER"], [6, 3, 1, "", "PDF_TEXT_STRIPPER"]], "sparkocr.enums.ThresholdingMethod": [[6, 3, 1, "", "GAUSSIAN"], [6, 3, 1, "", "OTSU"], [6, 3, 1, "", "SAUVOLA"]], "sparkocr.enums.TokenizerType": [[6, 3, 1, "", "BASIC"], [6, 3, 1, "", "SIMPLE"]], "sparkocr.enums.VisualDocumentProcessorOcrEngines": [[6, 3, 1, "", "EASYOCR"], [6, 3, 1, "", "OCRMAC"], [6, 3, 1, "", "RAPIDOCR"], [6, 3, 1, "", "TESSERACT"], [6, 3, 1, "", "TESSERACTCLI"]], "sparkocr.metrics": [[9, 1, 1, "", "OcrMetrics"], [9, 5, 1, "", "score"]], "sparkocr.metrics.OcrMetrics": [[9, 2, 1, "", "levenshtein_distance"], [9, 2, 1, "", "score"]], "sparkocr.pretrained": [[11, 0, 0, "-", "anonymization_pipeline_builder"], [12, 0, 0, "-", "dicom_pretrained_pipeline"], [14, 0, 0, "-", "pretrained_pipeline"]], "sparkocr.pretrained.anonymization_pipeline_builder": [[11, 1, 1, "", "AnonymizationPipelineBuilder"], [11, 4, 1, "", "logger"]], "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder": [[11, 2, 1, "", "build"], [11, 2, 1, "", "build_deidentification_branch"], [11, 2, 1, "", "build_dicom_branch"], [11, 2, 1, "", "build_memory_branch"], [11, 2, 1, "", "build_obfuscation_branch"], [11, 2, 1, "", "check_pretrained_pipeline"], [11, 3, 1, "", "default_matcher_threshold"], [11, 3, 1, "", "finalizer"], [11, 2, 1, "", "get_config"], [11, 2, 1, "", "get_matcher_entities"], [11, 2, 1, "", "get_names_from_uid"], [11, 3, 1, "", "hc_pipeline"], [11, 3, 1, "", "individual_stage_settings"], [11, 3, 1, "", "input_type"], [11, 3, 1, "", "keep_memory"], [11, 3, 1, "", "language"], [11, 3, 1, "", "matcher_dict"], [11, 2, 1, "", "nlp_builder"], [11, 3, 1, "", "ocr"], [11, 2, 1, "", "post_nlp_stages"], [11, 2, 1, "", "pre_nlp_stages"], [11, 3, 1, "", "remote_loc"], [11, 2, 1, "", "reset_config"], [11, 2, 1, "", "show_config"], [11, 3, 1, "", "stage_config"], [11, 3, 1, "", "task"], [11, 2, 1, "", "update_config"], [11, 3, 1, "", "use_gpu"], [11, 2, 1, "", "validate_matchers"]], "sparkocr.pretrained.dicom_pretrained_pipeline": [[12, 1, 1, "", "DicomPretrainedPipeline"]], "sparkocr.pretrained.dicom_pretrained_pipeline.DicomPretrainedPipeline": [[12, 3, 1, "", "dicom_to_image_pipe"], [12, 3, 1, "", "draw_regions_pipe"], [12, 3, 1, "", "iterable_stages"], [12, 3, 1, "", "region_col"], [12, 2, 1, "", "transform"]], "sparkocr.pretrained.pretrained_pipeline": [[14, 1, 1, "", "PretrainedPipeline"]], "sparkocr.pretrained.pretrained_pipeline.PretrainedPipeline": [[14, 2, 1, "", "fromLocalPath"], [14, 2, 1, "", "from_disk"], [14, 2, 1, "", "supports_lp"], [14, 2, 1, "", "transform"]], "sparkocr.schemas": [[15, 1, 1, "", "AnswersOutput"], [15, 1, 1, "", "Base64File"], [15, 4, 1, "", "BinaryFields"], [15, 1, 1, "", "BinaryFile"], [15, 4, 1, "", "BinarySchema"], [15, 1, 1, "", "Coordinate"], [15, 4, 1, "", "CoordinateFields"], [15, 4, 1, "", "CoordinateSchema"], [15, 1, 1, "", "Height"], [15, 1, 1, "", "Image"], [15, 4, 1, "", "ImageFields"], [15, 1, 1, "", "ImageOutput"], [15, 4, 1, "", "ImageSchema"], [15, 1, 1, "", "LightPipelineException"], [15, 1, 1, "", "PageNum"], [15, 1, 1, "", "PositionsOutput"], [15, 1, 1, "", "Width"], [15, 4, 1, "", "mappingSchema"], [15, 4, 1, "", "pageMatrixSchema"], [15, 4, 1, "", "tableContainerSchema"], [15, 4, 1, "", "textChunkCoordinateType"]], "sparkocr.schemas.AnswersOutput": [[15, 3, 1, "", "questions_and_answers"]], "sparkocr.schemas.Base64File": [[15, 3, 1, "", "desc"]], "sparkocr.schemas.BinaryFile": [[15, 3, 1, "", "desc"]], "sparkocr.schemas.Coordinate": [[15, 3, 1, "", "angle"], [15, 3, 1, "", "height"], [15, 3, 1, "", "index"], [15, 3, 1, "", "label"], [15, 2, 1, "", "merge"], [15, 3, 1, "", "page"], [15, 3, 1, "", "score"], [15, 3, 1, "", "text"], [15, 3, 1, "", "width"], [15, 3, 1, "", "x"], [15, 3, 1, "", "y"]], "sparkocr.schemas.Height": [[15, 3, 1, "", "value"]], "sparkocr.schemas.Image": [[15, 3, 1, "", "data"], [15, 3, 1, "", "height"], [15, 3, 1, "", "mode"], [15, 3, 1, "", "nChannels"], [15, 3, 1, "", "origin"], [15, 3, 1, "", "resolution"], [15, 3, 1, "", "width"]], "sparkocr.schemas.ImageOutput": [[15, 3, 1, "", "exception"], [15, 3, 1, "", "path"]], "sparkocr.schemas.LightPipelineException": [[15, 3, 1, "", "message"]], "sparkocr.schemas.PageNum": [[15, 3, 1, "", "value"]], "sparkocr.schemas.PositionsOutput": [[15, 3, 1, "", "mappings"]], "sparkocr.schemas.Width": [[15, 3, 1, "", "value"]], "sparkocr.tests": [[16, 0, 0, "-", "conftest"], [21, 0, 0, "-", "ocr"]], "sparkocr.tests.conftest": [[16, 5, 1, "", "all_dicoms_df"], [16, 5, 1, "", "dicom_image_df"], [16, 5, 1, "", "dicom_image_with_metadata_df"], [16, 5, 1, "", "dicom_pdf_df"], [16, 5, 1, "", "dicom_single_image_df"], [16, 5, 1, "", "digital_pdf_df"], [16, 5, 1, "", "doc_text_multipage_df"], [16, 5, 1, "", "form1_expected_output"], [16, 5, 1, "", "form_df"], [16, 5, 1, "", "genomic_json"], [16, 5, 1, "", "hocr_table_df"], [16, 5, 1, "", "html_df"], [16, 5, 1, "", "htr_span_fake_model"], [16, 5, 1, "", "image_brand_df"], [16, 5, 1, "", "image_cells_header_df"], [16, 5, 1, "", "image_check_df"], [16, 5, 1, "", "image_check_full_df"], [16, 5, 1, "", "image_check_hocr"], [16, 5, 1, "", "image_checkbox_document_df"], [16, 5, 1, "", "image_cropped_df"], [16, 5, 1, "", "image_df"], [16, 5, 1, "", "image_df_draw"], [16, 5, 1, "", "image_df_keeplayout"], [16, 5, 1, "", "image_handwritten_text_df"], [16, 5, 1, "", "image_kor_df"], [16, 5, 1, "", "image_multi_dicom_df"], [16, 5, 1, "", "image_noised_df"], [16, 5, 1, "", "image_noised_text"], [16, 5, 1, "", "image_signature_df"], [16, 5, 1, "", "image_table_cells_document_df"], [16, 5, 1, "", "image_table_cells_testdocument_df"], [16, 5, 1, "", "image_table_df"], [16, 5, 1, "", "image_table_document_corrected_df"], [16, 5, 1, "", "image_table_document_df"], [16, 5, 1, "", "image_table_hocr_cells_img_df"], [16, 5, 1, "", "image_text_lines_df"], [16, 5, 1, "", "pdf_df"], [16, 5, 1, "", "pdf_fonts_df"], [16, 5, 1, "", "pdf_genomic_df"], [16, 5, 1, "", "pdf_rotated_df"], [16, 5, 1, "", "pdf_rotated_text"], [16, 5, 1, "", "pdf_table_hocr_df"], [16, 5, 1, "", "pdf_table_hocr_nonascii_df"], [16, 5, 1, "", "pdf_table_image_df"], [16, 5, 1, "", "pdf_text_multipage_df"], [16, 5, 1, "", "pdf_text_tables_df"], [16, 5, 1, "", "pdf_with_acro_form_df"], [16, 5, 1, "", "pdf_with_xfa_form_df"], [16, 5, 1, "", "ppt_table_df"], [16, 5, 1, "", "ppt_text_multipage_df"], [16, 5, 1, "", "pptx_table_df"], [16, 5, 1, "", "pptx_text_multipage_df"], [16, 5, 1, "", "raw_image_df"], [16, 5, 1, "", "raw_jpeg2k_df"], [16, 5, 1, "", "raw_png_df"], [16, 5, 1, "", "raw_tiff_df"], [16, 5, 1, "", "regions_merger_df"], [16, 5, 1, "", "torch_fake_model"], [16, 5, 1, "", "updated_text_multipage_df"], [16, 5, 1, "", "visual_document_classifier_lilt_df"], [16, 5, 1, "", "visual_document_classifier_v2_df"], [16, 5, 1, "", "visual_document_classifier_v3_df"], [16, 5, 1, "", "visual_document_df"], [16, 5, 1, "", "visual_document_ner_df"], [16, 5, 1, "", "visual_document_ner_v2_df"], [16, 5, 1, "", "visual_document_ner_v2_train_df"], [16, 5, 1, "", "visual_qa_df"]], "sparkocr.tests.ocr": [[20, 0, 0, "-", "eval"], [22, 0, 0, "-", "pipelines"], [24, 0, 0, "-", "test_start"], [47, 0, 0, "-", "transformers"], [121, 0, 0, "-", "utils"]], "sparkocr.tests.ocr.eval": [[19, 0, 0, "-", "icdar"]], "sparkocr.tests.ocr.eval.icdar": [[18, 0, 0, "-", "icdar_table_extractor"]], "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor": [[18, 1, 1, "", "IcdarTableExtractor"]], "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor": [[18, 2, 1, "", "clear"], [18, 2, 1, "", "copy"], [18, 2, 1, "", "explainParam"], [18, 2, 1, "", "explainParams"], [18, 2, 1, "", "extractParamMap"], [18, 2, 1, "", "getInputCol"], [18, 2, 1, "", "getOrDefault"], [18, 2, 1, "", "getOutputCol"], [18, 2, 1, "", "getParam"], [18, 3, 1, "", "groundTruthPath"], [18, 2, 1, "", "hasDefault"], [18, 2, 1, "", "hasParam"], [18, 3, 1, "", "inputCol"], [18, 2, 1, "", "isDefined"], [18, 2, 1, "", "isSet"], [18, 3, 1, "", "name"], [18, 3, 1, "", "outputCol"], [18, 2, 1, "", "set"], [18, 2, 1, "", "setGroundTruthPath"], [18, 2, 1, "", "setInputCol"], [18, 2, 1, "", "setOutputCol"], [18, 2, 1, "", "transform"], [18, 3, 1, "", "uid"]], "sparkocr.tests.ocr.pipelines": [[23, 0, 0, "-", "test_pdf"]], "sparkocr.tests.ocr.pipelines.test_pdf": [[23, 1, 1, "", "TestPdfOcrPipeline"]], "sparkocr.tests.ocr.pipelines.test_pdf.TestPdfOcrPipeline": [[23, 3, 1, "", "PIPELINE_PATH"], [23, 2, 1, "", "get_pipeline"], [23, 2, 1, "", "teardown_method"], [23, 2, 1, "", "test_ocr_with_skew_correction"], [23, 2, 1, "", "test_saving_and_loading_pipeline"]], "sparkocr.tests.ocr.test_start": [[24, 1, 1, "", "TestStart"]], "sparkocr.tests.ocr.test_start.TestStart": [[24, 3, 1, "", "LIB_PATH"], [24, 2, 1, "", "test_start"]], "sparkocr.tests.ocr.transformers": [[25, 0, 0, "-", "annotators"], [28, 0, 0, "-", "detectors"], [35, 0, 0, "-", "dicom"], [45, 0, 0, "-", "embeddings"], [48, 0, 0, "-", "inpainting"], [50, 0, 0, "-", "ner"], [56, 0, 0, "-", "readers"], [58, 0, 0, "-", "recognizers"], [61, 0, 0, "-", "test_binary_to_image"], [62, 0, 0, "-", "test_datasetreader"], [63, 0, 0, "-", "test_dicom_metadata_obfuscator"], [64, 0, 0, "-", "test_dicom_to_image"], [65, 0, 0, "-", "test_display_table"], [66, 0, 0, "-", "test_doc_to_pdf"], [67, 0, 0, "-", "test_doc_to_text"], [68, 0, 0, "-", "test_doc_to_text_table"], [69, 0, 0, "-", "test_foundationone_parser"], [70, 0, 0, "-", "test_hocr_merger"], [71, 0, 0, "-", "test_hocr_to_image"], [72, 0, 0, "-", "test_hocr_to_text_table"], [73, 0, 0, "-", "test_image_adaptive_binarizer"], [74, 0, 0, "-", "test_image_adaptive_thresholding"], [75, 0, 0, "-", "test_image_binarizer"], [76, 0, 0, "-", "test_image_brands_ocr"], [77, 0, 0, "-", "test_image_cells_to_text_table"], [78, 0, 0, "-", "test_image_cropper"], [79, 0, 0, "-", "test_image_draw_annotations"], [80, 0, 0, "-", "test_image_draw_regions"], [81, 0, 0, "-", "test_image_erosion"], [82, 0, 0, "-", "test_image_gpu_transform"], [83, 0, 0, "-", "test_image_handwritten_text_recognizer"], [84, 0, 0, "-", "test_image_layout_analyzer"], [85, 0, 0, "-", "test_image_morphology_operation"], [86, 0, 0, "-", "test_image_noise_scorer"], [87, 0, 0, "-", "test_image_regions_merger"], [88, 0, 0, "-", "test_image_remove_objects"], [89, 0, 0, "-", "test_image_signature_detector"], [90, 0, 0, "-", "test_image_skew_corrector"], [91, 0, 0, "-", "test_image_split_regions"], [92, 0, 0, "-", "test_image_table_cells_detector"], [93, 0, 0, "-", "test_image_table_detector"], [94, 0, 0, "-", "test_image_text_cleaner"], [95, 0, 0, "-", "test_image_to_dicom"], [96, 0, 0, "-", "test_image_to_hocr"], [97, 0, 0, "-", "test_image_to_pdf"], [98, 0, 0, "-", "test_image_to_text"], [99, 0, 0, "-", "test_image_transformer"], [100, 0, 0, "-", "test_ner_output_cleaner"], [101, 0, 0, "-", "test_ocr_resource_downloader"], [102, 0, 0, "-", "test_pdf_assembler"], [103, 0, 0, "-", "test_pdf_draw_regions"], [104, 0, 0, "-", "test_pdf_to_form"], [105, 0, 0, "-", "test_pdf_to_hocr"], [106, 0, 0, "-", "test_pdf_to_image"], [107, 0, 0, "-", "test_pdf_to_text"], [108, 0, 0, "-", "test_pdf_to_text_table"], [109, 0, 0, "-", "test_position_finder"], [110, 0, 0, "-", "test_ppt_to_pdf"], [111, 0, 0, "-", "test_ppt_to_text_table"], [112, 0, 0, "-", "test_text_to_pdf"], [113, 0, 0, "-", "test_update_text_position"], [114, 0, 0, "-", "test_visual_document_classifier"], [115, 0, 0, "-", "test_visual_document_classifier_lilt"], [116, 0, 0, "-", "test_visual_document_classifier_v3"], [117, 0, 0, "-", "test_visual_document_processor"], [118, 0, 0, "-", "test_visual_question_answering"], [119, 0, 0, "-", "tokenizer"]], "sparkocr.tests.ocr.transformers.annotators": [[26, 0, 0, "-", "test_form_relation_extractor"], [27, 0, 0, "-", "test_geo_relation_extractor"]], "sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor": [[26, 1, 1, "", "TestFormRelationExtraction"]], "sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor.TestFormRelationExtraction": [[26, 3, 1, "", "distanceThreshold"], [26, 2, 1, "", "test_new_form_relation_logic"]], "sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor": [[27, 1, 1, "", "TestVisualDocumentNerGeo"]], "sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor.TestVisualDocumentNerGeo": [[27, 2, 1, "", "test_inference"]], "sparkocr.tests.ocr.transformers.detectors": [[29, 0, 0, "-", "test_image_checkbox_detector"], [30, 0, 0, "-", "test_image_document_region_detector"], [31, 0, 0, "-", "test_image_layout_analyzer_dit"], [32, 0, 0, "-", "test_image_text_detector"], [33, 0, 0, "-", "test_image_text_detector_craft"], [34, 0, 0, "-", "test_image_text_detector_v2"]], "sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector": [[29, 1, 1, "", "TestImageCheckboxDetector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector.TestImageCheckboxDetector": [[29, 2, 1, "", "test_image_checkbox_detector_pretrained"]], "sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector": [[30, 1, 1, "", "TestImageDocumentRegionDetector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector.TestImageDocumentRegionDetector": [[30, 2, 1, "", "test_image_region_detector_pretrained"]], "sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit": [[31, 1, 1, "", "TestDocumentLayoutAnalyzer"]], "sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit.TestDocumentLayoutAnalyzer": [[31, 2, 1, "", "test_image_layout_analyzer"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector": [[32, 1, 1, "", "TestImageTextDetector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector.TestImageTextDetector": [[32, 2, 1, "", "test_image_text_detector_craft"], [32, 2, 1, "", "test_image_text_detector_dit"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft": [[33, 1, 1, "", "TestImageTextDetectorCraft"], [33, 4, 1, "", "tmpModelFolder"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft.TestImageTextDetectorCraft": [[33, 2, 1, "", "test_image_text_detector"], [33, 2, 1, "", "test_loading_from_disk"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2": [[34, 1, 1, "", "TestImageTextDetectorV2"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2.TestImageTextDetectorV2": [[34, 2, 1, "", "test_image_text_detector"], [34, 2, 1, "", "test_image_text_detector_pandas"], [34, 2, 1, "", "test_load_model"]], "sparkocr.tests.ocr.transformers.dicom": [[36, 0, 0, "-", "test_dicom_deidentifier"], [37, 0, 0, "-", "test_dicom_draw_regions"], [38, 0, 0, "-", "test_dicom_metadata_deidentifier"], [39, 0, 0, "-", "test_dicom_splitter"], [40, 0, 0, "-", "test_dicom_to_image_v2"], [41, 0, 0, "-", "test_dicom_to_image_v3"], [42, 0, 0, "-", "test_dicom_to_metadata"], [43, 0, 0, "-", "test_dicom_to_pdf"], [44, 0, 0, "-", "test_dicom_update_pdf"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier": [[36, 1, 1, "", "TestDicomDeidentifier"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier.TestDicomDeidentifier": [[36, 2, 1, "", "test_dicom_deidentifier"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions": [[37, 1, 1, "", "TestDicomDrawRegions"], [37, 5, 1, "", "get_draw_regions"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions": [[37, 2, 1, "", "test_DrawRegions"], [37, 2, 1, "", "test_format_exception_from_traceback"], [37, 2, 1, "", "test_jpeg_12_bit_compression"], [37, 2, 1, "", "test_reject_badVR"], [37, 2, 1, "", "test_reject_dicom_with_no_pixel_data"], [37, 2, 1, "", "test_rle_reject_ybr_full_422"], [37, 2, 1, "", "test_ybr_full_422_8Bit_compression"], [37, 2, 1, "", "test_ybr_full_422_no_compression"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier": [[38, 1, 1, "", "TestDicomMetadataDeidentifier"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier": [[38, 3, 1, "", "last_names_file"], [38, 3, 1, "", "names_file"], [38, 2, 1, "", "test_CustomCsvFile"], [38, 2, 1, "", "test_MetadataDeidentifier"], [38, 2, 1, "", "test_UID_Obfuscator"], [38, 2, 1, "", "test_dicom_basic_obfuscator"], [38, 2, 1, "", "test_remove_all_private_tags"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter": [[39, 1, 1, "", "TestDicomSplitter"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter.TestDicomSplitter": [[39, 2, 1, "", "test_fixed_number_partition"], [39, 2, 1, "", "test_fixed_size_partition"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2": [[40, 1, 1, "", "TestDicomToImageV2"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2.TestDicomToImageV2": [[40, 2, 1, "", "test_dicom_to_image"], [40, 2, 1, "", "test_dicom_to_image_with_splitter"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3": [[41, 1, 1, "", "TestDicomToImageV3"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3.TestDicomToImageV3": [[41, 2, 1, "", "test_dicom_to_image"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata": [[42, 1, 1, "", "TestDicomToMetadata"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata.TestDicomToMetadata": [[42, 2, 1, "", "test_dicom_to_metadata"], [42, 2, 1, "", "test_dicom_to_metadata_s3"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf": [[43, 1, 1, "", "TestDicomToPdf"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf.TestDicomToPdf": [[43, 2, 1, "", "test_dicom_to_pdf"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf": [[44, 1, 1, "", "TestDicomUpdatePdf"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf.TestDicomUpdatePdf": [[44, 2, 1, "", "test_dicom_update_pdf"]], "sparkocr.tests.ocr.transformers.embeddings": [[46, 0, 0, "-", "test_vit_image_embeddings"]], "sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings": [[46, 1, 1, "", "TestVitImageEmbeddings"]], "sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings.TestVitImageEmbeddings": [[46, 2, 1, "", "test_vit_image_embeddings"]], "sparkocr.tests.ocr.transformers.inpainting": [[49, 0, 0, "-", "test_image_inpainting"]], "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting": [[49, 1, 1, "", "TestImageInpainting"]], "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting.TestImageInpainting": [[49, 2, 1, "", "test_model_io_operation"], [49, 2, 1, "", "test_pretrained_io_operation"], [49, 2, 1, "", "test_with_regions"]], "sparkocr.tests.ocr.transformers.ner": [[51, 0, 0, "-", "test_hocr_to_features"], [52, 0, 0, "-", "test_visual_document_ner"], [53, 0, 0, "-", "test_visual_document_ner_geo"], [54, 0, 0, "-", "test_visual_document_ner_layoutlm_v1"], [55, 0, 0, "-", "test_visual_document_ner_lilt"]], "sparkocr.tests.ocr.transformers.ner.test_hocr_to_features": [[51, 1, 1, "", "TestHocrToFeatures"]], "sparkocr.tests.ocr.transformers.ner.test_hocr_to_features.TestHocrToFeatures": [[51, 2, 1, "", "test_inference"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner": [[52, 1, 1, "", "TestVisualDocumentNer"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner.TestVisualDocumentNer": [[52, 2, 1, "", "test_visual_document_ner"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo": [[53, 1, 1, "", "TestVisualDocumentNerGeo"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo.TestVisualDocumentNerGeo": [[53, 2, 1, "", "test_inference"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1": [[54, 1, 1, "", "TestVisualDocumentNer"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1.TestVisualDocumentNer": [[54, 2, 1, "", "test_visual_document_ner"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt": [[55, 1, 1, "", "TestVisualDocumentNerLilt"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt.TestVisualDocumentNerLilt": [[55, 2, 1, "", "test_visual_document_ner_lilt_inference"], [55, 2, 1, "", "test_visual_document_ner_lilt_train"], [55, 2, 1, "", "visual_document_ner_lilt_from_datasets"]], "sparkocr.tests.ocr.transformers.readers": [[57, 0, 0, "-", "test_alab_readers"]], "sparkocr.tests.ocr.transformers.readers.test_alab_readers": [[57, 1, 1, "", "TestAlabReaders"]], "sparkocr.tests.ocr.transformers.readers.test_alab_readers.TestAlabReaders": [[57, 2, 1, "", "test_json_reader_v1"]], "sparkocr.tests.ocr.transformers.recognizers": [[59, 0, 0, "-", "test_image_to_text_v2"], [60, 0, 0, "-", "test_image_to_text_v3"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2": [[59, 1, 1, "", "TestImageToTextV2"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2.TestImageToTextV2": [[59, 2, 1, "", "test_batch_image_to_formatted_text"], [59, 2, 1, "", "test_batch_image_to_hocr"], [59, 2, 1, "", "test_image_to_text"], [59, 2, 1, "", "test_load_models"], [59, 2, 1, "", "test_regions_with_confidence"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3": [[60, 1, 1, "", "TestImageToTextV3"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3.TestImageToTextV3": [[60, 2, 1, "", "test_image_text_detector"]], "sparkocr.tests.ocr.transformers.test_binary_to_image": [[61, 1, 1, "", "TestBinaryToImage"]], "sparkocr.tests.ocr.transformers.test_binary_to_image.TestBinaryToImage": [[61, 2, 1, "", "test_binary_to_image"], [61, 2, 1, "", "test_binary_to_jpeg2k_image"], [61, 2, 1, "", "test_binary_to_tiff_image"]], "sparkocr.tests.ocr.transformers.test_datasetreader": [[62, 1, 1, "", "TestDatasetReader"]], "sparkocr.tests.ocr.transformers.test_datasetreader.TestDatasetReader": [[62, 2, 1, "", "test_load_dataset"], [62, 2, 1, "", "test_load_preprocessed_dataset"]], "sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator": [[63, 1, 1, "", "TestDicomMetadataObfuscator"]], "sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator.TestDicomMetadataObfuscator": [[63, 2, 1, "", "test_dicom_basic_obfuscator"]], "sparkocr.tests.ocr.transformers.test_dicom_to_image": [[64, 1, 1, "", "TestDicomToImage"]], "sparkocr.tests.ocr.transformers.test_dicom_to_image.TestDicomToImage": [[64, 2, 1, "", "test_deidentified_metadata_dicom_to_image"], [64, 2, 1, "", "test_dicom_to_image"], [64, 2, 1, "", "test_metadata_dicom_to_image"]], "sparkocr.tests.ocr.transformers.test_display_table": [[65, 1, 1, "", "TestDisplayTables"]], "sparkocr.tests.ocr.transformers.test_display_table.TestDisplayTables": [[65, 2, 1, "", "test_display"], [65, 2, 1, "", "test_display_empty"]], "sparkocr.tests.ocr.transformers.test_doc_to_pdf": [[66, 1, 1, "", "TestDocToPdf"]], "sparkocr.tests.ocr.transformers.test_doc_to_pdf.TestDocToPdf": [[66, 2, 1, "", "test_without_split_by_page"]], "sparkocr.tests.ocr.transformers.test_doc_to_text": [[67, 1, 1, "", "TestDocToText"]], "sparkocr.tests.ocr.transformers.test_doc_to_text.TestDocToText": [[67, 2, 1, "", "test_without_split_by_page"]], "sparkocr.tests.ocr.transformers.test_doc_to_text_table": [[68, 1, 1, "", "TestDocToTextTable"]], "sparkocr.tests.ocr.transformers.test_doc_to_text_table.TestDocToTextTable": [[68, 2, 1, "", "test_should_save_and_load"], [68, 2, 1, "", "test_without_split_by_page"]], "sparkocr.tests.ocr.transformers.test_foundationone_parser": [[69, 1, 1, "", "TestFindingsParser"]], "sparkocr.tests.ocr.transformers.test_foundationone_parser.TestFindingsParser": [[69, 2, 1, "", "test_split_by_page"]], "sparkocr.tests.ocr.transformers.test_hocr_merger": [[70, 1, 1, "", "TestHocrMerger"]], "sparkocr.tests.ocr.transformers.test_hocr_merger.TestHocrMerger": [[70, 2, 1, "", "test_hocr_merger"]], "sparkocr.tests.ocr.transformers.test_hocr_to_image": [[71, 1, 1, "", "TestHocrToImage"]], "sparkocr.tests.ocr.transformers.test_hocr_to_image.TestHocrToImage": [[71, 2, 1, "", "test_hocr_to_image"]], "sparkocr.tests.ocr.transformers.test_hocr_to_text_table": [[72, 1, 1, "", "TestHocrToTextTable"]], "sparkocr.tests.ocr.transformers.test_hocr_to_text_table.TestHocrToTextTable": [[72, 2, 1, "", "test_hocr_to_text_table_using_cells"], [72, 2, 1, "", "test_hocr_to_text_table_using_cells_regions"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer": [[73, 1, 1, "", "TestImageAdaptiveBinarizer"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer.TestImageAdaptiveBinarizer": [[73, 2, 1, "", "test_image_adaptive_thresholding"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding": [[74, 1, 1, "", "TestImageAdaptiveThresholding"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding.TestImageAdaptiveThresholding": [[74, 2, 1, "", "test_image_adaptive_thresholding"], [74, 2, 1, "", "test_image_adaptive_thresholding_wolf"]], "sparkocr.tests.ocr.transformers.test_image_binarizer": [[75, 1, 1, "", "TestImageBinarizer"]], "sparkocr.tests.ocr.transformers.test_image_binarizer.TestImageBinarizer": [[75, 2, 1, "", "test_image_binarazer"]], "sparkocr.tests.ocr.transformers.test_image_brands_ocr": [[76, 1, 1, "", "TestImageBrandsOcr"]], "sparkocr.tests.ocr.transformers.test_image_brands_ocr.TestImageBrandsOcr": [[76, 2, 1, "", "test_tesseract_ocr_with_brands"], [76, 2, 1, "", "test_whole_image_ocr"]], "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table": [[77, 1, 1, "", "TestImageCellsToTextTable"]], "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table.TestImageCellsToTextTable": [[77, 2, 1, "", "test_image_table_to_text_contours"], [77, 2, 1, "", "test_image_table_to_text_csv_output"], [77, 2, 1, "", "test_image_table_to_text_morphops"]], "sparkocr.tests.ocr.transformers.test_image_cropper": [[78, 1, 1, "", "TestImageCropper"]], "sparkocr.tests.ocr.transformers.test_image_cropper.TestImageCropper": [[78, 2, 1, "", "test_image_cropper"], [78, 2, 1, "", "test_image_cropper_with_provide_square"]], "sparkocr.tests.ocr.transformers.test_image_draw_annotations": [[79, 1, 1, "", "TestImageDrawAnnotations"]], "sparkocr.tests.ocr.transformers.test_image_draw_annotations.TestImageDrawAnnotations": [[79, 3, 1, "", "imagePath"], [79, 2, 1, "", "returnPipeline"], [79, 2, 1, "", "test_using_wildcard_in_colorMap"], [79, 2, 1, "", "test_with_missing_label_in_colorMap"]], "sparkocr.tests.ocr.transformers.test_image_draw_regions": [[80, 1, 1, "", "TestImageDrawRegions"]], "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions": [[80, 2, 1, "", "test_exception_thrown_empty_annotation"], [80, 2, 1, "", "test_exception_thrown_empty_coordinates"], [80, 2, 1, "", "test_for_display"], [80, 2, 1, "", "test_no_color_serialization"], [80, 2, 1, "", "test_redaction_mixed_obfuscation"], [80, 2, 1, "", "test_split_by_region"], [80, 2, 1, "", "test_with_color_serialization"]], "sparkocr.tests.ocr.transformers.test_image_erosion": [[81, 1, 1, "", "TestImageErosion"]], "sparkocr.tests.ocr.transformers.test_image_erosion.TestImageErosion": [[81, 2, 1, "", "test_image_erosion"]], "sparkocr.tests.ocr.transformers.test_image_gpu_transform": [[82, 1, 1, "", "TestImageGpuOperation"]], "sparkocr.tests.ocr.transformers.test_image_gpu_transform.TestImageGpuOperation": [[82, 2, 1, "", "test_image_gpu_transform"]], "sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer": [[83, 1, 1, "", "TestImageHandwrittenTextRecognizer"]], "sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer.TestImageHandwrittenTextRecognizer": [[83, 2, 1, "", "test_image_handwritten_text_recognizer"]], "sparkocr.tests.ocr.transformers.test_image_layout_analyzer": [[84, 1, 1, "", "TestImageLayoutAnalyzer"]], "sparkocr.tests.ocr.transformers.test_image_layout_analyzer.TestImageLayoutAnalyzer": [[84, 2, 1, "", "test_split_by_region"]], "sparkocr.tests.ocr.transformers.test_image_morphology_operation": [[85, 1, 1, "", "TestImageMorphologyOperation"]], "sparkocr.tests.ocr.transformers.test_image_morphology_operation.TestImageMorphologyOperation": [[85, 2, 1, "", "test_image_morphology_opening"]], "sparkocr.tests.ocr.transformers.test_image_noise_scorer": [[86, 1, 1, "", "TestImageNoiseScorer"]], "sparkocr.tests.ocr.transformers.test_image_noise_scorer.TestImageNoiseScorer": [[86, 2, 1, "", "test_image_noise_scorer"]], "sparkocr.tests.ocr.transformers.test_image_regions_merger": [[87, 1, 1, "", "TestImageRegionsMerger"]], "sparkocr.tests.ocr.transformers.test_image_regions_merger.TestImageRegionsMerger": [[87, 2, 1, "", "test_merge_regions_keeptxt"], [87, 2, 1, "", "test_merge_regions_mergetocells"]], "sparkocr.tests.ocr.transformers.test_image_remove_objects": [[88, 1, 1, "", "TestImageRemoveObjects"]], "sparkocr.tests.ocr.transformers.test_image_remove_objects.TestImageRemoveObjects": [[88, 2, 1, "", "test_image_remove_objects"], [88, 2, 1, "", "test_image_remove_objects_with_min_font_size"]], "sparkocr.tests.ocr.transformers.test_image_signature_detector": [[89, 1, 1, "", "TestImageSignatureDetector"]], "sparkocr.tests.ocr.transformers.test_image_signature_detector.TestImageSignatureDetector": [[89, 2, 1, "", "test_image_signature_detector"]], "sparkocr.tests.ocr.transformers.test_image_skew_corrector": [[90, 1, 1, "", "TestImageSkewCorrector"]], "sparkocr.tests.ocr.transformers.test_image_skew_corrector.TestImageSkewCorrector": [[90, 2, 1, "", "test_base_skew_corrector"]], "sparkocr.tests.ocr.transformers.test_image_split_regions": [[91, 1, 1, "", "TestImageSplitRegions"]], "sparkocr.tests.ocr.transformers.test_image_split_regions.TestImageSplitRegions": [[91, 2, 1, "", "test_split_by_region_after_layout_analyzer"], [91, 2, 1, "", "test_split_by_region_after_table_detector"]], "sparkocr.tests.ocr.transformers.test_image_table_cells_detector": [[92, 1, 1, "", "TestImageTableCellDetector"]], "sparkocr.tests.ocr.transformers.test_image_table_cells_detector.TestImageTableCellDetector": [[92, 2, 1, "", "test_cell_detector_contours"], [92, 2, 1, "", "test_cell_detector_cut_header"], [92, 2, 1, "", "test_cell_detector_morphops_default_params"], [92, 2, 1, "", "test_cell_detector_morphops_params_dict"], [92, 2, 1, "", "test_cell_detector_morphops_params_str"]], "sparkocr.tests.ocr.transformers.test_image_table_detector": [[93, 1, 1, "", "TestImageTableDetector"], [93, 4, 1, "", "tmpModelFolder"]], "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector": [[93, 2, 1, "", "test_image_table_detector_apply_correction"], [93, 2, 1, "", "test_image_table_detector_apply_scaling"], [93, 2, 1, "", "test_image_table_detector_load"], [93, 2, 1, "", "test_image_table_detector_loadonnx"], [93, 2, 1, "", "test_image_table_detector_pretrained"], [93, 2, 1, "", "test_image_table_detector_save"], [93, 2, 1, "", "test_image_table_detector_savepipeline"]], "sparkocr.tests.ocr.transformers.test_image_text_cleaner": [[94, 1, 1, "", "TestImageTextCleaner"], [94, 4, 1, "", "tmpModelFolder"]], "sparkocr.tests.ocr.transformers.test_image_text_cleaner.TestImageTextCleaner": [[94, 2, 1, "", "test_image_text_detector"]], "sparkocr.tests.ocr.transformers.test_image_to_dicom": [[95, 1, 1, "", "TestImageToDicom"]], "sparkocr.tests.ocr.transformers.test_image_to_dicom.TestImageToDicom": [[95, 2, 1, "", "get_pipeline"], [95, 2, 1, "", "test_metadata_image_to_dicom"]], "sparkocr.tests.ocr.transformers.test_image_to_hocr": [[96, 1, 1, "", "TestImageToHocr"]], "sparkocr.tests.ocr.transformers.test_image_to_hocr.TestImageToHocr": [[96, 2, 1, "", "test_image_to_text"]], "sparkocr.tests.ocr.transformers.test_image_to_pdf": [[97, 1, 1, "", "TestImageToPdf"]], "sparkocr.tests.ocr.transformers.test_image_to_pdf.TestImageToPdf": [[97, 2, 1, "", "test_with_split_by_page"]], "sparkocr.tests.ocr.transformers.test_image_to_text": [[98, 1, 1, "", "TestImageToText"]], "sparkocr.tests.ocr.transformers.test_image_to_text.TestImageToText": [[98, 2, 1, "", "test_image_to_text"], [98, 2, 1, "", "test_image_to_text_keep_layout"], [98, 2, 1, "", "test_image_to_text_kor"]], "sparkocr.tests.ocr.transformers.test_image_transformer": [[99, 1, 1, "", "TestImageOperation"]], "sparkocr.tests.ocr.transformers.test_image_transformer.TestImageOperation": [[99, 2, 1, "", "test_image_transform"]], "sparkocr.tests.ocr.transformers.test_ner_output_cleaner": [[100, 1, 1, "", "TestNerOutputCleaner"]], "sparkocr.tests.ocr.transformers.test_ner_output_cleaner.TestNerOutputCleaner": [[100, 2, 1, "", "test_stage_serializes"]], "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader": [[101, 1, 1, "", "TestOcrResourceDownloader"]], "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader.TestOcrResourceDownloader": [[101, 3, 1, "", "LEVENSHTEIN_DISTANCE_THRESHOLD"], [101, 2, 1, "", "test_download_model"], [101, 2, 1, "", "test_handling_non_existent_model"]], "sparkocr.tests.ocr.transformers.test_pdf_assembler": [[102, 1, 1, "", "TestPdfAssembler"]], "sparkocr.tests.ocr.transformers.test_pdf_assembler.TestPdfAssembler": [[102, 2, 1, "", "get_pipeline"], [102, 2, 1, "", "test_pdf_assembler"]], "sparkocr.tests.ocr.transformers.test_pdf_draw_regions": [[103, 1, 1, "", "TestPdfDrawRegions"]], "sparkocr.tests.ocr.transformers.test_pdf_draw_regions.TestPdfDrawRegions": [[103, 2, 1, "", "get_pipeline"], [103, 2, 1, "", "test_draw_regions"]], "sparkocr.tests.ocr.transformers.test_pdf_to_form": [[104, 1, 1, "", "TestPdfToForm"]], "sparkocr.tests.ocr.transformers.test_pdf_to_form.TestPdfToForm": [[104, 2, 1, "", "test_extract_acro_form"]], "sparkocr.tests.ocr.transformers.test_pdf_to_hocr": [[105, 1, 1, "", "TestPdfToHocr"]], "sparkocr.tests.ocr.transformers.test_pdf_to_hocr.TestPdfToHocr": [[105, 2, 1, "", "test_pdf_to_hocr"], [105, 2, 1, "", "test_pdf_to_hocr_nonascii"], [105, 2, 1, "", "test_pdf_to_hocr_nonascii_keepencoding"]], "sparkocr.tests.ocr.transformers.test_pdf_to_image": [[106, 1, 1, "", "TestPdfToImage"]], "sparkocr.tests.ocr.transformers.test_pdf_to_image.TestPdfToImage": [[106, 2, 1, "", "test_split_by_page"], [106, 2, 1, "", "test_without_split_by_page"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text": [[107, 1, 1, "", "TestPdfToImage"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text.TestPdfToImage": [[107, 2, 1, "", "test_pipeline_serialization"], [107, 2, 1, "", "test_split_by_page"], [107, 2, 1, "", "test_without_split_by_page"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text_table": [[108, 1, 1, "", "TestPdfToTextTable"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text_table.TestPdfToTextTable": [[108, 2, 1, "", "test_should_save_and_load"], [108, 2, 1, "", "test_split_by_page"]], "sparkocr.tests.ocr.transformers.test_position_finder": [[109, 1, 1, "", "TestPositionFinder"]], "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder": [[109, 3, 1, "", "entitySchema"], [109, 2, 1, "", "get_pipeline"], [109, 3, 1, "", "postionSchema"], [109, 2, 1, "", "test_position_finder_serializes_well"], [109, 2, 1, "", "test_position_finder_throws_exceptions"], [109, 2, 1, "", "test_without_split_by_page"]], "sparkocr.tests.ocr.transformers.test_ppt_to_pdf": [[110, 1, 1, "", "TestPptToPdf"]], "sparkocr.tests.ocr.transformers.test_ppt_to_pdf.TestPptToPdf": [[110, 2, 1, "", "test_ppt_without_split_by_page"], [110, 2, 1, "", "test_pptx_without_split_by_page"]], "sparkocr.tests.ocr.transformers.test_ppt_to_text_table": [[111, 1, 1, "", "TestPptToTextTable"]], "sparkocr.tests.ocr.transformers.test_ppt_to_text_table.TestPptToTextTable": [[111, 2, 1, "", "test_ppt_without_split_by_page"], [111, 2, 1, "", "test_pptx_without_split_by_page"], [111, 2, 1, "", "test_should_save_and_load"]], "sparkocr.tests.ocr.transformers.test_text_to_pdf": [[112, 1, 1, "", "TestTextToPdf"]], "sparkocr.tests.ocr.transformers.test_text_to_pdf.TestTextToPdf": [[112, 2, 1, "", "get_pipeline"], [112, 2, 1, "", "test_render_to_pdf"]], "sparkocr.tests.ocr.transformers.test_update_text_position": [[113, 1, 1, "", "TestUpdateTextPosition"]], "sparkocr.tests.ocr.transformers.test_update_text_position.TestUpdateTextPosition": [[113, 2, 1, "", "get_pipeline"], [113, 2, 1, "", "test_update_position_render_to_pdf"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier": [[114, 1, 1, "", "TestVisualDocumentClassifier"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier.TestVisualDocumentClassifier": [[114, 2, 1, "", "test_classify_document"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt": [[115, 4, 1, "", "DELIMITER"], [115, 1, 1, "", "TestVisualDocumentClassifierLilt"], [115, 4, 1, "", "tmp_dataset_dir"], [115, 4, 1, "", "vocab"], [115, 4, 1, "", "vocab_file"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.TestVisualDocumentClassifierLilt": [[115, 2, 1, "", "test_preprocessing"], [115, 2, 1, "", "test_pretrained"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3": [[116, 1, 1, "", "TestVisualDocumentClassifierV3"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3.TestVisualDocumentClassifierV3": [[116, 2, 1, "", "test_pretrained"]], "sparkocr.tests.ocr.transformers.test_visual_document_processor": [[117, 1, 1, "", "TestVisualDocumentProcessor"]], "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor": [[117, 2, 1, "", "test_visual_document_processor"], [117, 2, 1, "", "test_visual_document_processor_docx"], [117, 2, 1, "", "test_visual_document_processor_freeTextOnly"], [117, 2, 1, "", "test_visual_document_processor_html"], [117, 2, 1, "", "test_visual_document_processor_json"], [117, 2, 1, "", "test_visual_document_processor_notformattedtext"], [117, 2, 1, "", "test_visual_document_processor_pdf"], [117, 2, 1, "", "test_visual_document_processor_pptx"], [117, 2, 1, "", "test_visual_document_processor_table"], [117, 2, 1, "", "test_visual_document_processor_tablecvs"], [117, 2, 1, "", "test_visual_document_processor_userapidocr"]], "sparkocr.tests.ocr.transformers.test_visual_question_answering": [[118, 1, 1, "", "TestVisualQuestionAnswering"], [118, 4, 1, "", "cachedir"]], "sparkocr.tests.ocr.transformers.test_visual_question_answering.TestVisualQuestionAnswering": [[118, 2, 1, "", "test_question_answering_donut"], [118, 2, 1, "", "test_question_answering_donut_loadable"], [118, 2, 1, "", "test_question_answering_pix2struct"], [118, 2, 1, "", "test_question_answering_pix2struct_from_pieces"], [118, 2, 1, "", "test_question_answering_pix2struct_loadable"]], "sparkocr.tests.ocr.transformers.tokenizer": [[120, 0, 0, "-", "test_hocr_tokenizer"]], "sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer": [[120, 1, 1, "", "TestHocrTokenizer"]], "sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer.TestHocrTokenizer": [[120, 2, 1, "", "get_pipeline"], [120, 2, 1, "", "test_hoct_tokenizzer"]], "sparkocr.tests.ocr.utils": [[121, 5, 1, "", "intersection_over_union"], [121, 5, 1, "", "matchCoordinates"]], "sparkocr.transformers": [[124, 0, 0, "-", "annotators"], [125, 0, 0, "-", "base64_to_binary"], [126, 0, 0, "-", "base64_to_image"], [127, 0, 0, "-", "binary_to_image"], [128, 0, 0, "-", "chart_to_text_table"], [129, 0, 0, "-", "dataset_reader"], [137, 0, 0, "-", "detectors"], [148, 0, 0, "-", "dicom"], [149, 0, 0, "-", "dicom_to_image"], [150, 0, 0, "-", "doc_to_pdf"], [151, 0, 0, "-", "doc_to_text"], [152, 0, 0, "-", "doc_to_text_table"], [153, 0, 0, "-", "embeddings"], [155, 0, 0, "-", "extended_java_wrapper"], [156, 0, 0, "-", "foundationone_parser"], [157, 0, 0, "-", "hocr_merger"], [158, 0, 0, "-", "hocr_to_image"], [159, 0, 0, "-", "hocr_to_text_table"], [160, 0, 0, "-", "image_adaptive_binarizer"], [161, 0, 0, "-", "image_adaptive_scaler"], [162, 0, 0, "-", "image_adaptive_thresholding"], [163, 0, 0, "-", "image_base_transformer"], [164, 0, 0, "-", "image_binarizer"], [165, 0, 0, "-", "image_brands_ocr"], [166, 0, 0, "-", "image_cells_to_text_table"], [167, 0, 0, "-", "image_cropper"], [168, 0, 0, "-", "image_draw_annotations"], [169, 0, 0, "-", "image_draw_regions"], [170, 0, 0, "-", "image_enhance_contrast"], [171, 0, 0, "-", "image_erosion"], [172, 0, 0, "-", "image_gpu_transform"], [173, 0, 0, "-", "image_handwritten_detector"], [174, 0, 0, "-", "image_handwritten_text_recognizer"], [175, 0, 0, "-", "image_homogenize_light"], [176, 0, 0, "-", "image_layout_analyzer"], [177, 0, 0, "-", "image_morphology_operartion1"], [178, 0, 0, "-", "image_morphology_operation"], [179, 0, 0, "-", "image_noise_scorer"], [180, 0, 0, "-", "image_remove_background"], [181, 0, 0, "-", "image_remove_glare"], [182, 0, 0, "-", "image_remove_objects"], [183, 0, 0, "-", "image_scaler"], [184, 0, 0, "-", "image_skew_corrector"], [185, 0, 0, "-", "image_split_regions"], [186, 0, 0, "-", "image_table_cell_detector"], [187, 0, 0, "-", "image_table_detector"], [188, 0, 0, "-", "image_text_cleaner"], [189, 0, 0, "-", "image_to_dicom"], [190, 0, 0, "-", "image_to_hocr"], [191, 0, 0, "-", "image_to_text"], [192, 0, 0, "-", "image_transformer"], [195, 0, 0, "-", "inpainting"], [197, 0, 0, "-", "ner"], [202, 0, 0, "-", "ner_output_cleaner"], [203, 0, 0, "-", "ocr_resource_downloader"], [204, 0, 0, "-", "params"], [207, 0, 0, "-", "pdf"], [216, 0, 0, "-", "position_finder"], [217, 0, 0, "-", "ppt_to_pdf"], [218, 0, 0, "-", "ppt_to_text_table"], [223, 0, 0, "-", "readers"], [230, 0, 0, "-", "recognizers"], [231, 0, 0, "-", "regions_merger"], [235, 0, 0, "-", "tokenizer"], [236, 0, 0, "-", "update_text_position"], [237, 0, 0, "-", "visual_document_classifier"], [238, 0, 0, "-", "visual_document_classifier_lilt"], [239, 0, 0, "-", "visual_document_classifier_v3"], [240, 0, 0, "-", "visual_document_processor"], [244, 0, 0, "-", "visual_encoder_decoder"], [247, 0, 0, "-", "visual_question_answering"], [248, 0, 0, "-", "vqa"]], "sparkocr.transformers.annotators": [[122, 0, 0, "-", "form_relation_extractor"], [123, 0, 0, "-", "geo_relation_extractor"]], "sparkocr.transformers.annotators.form_relation_extractor": [[122, 1, 1, "", "FormRelationExtractor"]], "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor": [[122, 2, 1, "", "clear"], [122, 2, 1, "", "copy"], [122, 2, 1, "", "explainParam"], [122, 2, 1, "", "explainParams"], [122, 2, 1, "", "extractParamMap"], [122, 2, 1, "", "getInputCol"], [122, 2, 1, "", "getOrDefault"], [122, 2, 1, "", "getOutputCol"], [122, 2, 1, "", "getParam"], [122, 2, 1, "", "hasDefault"], [122, 2, 1, "", "hasParam"], [122, 3, 1, "", "inputCol"], [122, 2, 1, "", "isDefined"], [122, 2, 1, "", "isSet"], [122, 3, 1, "", "keyPattern"], [122, 3, 1, "", "lineTolerance"], [122, 3, 1, "", "name"], [122, 3, 1, "", "outputCol"], [122, 2, 1, "", "set"], [122, 2, 1, "", "setInputCol"], [122, 2, 1, "", "setKeyPattern"], [122, 2, 1, "", "setLineTolerance"], [122, 2, 1, "", "setOutputCol"], [122, 2, 1, "", "setValuePattern"], [122, 2, 1, "", "transform"], [122, 3, 1, "", "uid"], [122, 3, 1, "", "valuePattern"]], "sparkocr.transformers.annotators.geo_relation_extractor": [[123, 1, 1, "", "GeoRelationExtractor"]], "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor": [[123, 2, 1, "", "clear"], [123, 2, 1, "", "copy"], [123, 2, 1, "", "explainParam"], [123, 2, 1, "", "explainParams"], [123, 2, 1, "", "extractParamMap"], [123, 2, 1, "", "getInputCols"], [123, 2, 1, "", "getOrDefault"], [123, 2, 1, "", "getOutputCol"], [123, 2, 1, "", "getParam"], [123, 2, 1, "", "hasDefault"], [123, 2, 1, "", "hasParam"], [123, 3, 1, "", "inputCols"], [123, 2, 1, "", "isDefined"], [123, 2, 1, "", "isSet"], [123, 3, 1, "", "labels"], [123, 2, 1, "", "load"], [123, 2, 1, "", "loadOnnxModel"], [123, 3, 1, "", "name"], [123, 3, 1, "", "outputCol"], [123, 3, 1, "", "outputFormat"], [123, 2, 1, "", "pretrained"], [123, 2, 1, "", "read"], [123, 2, 1, "", "save"], [123, 2, 1, "", "saveModel"], [123, 2, 1, "", "set"], [123, 2, 1, "", "setInputCols"], [123, 2, 1, "", "setLabels"], [123, 2, 1, "", "setMaxSentenceLength"], [123, 2, 1, "", "setOutputCol"], [123, 2, 1, "", "setOutputFormat"], [123, 2, 1, "", "transform"], [123, 3, 1, "", "uid"], [123, 2, 1, "", "write"]], "sparkocr.transformers.base64_to_binary": [[125, 1, 1, "", "Base64ToBinary"]], "sparkocr.transformers.base64_to_binary.Base64ToBinary": [[125, 2, 1, "", "clear"], [125, 2, 1, "", "copy"], [125, 2, 1, "", "explainParam"], [125, 2, 1, "", "explainParams"], [125, 2, 1, "", "extractParamMap"], [125, 3, 1, "", "fileNameCol"], [125, 2, 1, "", "getInputCol"], [125, 2, 1, "", "getOrDefault"], [125, 2, 1, "", "getOutputCol"], [125, 2, 1, "", "getParam"], [125, 2, 1, "", "hasDefault"], [125, 2, 1, "", "hasParam"], [125, 3, 1, "", "inputCol"], [125, 2, 1, "", "isDefined"], [125, 2, 1, "", "isSet"], [125, 3, 1, "", "keepInput"], [125, 2, 1, "", "load"], [125, 3, 1, "", "outputCol"], [125, 2, 1, "", "read"], [125, 2, 1, "", "save"], [125, 2, 1, "", "set"], [125, 2, 1, "", "setFileNameCol"], [125, 2, 1, "", "setInputCol"], [125, 2, 1, "", "setKeepInput"], [125, 2, 1, "", "setOutputCol"], [125, 2, 1, "", "setTruncateInput"], [125, 2, 1, "", "transform"], [125, 3, 1, "", "truncateInput"], [125, 3, 1, "", "uid"], [125, 2, 1, "", "write"]], "sparkocr.transformers.base64_to_image": [[126, 1, 1, "", "Base64ToImage"]], "sparkocr.transformers.base64_to_image.Base64ToImage": [[126, 2, 1, "", "clear"], [126, 2, 1, "", "copy"], [126, 2, 1, "", "explainParam"], [126, 2, 1, "", "explainParams"], [126, 2, 1, "", "extractParamMap"], [126, 2, 1, "", "getInputCol"], [126, 2, 1, "", "getOrDefault"], [126, 2, 1, "", "getOutputCol"], [126, 2, 1, "", "getParam"], [126, 2, 1, "", "hasDefault"], [126, 2, 1, "", "hasParam"], [126, 3, 1, "", "imageType"], [126, 3, 1, "", "inputCol"], [126, 2, 1, "", "isDefined"], [126, 2, 1, "", "isSet"], [126, 3, 1, "", "keepInput"], [126, 2, 1, "", "load"], [126, 3, 1, "", "originCol"], [126, 3, 1, "", "outputCol"], [126, 3, 1, "", "pageNumCol"], [126, 2, 1, "", "read"], [126, 2, 1, "", "save"], [126, 2, 1, "", "set"], [126, 2, 1, "", "setImageType"], [126, 2, 1, "", "setInputCol"], [126, 2, 1, "", "setKeepInput"], [126, 2, 1, "", "setOriginCol"], [126, 2, 1, "", "setOutputCol"], [126, 2, 1, "", "setPageNumCol"], [126, 2, 1, "", "setTruncateInput"], [126, 2, 1, "", "transform"], [126, 3, 1, "", "truncateInput"], [126, 3, 1, "", "uid"], [126, 2, 1, "", "write"]], "sparkocr.transformers.binary_to_image": [[127, 1, 1, "", "BinaryToImage"]], "sparkocr.transformers.binary_to_image.BinaryToImage": [[127, 2, 1, "", "clear"], [127, 2, 1, "", "copy"], [127, 2, 1, "", "explainParam"], [127, 2, 1, "", "explainParams"], [127, 2, 1, "", "extractParamMap"], [127, 2, 1, "", "getInputCol"], [127, 2, 1, "", "getOrDefault"], [127, 2, 1, "", "getOutputCol"], [127, 2, 1, "", "getParam"], [127, 2, 1, "", "hasDefault"], [127, 2, 1, "", "hasParam"], [127, 3, 1, "", "imageType"], [127, 3, 1, "", "inputCol"], [127, 2, 1, "", "isDefined"], [127, 2, 1, "", "isSet"], [127, 3, 1, "", "keepInput"], [127, 2, 1, "", "load"], [127, 3, 1, "", "originCol"], [127, 3, 1, "", "outputCol"], [127, 3, 1, "", "pageNumCol"], [127, 2, 1, "", "read"], [127, 2, 1, "", "save"], [127, 2, 1, "", "set"], [127, 2, 1, "", "setImageType"], [127, 2, 1, "", "setInputCol"], [127, 2, 1, "", "setKeepInput"], [127, 2, 1, "", "setOriginCol"], [127, 2, 1, "", "setOutputCol"], [127, 2, 1, "", "setPageNumCol"], [127, 2, 1, "", "transform"], [127, 3, 1, "", "uid"], [127, 2, 1, "", "write"]], "sparkocr.transformers.chart_to_text_table": [[128, 1, 1, "", "ChartToTextTable"]], "sparkocr.transformers.chart_to_text_table.ChartToTextTable": [[128, 2, 1, "", "load"], [128, 2, 1, "", "pretrained"]], "sparkocr.transformers.dataset_reader": [[129, 1, 1, "", "DatasetReader"]], "sparkocr.transformers.dataset_reader.DatasetReader": [[129, 2, 1, "", "clear"], [129, 2, 1, "", "copy"], [129, 2, 1, "", "explainParam"], [129, 2, 1, "", "explainParams"], [129, 2, 1, "", "extractParamMap"], [129, 2, 1, "", "getOrDefault"], [129, 2, 1, "", "getParam"], [129, 2, 1, "", "hasDefault"], [129, 2, 1, "", "hasParam"], [129, 2, 1, "", "isDefined"], [129, 2, 1, "", "isSet"], [129, 3, 1, "", "name"], [129, 2, 1, "", "readDataset"], [129, 2, 1, "", "readPreprocessedDataset"], [129, 2, 1, "", "set"], [129, 2, 1, "", "transform"], [129, 3, 1, "", "uid"]], "sparkocr.transformers.detectors": [[130, 0, 0, "-", "document_layout_analyzer"], [131, 0, 0, "-", "image_checkbox_detector"], [132, 0, 0, "-", "image_document_region_detector"], [133, 0, 0, "-", "image_text_detector"], [134, 0, 0, "-", "image_text_detector_craft"], [135, 0, 0, "-", "image_text_detector_dit"], [136, 0, 0, "-", "image_text_detector_v2"]], "sparkocr.transformers.detectors.document_layout_analyzer": [[130, 1, 1, "", "DocumentLayoutAnalyzer"]], "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer": [[130, 2, 1, "", "clear"], [130, 2, 1, "", "copy"], [130, 2, 1, "", "explainParam"], [130, 2, 1, "", "explainParams"], [130, 2, 1, "", "extractParamMap"], [130, 2, 1, "", "getInputCol"], [130, 2, 1, "", "getOrDefault"], [130, 2, 1, "", "getOutputCol"], [130, 2, 1, "", "getParam"], [130, 2, 1, "", "hasDefault"], [130, 2, 1, "", "hasParam"], [130, 3, 1, "", "inputCol"], [130, 2, 1, "", "isDefined"], [130, 2, 1, "", "isSet"], [130, 3, 1, "", "labels"], [130, 2, 1, "", "load"], [130, 2, 1, "", "loadONNXModel"], [130, 3, 1, "", "mergeIntersects"], [130, 3, 1, "", "name"], [130, 3, 1, "", "nmsThreshold"], [130, 3, 1, "", "outputCol"], [130, 3, 1, "", "outputLabels"], [130, 2, 1, "", "pretrained"], [130, 2, 1, "", "read"], [130, 2, 1, "", "save"], [130, 3, 1, "", "scaleFactor"], [130, 3, 1, "", "scoreThreshold"], [130, 2, 1, "", "set"], [130, 2, 1, "", "setInputCol"], [130, 2, 1, "", "setLabels"], [130, 2, 1, "", "setMergeIntersects"], [130, 2, 1, "", "setNmsThreshold"], [130, 2, 1, "", "setOutputCol"], [130, 2, 1, "", "setOutputLabels"], [130, 2, 1, "", "setScaleFactor"], [130, 2, 1, "", "setScoreThreshold"], [130, 2, 1, "", "transform"], [130, 3, 1, "", "uid"], [130, 2, 1, "", "write"]], "sparkocr.transformers.detectors.image_checkbox_detector": [[131, 1, 1, "", "ImageCheckBoxDetector"]], "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector": [[131, 2, 1, "", "clear"], [131, 2, 1, "", "copy"], [131, 2, 1, "", "explainParam"], [131, 2, 1, "", "explainParams"], [131, 2, 1, "", "extractParamMap"], [131, 2, 1, "", "getInputCol"], [131, 2, 1, "", "getOrDefault"], [131, 2, 1, "", "getOutputCol"], [131, 2, 1, "", "getParam"], [131, 2, 1, "", "hasDefault"], [131, 2, 1, "", "hasParam"], [131, 3, 1, "", "inputCol"], [131, 2, 1, "", "isDefined"], [131, 2, 1, "", "isSet"], [131, 3, 1, "", "labels"], [131, 2, 1, "", "load"], [131, 2, 1, "", "loadONNXModel"], [131, 3, 1, "", "margin"], [131, 3, 1, "", "name"], [131, 3, 1, "", "outputCol"], [131, 3, 1, "", "outputFormat"], [131, 3, 1, "", "outputLabels"], [131, 2, 1, "", "pretrained"], [131, 2, 1, "", "read"], [131, 2, 1, "", "save"], [131, 2, 1, "", "saveModel"], [131, 3, 1, "", "scoreThreshold"], [131, 2, 1, "", "set"], [131, 2, 1, "", "setInputCol"], [131, 2, 1, "", "setLabels"], [131, 2, 1, "", "setMargin"], [131, 2, 1, "", "setOutputCol"], [131, 2, 1, "", "setOutputFormat"], [131, 2, 1, "", "setOutputLabels"], [131, 2, 1, "", "setScoreThreshold"], [131, 2, 1, "", "transform"], [131, 3, 1, "", "uid"], [131, 2, 1, "", "write"]], "sparkocr.transformers.detectors.image_document_region_detector": [[132, 1, 1, "", "ImageDocumentRegionDetector"]], "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector": [[132, 3, 1, "", "applyCorrection"], [132, 2, 1, "", "clear"], [132, 2, 1, "", "copy"], [132, 2, 1, "", "explainParam"], [132, 2, 1, "", "explainParams"], [132, 2, 1, "", "extractParamMap"], [132, 2, 1, "", "getInputCol"], [132, 2, 1, "", "getOrDefault"], [132, 2, 1, "", "getOutputCol"], [132, 2, 1, "", "getParam"], [132, 2, 1, "", "hasDefault"], [132, 2, 1, "", "hasParam"], [132, 3, 1, "", "inputCol"], [132, 2, 1, "", "isDefined"], [132, 2, 1, "", "isSet"], [132, 3, 1, "", "labels"], [132, 2, 1, "", "load"], [132, 2, 1, "", "loadONNXModel"], [132, 3, 1, "", "name"], [132, 3, 1, "", "outputCol"], [132, 3, 1, "", "outputLabels"], [132, 2, 1, "", "pretrained"], [132, 2, 1, "", "read"], [132, 2, 1, "", "save"], [132, 2, 1, "", "saveModel"], [132, 3, 1, "", "scaleHeightToCol"], [132, 3, 1, "", "scaleWidthToCol"], [132, 3, 1, "", "scoreThreshold"], [132, 2, 1, "", "set"], [132, 2, 1, "", "setApplyCorrection"], [132, 2, 1, "", "setInputCol"], [132, 2, 1, "", "setLabels"], [132, 2, 1, "", "setOutputCol"], [132, 2, 1, "", "setOutputLabels"], [132, 2, 1, "", "setScaleHeightToCol"], [132, 2, 1, "", "setScaleWidthToCol"], [132, 2, 1, "", "setScoreThreshold"], [132, 2, 1, "", "transform"], [132, 3, 1, "", "uid"], [132, 2, 1, "", "write"]], "sparkocr.transformers.detectors.image_text_detector": [[133, 1, 1, "", "ImageTextDetector"]], "sparkocr.transformers.detectors.image_text_detector.ImageTextDetector": [[133, 2, 1, "", "pretrained"]], "sparkocr.transformers.detectors.image_text_detector_craft": [[134, 1, 1, "", "ImageTextDetectorCraft"]], "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft": [[134, 2, 1, "", "clear"], [134, 2, 1, "", "copy"], [134, 2, 1, "", "explainParam"], [134, 2, 1, "", "explainParams"], [134, 2, 1, "", "extractParamMap"], [134, 2, 1, "", "getInputCol"], [134, 2, 1, "", "getOrDefault"], [134, 2, 1, "", "getOutputCol"], [134, 2, 1, "", "getParam"], [134, 2, 1, "", "hasDefault"], [134, 2, 1, "", "hasParam"], [134, 3, 1, "", "height"], [134, 3, 1, "", "inputCol"], [134, 2, 1, "", "isDefined"], [134, 2, 1, "", "isSet"], [134, 3, 1, "", "linkThreshold"], [134, 2, 1, "", "load"], [134, 2, 1, "", "loadONNXModel"], [134, 3, 1, "", "name"], [134, 3, 1, "", "outputCol"], [134, 2, 1, "", "pretrained"], [134, 2, 1, "", "read"], [134, 2, 1, "", "save"], [134, 2, 1, "", "saveModel"], [134, 3, 1, "", "scoreThreshold"], [134, 2, 1, "", "set"], [134, 2, 1, "", "setHeight"], [134, 2, 1, "", "setInputCol"], [134, 2, 1, "", "setLinkThreshold"], [134, 2, 1, "", "setOutputCol"], [134, 2, 1, "", "setScoreThreshold"], [134, 2, 1, "", "setSizeThreshold"], [134, 2, 1, "", "setTextThreshold"], [134, 2, 1, "", "setUseGPU"], [134, 2, 1, "", "setUseInputImageDims"], [134, 2, 1, "", "setWidth"], [134, 2, 1, "", "setWithRefiner"], [134, 3, 1, "", "sizeThreshold"], [134, 3, 1, "", "textThreshold"], [134, 2, 1, "", "transform"], [134, 3, 1, "", "uid"], [134, 3, 1, "", "useGPU"], [134, 3, 1, "", "width"], [134, 3, 1, "", "withRefiner"], [134, 2, 1, "", "write"]], "sparkocr.transformers.detectors.image_text_detector_dit": [[135, 1, 1, "", "ImageTextDetectorDit"]], "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit": [[135, 2, 1, "", "clear"], [135, 2, 1, "", "copy"], [135, 2, 1, "", "explainParam"], [135, 2, 1, "", "explainParams"], [135, 2, 1, "", "extractParamMap"], [135, 2, 1, "", "getInputCol"], [135, 2, 1, "", "getOrDefault"], [135, 2, 1, "", "getOutputCol"], [135, 2, 1, "", "getParam"], [135, 2, 1, "", "hasDefault"], [135, 2, 1, "", "hasParam"], [135, 3, 1, "", "inputCol"], [135, 2, 1, "", "isDefined"], [135, 2, 1, "", "isSet"], [135, 2, 1, "", "load"], [135, 2, 1, "", "loadONNXModel"], [135, 3, 1, "", "name"], [135, 3, 1, "", "outputCol"], [135, 2, 1, "", "pretrained"], [135, 2, 1, "", "read"], [135, 2, 1, "", "save"], [135, 3, 1, "", "scaleFactor"], [135, 3, 1, "", "scoreThreshold"], [135, 2, 1, "", "set"], [135, 2, 1, "", "setInputCol"], [135, 2, 1, "", "setOutputCol"], [135, 2, 1, "", "setScaleFactor"], [135, 2, 1, "", "setScoreThreshold"], [135, 2, 1, "", "transform"], [135, 3, 1, "", "uid"], [135, 2, 1, "", "write"]], "sparkocr.transformers.detectors.image_text_detector_v2": [[136, 1, 1, "", "ImageTextDetectorV2"], [136, 1, 1, "", "ImageTextDetectorV2Writer"]], "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2": [[136, 2, 1, "", "clear"], [136, 2, 1, "", "copy"], [136, 2, 1, "", "explainParam"], [136, 2, 1, "", "explainParams"], [136, 2, 1, "", "exploding_wrap"], [136, 2, 1, "", "extractJsonParams"], [136, 2, 1, "", "extractParamMap"], [136, 3, 1, "", "forceProcessing"], [136, 2, 1, "", "getInputCol"], [136, 2, 1, "", "getModelPath"], [136, 2, 1, "", "getOrDefault"], [136, 2, 1, "", "getOutputCol"], [136, 2, 1, "", "getParam"], [136, 2, 1, "", "get_prediction"], [136, 2, 1, "", "hasDefault"], [136, 2, 1, "", "hasParam"], [136, 3, 1, "", "inputCol"], [136, 3, 1, "", "instance"], [136, 2, 1, "", "isDefined"], [136, 2, 1, "", "isSet"], [136, 3, 1, "", "keepInput"], [136, 3, 1, "", "linkThreshold"], [136, 2, 1, "", "load"], [136, 2, 1, "", "loadPytorchModel"], [136, 3, 1, "", "mergeIntersects"], [136, 3, 1, "", "name"], [136, 2, 1, "", "option"], [136, 3, 1, "", "optionMap"], [136, 3, 1, "", "outputCol"], [136, 2, 1, "", "overwrite"], [136, 2, 1, "", "pandas_udf"], [136, 2, 1, "", "pretrained"], [136, 2, 1, "", "read"], [136, 2, 1, "", "save"], [136, 2, 1, "", "saveImpl"], [136, 2, 1, "", "saveMetadata"], [136, 2, 1, "", "saveModel"], [136, 3, 1, "", "scoreThreshold"], [136, 2, 1, "", "session"], [136, 2, 1, "", "set"], [136, 2, 1, "", "setForceProcessing"], [136, 2, 1, "", "setInputCol"], [136, 2, 1, "", "setKeepInput"], [136, 2, 1, "", "setLinkThreshold"], [136, 2, 1, "", "setMergeIntersects"], [136, 2, 1, "", "setOutputCol"], [136, 2, 1, "", "setScoreThreshold"], [136, 2, 1, "", "setSizeThreshold"], [136, 2, 1, "", "setTextThreshold"], [136, 2, 1, "", "setUseGPU"], [136, 2, 1, "", "setUsePandasUdf"], [136, 2, 1, "", "setWidth"], [136, 2, 1, "", "setWithRefiner"], [136, 3, 1, "", "shouldOverwrite"], [136, 3, 1, "", "sizeThreshold"], [136, 3, 1, "", "textThreshold"], [136, 2, 1, "", "transform"], [136, 2, 1, "", "udf"], [136, 3, 1, "", "uid"], [136, 3, 1, "", "useGPU"], [136, 3, 1, "", "usePandasUdf"], [136, 3, 1, "", "width"], [136, 3, 1, "", "withRefiner"], [136, 2, 1, "", "write"]], "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer": [[136, 2, 1, "", "extractJsonParams"], [136, 3, 1, "", "instance"], [136, 2, 1, "", "option"], [136, 3, 1, "", "optionMap"], [136, 2, 1, "", "overwrite"], [136, 2, 1, "", "save"], [136, 2, 1, "", "saveImpl"], [136, 2, 1, "", "saveMetadata"], [136, 2, 1, "", "session"], [136, 3, 1, "", "shouldOverwrite"]], "sparkocr.transformers.dicom": [[138, 0, 0, "-", "base_dicom"], [139, 0, 0, "-", "dicom_deidentifier"], [140, 0, 0, "-", "dicom_draw_regions"], [141, 0, 0, "-", "dicom_metadata_deidentifier"], [142, 0, 0, "-", "dicom_splitter"], [143, 0, 0, "-", "dicom_to_image_v2"], [144, 0, 0, "-", "dicom_to_image_v3"], [145, 0, 0, "-", "dicom_to_metadata"], [146, 0, 0, "-", "dicom_to_pdf"], [147, 0, 0, "-", "dicom_update_pdf"]], "sparkocr.transformers.dicom.base_dicom": [[138, 1, 1, "", "BaseDicom"]], "sparkocr.transformers.dicom.base_dicom.BaseDicom": [[138, 2, 1, "", "get_s3_creds"], [138, 3, 1, "", "readMaxBytes"], [138, 2, 1, "", "read_dicom"], [138, 2, 1, "", "setReadMaxBytes"]], "sparkocr.transformers.dicom.dicom_deidentifier": [[139, 1, 1, "", "DicomDeidentifier"]], "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier": [[139, 3, 1, "", "blackList"], [139, 2, 1, "", "clear"], [139, 2, 1, "", "copy"], [139, 2, 1, "", "explainParam"], [139, 2, 1, "", "explainParams"], [139, 2, 1, "", "extractParamMap"], [139, 2, 1, "", "getInputCols"], [139, 2, 1, "", "getOrDefault"], [139, 2, 1, "", "getOutputCol"], [139, 2, 1, "", "getParam"], [139, 2, 1, "", "get_input_col"], [139, 2, 1, "", "get_tags"], [139, 2, 1, "", "hasDefault"], [139, 2, 1, "", "hasParam"], [139, 3, 1, "", "inputCols"], [139, 2, 1, "", "isDefined"], [139, 2, 1, "", "isSet"], [139, 3, 1, "", "keepInput"], [139, 2, 1, "", "load"], [139, 3, 1, "", "outputCol"], [139, 2, 1, "", "read"], [139, 2, 1, "", "save"], [139, 2, 1, "", "set"], [139, 2, 1, "", "setBlackList"], [139, 2, 1, "", "setBlackListFile"], [139, 2, 1, "", "setInputCols"], [139, 2, 1, "", "setKeepInput"], [139, 2, 1, "", "setOutputCol"], [139, 2, 1, "", "transform"], [139, 2, 1, "", "transform_dicom"], [139, 3, 1, "", "uid"], [139, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_draw_regions": [[140, 1, 1, "", "DicomCleaner"], [140, 1, 1, "", "DicomDrawRegions"], [140, 6, 1, "", "NoImage"]], "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner": [[140, 3, 1, "", "OVERLAY_TAG"], [140, 2, 1, "", "add_compression_ratio"], [140, 2, 1, "", "clean"], [140, 2, 1, "", "clean_frame"], [140, 3, 1, "", "cleaned_overlay_data"], [140, 2, 1, "", "extract_pixel_using_handler"], [140, 3, 1, "", "frame_numbers"], [140, 2, 1, "", "get_s3_creds"], [140, 2, 1, "", "get_transfer_syntax_based_on_dicom_tags"], [140, 3, 1, "", "htj2k_color_space"], [140, 3, 1, "", "htj2k_lossless_color_space"], [140, 3, 1, "", "htj2k_lossless_rpcl_color_space"], [140, 2, 1, "", "infer_reshape_size"], [140, 3, 1, "", "is_compressed"], [140, 3, 1, "", "jpeg_2000_color_space"], [140, 3, 1, "", "jpeg_2000_lossless_color_space"], [140, 3, 1, "", "jpeg_baseline_8bit_color_space"], [140, 3, 1, "", "jpeg_extended_12_bit_color_space"], [140, 3, 1, "", "jpeg_lossless_p14_color_space"], [140, 3, 1, "", "jpeg_lossless_sv1_color_space"], [140, 3, 1, "", "jpeg_ls_lossless_color_space"], [140, 3, 1, "", "jpeg_ls_near_lossless_color_space"], [140, 2, 1, "", "open"], [140, 3, 1, "", "original"], [140, 3, 1, "", "overlay_data"], [140, 3, 1, "", "readMaxBytes"], [140, 2, 1, "", "read_dicom"], [140, 2, 1, "", "resolve_compression_quality"], [140, 3, 1, "", "results"], [140, 3, 1, "", "rle_color_space"], [140, 2, 1, "", "save_dicom"], [140, 2, 1, "", "setReadMaxBytes"], [140, 3, 1, "", "transfer_syntaxes"], [140, 2, 1, "", "validate_input_dicom_tags"], [140, 3, 1, "", "version"]], "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions": [[140, 3, 1, "", "aggCols"], [140, 2, 1, "", "clear"], [140, 3, 1, "", "compressionQuality"], [140, 2, 1, "", "copy"], [140, 2, 1, "", "explainParam"], [140, 2, 1, "", "explainParams"], [140, 2, 1, "", "extractParamMap"], [140, 3, 1, "", "forceOutput"], [140, 2, 1, "", "getInputCol"], [140, 2, 1, "", "getOrDefault"], [140, 2, 1, "", "getOutputCol"], [140, 2, 1, "", "getParam"], [140, 2, 1, "", "hasDefault"], [140, 2, 1, "", "hasParam"], [140, 3, 1, "", "inputCol"], [140, 3, 1, "", "inputRegionsCol"], [140, 2, 1, "", "isDefined"], [140, 2, 1, "", "isSet"], [140, 3, 1, "", "keepInput"], [140, 2, 1, "", "load"], [140, 3, 1, "", "memoryOptimized"], [140, 3, 1, "", "originCol"], [140, 3, 1, "", "outputCol"], [140, 2, 1, "", "read"], [140, 2, 1, "", "save"], [140, 3, 1, "", "scaleFactor"], [140, 2, 1, "", "set"], [140, 2, 1, "", "setAggCols"], [140, 2, 1, "", "setCompressionQuality"], [140, 2, 1, "", "setForceOutput"], [140, 2, 1, "", "setInputCol"], [140, 2, 1, "", "setInputRegionsCol"], [140, 2, 1, "", "setKeepInput"], [140, 2, 1, "", "setMemoryOptimized"], [140, 2, 1, "", "setOriginCol"], [140, 2, 1, "", "setOutputCol"], [140, 2, 1, "", "setScaleFactor"], [140, 2, 1, "", "transform"], [140, 2, 1, "", "transform_dicom"], [140, 3, 1, "", "uid"], [140, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_metadata_deidentifier": [[141, 1, 1, "", "DicomMetadataDeidentifier"], [141, 1, 1, "", "Obfuscator"]], "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier": [[141, 2, 1, "", "clean_tag_name"], [141, 2, 1, "", "clear"], [141, 2, 1, "", "copy"], [141, 2, 1, "", "explainParam"], [141, 2, 1, "", "explainParams"], [141, 2, 1, "", "extractParamMap"], [141, 2, 1, "", "getInputCols"], [141, 2, 1, "", "getOrDefault"], [141, 2, 1, "", "getOutputCol"], [141, 2, 1, "", "getParam"], [141, 2, 1, "", "getRules"], [141, 2, 1, "", "get_input_col"], [141, 2, 1, "", "hasDefault"], [141, 2, 1, "", "hasParam"], [141, 3, 1, "", "inputCols"], [141, 2, 1, "", "isDefined"], [141, 2, 1, "", "isSet"], [141, 3, 1, "", "keepInput"], [141, 2, 1, "", "load"], [141, 3, 1, "", "outputCol"], [141, 3, 1, "", "placeholderText"], [141, 2, 1, "", "read"], [141, 3, 1, "", "removePrivateTags"], [141, 2, 1, "", "save"], [141, 2, 1, "", "set"], [141, 2, 1, "", "setInputCols"], [141, 2, 1, "", "setKeepInput"], [141, 2, 1, "", "setOutputCol"], [141, 2, 1, "", "setPlaceholderText"], [141, 2, 1, "", "setRemovePrivateTags"], [141, 2, 1, "", "setStrategyFile"], [141, 2, 1, "", "setUserSeed"], [141, 3, 1, "", "strategyFileContent"], [141, 2, 1, "", "transform"], [141, 2, 1, "", "transform_dicom"], [141, 3, 1, "", "uid"], [141, 3, 1, "", "userSeed"], [141, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator": [[141, 2, 1, "", "delete_tag"], [141, 2, 1, "", "dummy_graphic_annotation_sequence"], [141, 2, 1, "", "dummy_person_identification_code_sequence"], [141, 2, 1, "", "dummy_verifying_observer_identification_sequence"], [141, 2, 1, "", "generate_random_string"], [141, 2, 1, "", "get_random_name"], [141, 2, 1, "", "get_random_name_with_seed"], [141, 2, 1, "", "get_random_uid"], [141, 2, 1, "", "hash_uid"], [141, 2, 1, "", "literal"], [141, 2, 1, "", "read_newline_separated"], [141, 2, 1, "", "remove_date"], [141, 2, 1, "", "remove_sequence"], [141, 2, 1, "", "remove_str"], [141, 2, 1, "", "resolve_method"], [141, 2, 1, "", "return_empty_if_value_empty"], [141, 2, 1, "", "shift_age_randomly"], [141, 2, 1, "", "shift_date_fixed_days"], [141, 2, 1, "", "shift_date_random_days"], [141, 2, 1, "", "shift_date_time_days"], [141, 2, 1, "", "shift_time_fixed_days"], [141, 2, 1, "", "shift_time_random_days"]], "sparkocr.transformers.dicom.dicom_splitter": [[142, 1, 1, "", "DicomSplitter"]], "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter": [[142, 2, 1, "", "clear"], [142, 2, 1, "", "copy"], [142, 3, 1, "", "documentNumCol"], [142, 2, 1, "", "explainParam"], [142, 2, 1, "", "explainParams"], [142, 2, 1, "", "extractParamMap"], [142, 2, 1, "", "getInputCol"], [142, 2, 1, "", "getOrDefault"], [142, 2, 1, "", "getOutputCol"], [142, 2, 1, "", "getParam"], [142, 2, 1, "", "hasDefault"], [142, 2, 1, "", "hasParam"], [142, 3, 1, "", "inputCol"], [142, 2, 1, "", "isDefined"], [142, 2, 1, "", "isSet"], [142, 3, 1, "", "keepInput"], [142, 2, 1, "", "load"], [142, 3, 1, "", "originCol"], [142, 3, 1, "", "outputCol"], [142, 3, 1, "", "partitionNum"], [142, 2, 1, "", "read"], [142, 2, 1, "", "save"], [142, 2, 1, "", "set"], [142, 2, 1, "", "setInputCol"], [142, 2, 1, "", "setKeepInput"], [142, 2, 1, "", "setOriginCol"], [142, 2, 1, "", "setOutputCol"], [142, 2, 1, "", "setPartitionNum"], [142, 2, 1, "", "setSplitNumBatch"], [142, 2, 1, "", "setSplittingStategy"], [142, 3, 1, "", "splitNumBatch"], [142, 3, 1, "", "splittingStategy"], [142, 2, 1, "", "transform"], [142, 2, 1, "", "transform_dicom"], [142, 3, 1, "", "uid"], [142, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_to_image_v2": [[143, 1, 1, "", "DicomToImageV2"]], "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2": [[143, 2, 1, "", "clear"], [143, 2, 1, "", "copy"], [143, 2, 1, "", "explainParam"], [143, 2, 1, "", "explainParams"], [143, 2, 1, "", "extractParamMap"], [143, 2, 1, "", "getInputCols"], [143, 2, 1, "", "getOrDefault"], [143, 2, 1, "", "getOutputCol"], [143, 2, 1, "", "getParam"], [143, 2, 1, "", "get_input_col"], [143, 2, 1, "", "hasDefault"], [143, 2, 1, "", "hasParam"], [143, 3, 1, "", "inputCols"], [143, 2, 1, "", "isDefined"], [143, 2, 1, "", "isSet"], [143, 3, 1, "", "keepInput"], [143, 2, 1, "", "load"], [143, 3, 1, "", "metadataCol"], [143, 3, 1, "", "originCol"], [143, 3, 1, "", "outputCol"], [143, 3, 1, "", "pageNumCol"], [143, 2, 1, "", "read"], [143, 2, 1, "", "save"], [143, 2, 1, "", "set"], [143, 2, 1, "", "setInputCols"], [143, 2, 1, "", "setKeepInput"], [143, 2, 1, "", "setMetadataCol"], [143, 2, 1, "", "setOriginCol"], [143, 2, 1, "", "setOutputCol"], [143, 2, 1, "", "setPageNumCol"], [143, 2, 1, "", "transform"], [143, 2, 1, "", "transform_dicom"], [143, 3, 1, "", "uid"], [143, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_to_image_v3": [[144, 1, 1, "", "DicomToImageV3"]], "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3": [[144, 2, 1, "", "add_image"], [144, 2, 1, "", "clear"], [144, 3, 1, "", "compressionMode"], [144, 3, 1, "", "compressionQuality"], [144, 3, 1, "", "compressionThreshold"], [144, 2, 1, "", "copy"], [144, 2, 1, "", "explainParam"], [144, 2, 1, "", "explainParams"], [144, 2, 1, "", "extractParamMap"], [144, 3, 1, "", "frameLimit"], [144, 2, 1, "", "getInputCols"], [144, 2, 1, "", "getOrDefault"], [144, 2, 1, "", "getOutputCol"], [144, 2, 1, "", "getParam"], [144, 2, 1, "", "get_input_col"], [144, 2, 1, "", "get_s3_creds"], [144, 2, 1, "", "hasDefault"], [144, 2, 1, "", "hasParam"], [144, 3, 1, "", "inputCols"], [144, 2, 1, "", "isDefined"], [144, 2, 1, "", "isSet"], [144, 3, 1, "", "keepInput"], [144, 2, 1, "", "load"], [144, 3, 1, "", "memoryOptimized"], [144, 3, 1, "", "metadataCol"], [144, 3, 1, "", "originCol"], [144, 3, 1, "", "outputCol"], [144, 3, 1, "", "pageNumCol"], [144, 2, 1, "", "read"], [144, 3, 1, "", "readMaxBytes"], [144, 2, 1, "", "read_dicom"], [144, 2, 1, "", "save"], [144, 3, 1, "", "scale"], [144, 2, 1, "", "set"], [144, 2, 1, "", "setCompressionMode"], [144, 2, 1, "", "setCompressionQuality"], [144, 2, 1, "", "setCompressionThreshold"], [144, 2, 1, "", "setFrameLimit"], [144, 2, 1, "", "setInputCols"], [144, 2, 1, "", "setKeepInput"], [144, 2, 1, "", "setMemoryOptimized"], [144, 2, 1, "", "setMetadataCol"], [144, 2, 1, "", "setOriginCol"], [144, 2, 1, "", "setOutputCol"], [144, 2, 1, "", "setPageNumCol"], [144, 2, 1, "", "setReadMaxBytes"], [144, 2, 1, "", "setScale"], [144, 2, 1, "", "transform"], [144, 2, 1, "", "transform_dicom"], [144, 3, 1, "", "uid"], [144, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_to_metadata": [[145, 1, 1, "", "DicomToMetadata"]], "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata": [[145, 2, 1, "", "clear"], [145, 2, 1, "", "copy"], [145, 3, 1, "", "documentNumCol"], [145, 2, 1, "", "explainParam"], [145, 2, 1, "", "explainParams"], [145, 2, 1, "", "exploding_wrap"], [145, 2, 1, "", "extractParamMap"], [145, 3, 1, "", "forceProcessing"], [145, 2, 1, "", "getInputCol"], [145, 2, 1, "", "getOrDefault"], [145, 2, 1, "", "getOutputCol"], [145, 2, 1, "", "getParam"], [145, 2, 1, "", "get_s3_creds"], [145, 2, 1, "", "hasDefault"], [145, 2, 1, "", "hasParam"], [145, 3, 1, "", "inputCol"], [145, 2, 1, "", "isDefined"], [145, 2, 1, "", "isSet"], [145, 3, 1, "", "keepInput"], [145, 2, 1, "", "load"], [145, 3, 1, "", "originCol"], [145, 3, 1, "", "outputCol"], [145, 3, 1, "", "partitionNum"], [145, 2, 1, "", "read"], [145, 3, 1, "", "readMaxBytes"], [145, 2, 1, "", "read_dicom"], [145, 2, 1, "", "save"], [145, 2, 1, "", "set"], [145, 2, 1, "", "setForceProcessing"], [145, 2, 1, "", "setInputCol"], [145, 2, 1, "", "setKeepInput"], [145, 2, 1, "", "setOutputCol"], [145, 2, 1, "", "setReadMaxBytes"], [145, 3, 1, "", "splitNumBatch"], [145, 3, 1, "", "splittingStategy"], [145, 2, 1, "", "transform"], [145, 2, 1, "", "transform_dicom"], [145, 3, 1, "", "uid"], [145, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_to_pdf": [[146, 1, 1, "", "DicomToPdf"]], "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf": [[146, 2, 1, "", "clear"], [146, 2, 1, "", "copy"], [146, 2, 1, "", "explainParam"], [146, 2, 1, "", "explainParams"], [146, 2, 1, "", "extractParamMap"], [146, 2, 1, "", "getInputCols"], [146, 2, 1, "", "getOrDefault"], [146, 2, 1, "", "getOutputCol"], [146, 2, 1, "", "getParam"], [146, 2, 1, "", "get_input_col"], [146, 2, 1, "", "hasDefault"], [146, 2, 1, "", "hasParam"], [146, 3, 1, "", "inputCols"], [146, 2, 1, "", "isDefined"], [146, 2, 1, "", "isSet"], [146, 3, 1, "", "keepInput"], [146, 2, 1, "", "load"], [146, 3, 1, "", "originCol"], [146, 3, 1, "", "outputCol"], [146, 2, 1, "", "read"], [146, 2, 1, "", "save"], [146, 2, 1, "", "set"], [146, 2, 1, "", "setInputCols"], [146, 2, 1, "", "setKeepInput"], [146, 2, 1, "", "setOriginCol"], [146, 2, 1, "", "setOutputCol"], [146, 2, 1, "", "transform"], [146, 2, 1, "", "transform_dicom"], [146, 3, 1, "", "uid"], [146, 2, 1, "", "write"]], "sparkocr.transformers.dicom.dicom_update_pdf": [[147, 1, 1, "", "DicomUpdatePdf"]], "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf": [[147, 2, 1, "", "clear"], [147, 2, 1, "", "copy"], [147, 2, 1, "", "explainParam"], [147, 2, 1, "", "explainParams"], [147, 2, 1, "", "extractParamMap"], [147, 2, 1, "", "getInputCol"], [147, 2, 1, "", "getOrDefault"], [147, 2, 1, "", "getOutputCol"], [147, 2, 1, "", "getParam"], [147, 2, 1, "", "hasDefault"], [147, 2, 1, "", "hasParam"], [147, 3, 1, "", "inputCol"], [147, 3, 1, "", "inputPdfCol"], [147, 2, 1, "", "isDefined"], [147, 2, 1, "", "isSet"], [147, 3, 1, "", "keepInput"], [147, 2, 1, "", "load"], [147, 3, 1, "", "outputCol"], [147, 2, 1, "", "read"], [147, 2, 1, "", "save"], [147, 2, 1, "", "set"], [147, 2, 1, "", "setInputCol"], [147, 2, 1, "", "setInputPdfCol"], [147, 2, 1, "", "setKeepInput"], [147, 2, 1, "", "setOutputCol"], [147, 2, 1, "", "transform"], [147, 2, 1, "", "transform_dicom"], [147, 3, 1, "", "uid"], [147, 2, 1, "", "write"]], "sparkocr.transformers.dicom_to_image": [[149, 1, 1, "", "DicomToImage"]], "sparkocr.transformers.dicom_to_image.DicomToImage": [[149, 2, 1, "", "clear"], [149, 2, 1, "", "copy"], [149, 3, 1, "", "deIdentifyMetadata"], [149, 2, 1, "", "explainParam"], [149, 2, 1, "", "explainParams"], [149, 2, 1, "", "extractParamMap"], [149, 2, 1, "", "getInputCol"], [149, 2, 1, "", "getOrDefault"], [149, 2, 1, "", "getOutputCol"], [149, 2, 1, "", "getParam"], [149, 2, 1, "", "hasDefault"], [149, 2, 1, "", "hasParam"], [149, 3, 1, "", "inputCol"], [149, 2, 1, "", "isDefined"], [149, 2, 1, "", "isSet"], [149, 3, 1, "", "keepInput"], [149, 2, 1, "", "load"], [149, 3, 1, "", "metadataCol"], [149, 3, 1, "", "originCol"], [149, 3, 1, "", "outputCol"], [149, 3, 1, "", "pageNumCol"], [149, 2, 1, "", "read"], [149, 2, 1, "", "save"], [149, 2, 1, "", "set"], [149, 2, 1, "", "setDeIdentifyMetadata"], [149, 2, 1, "", "setInputCol"], [149, 2, 1, "", "setKeepInput"], [149, 2, 1, "", "setMetadataCol"], [149, 2, 1, "", "setOriginCol"], [149, 2, 1, "", "setOutputCol"], [149, 2, 1, "", "setPageNumCol"], [149, 2, 1, "", "transform"], [149, 3, 1, "", "uid"], [149, 2, 1, "", "write"]], "sparkocr.transformers.doc_to_pdf": [[150, 1, 1, "", "DocToPdf"]], "sparkocr.transformers.doc_to_pdf.DocToPdf": [[150, 2, 1, "", "clear"], [150, 2, 1, "", "copy"], [150, 2, 1, "", "explainParam"], [150, 2, 1, "", "explainParams"], [150, 2, 1, "", "extractParamMap"], [150, 2, 1, "", "getInputCol"], [150, 2, 1, "", "getOrDefault"], [150, 2, 1, "", "getOutputCol"], [150, 2, 1, "", "getParam"], [150, 2, 1, "", "hasDefault"], [150, 2, 1, "", "hasParam"], [150, 3, 1, "", "inputCol"], [150, 2, 1, "", "isDefined"], [150, 2, 1, "", "isSet"], [150, 2, 1, "", "load"], [150, 3, 1, "", "outputCol"], [150, 2, 1, "", "read"], [150, 2, 1, "", "save"], [150, 2, 1, "", "set"], [150, 2, 1, "", "setInputCol"], [150, 2, 1, "", "setOutputCol"], [150, 2, 1, "", "transform"], [150, 3, 1, "", "uid"], [150, 2, 1, "", "write"]], "sparkocr.transformers.doc_to_text": [[151, 1, 1, "", "DocToText"]], "sparkocr.transformers.doc_to_text.DocToText": [[151, 2, 1, "", "clear"], [151, 2, 1, "", "copy"], [151, 2, 1, "", "explainParam"], [151, 2, 1, "", "explainParams"], [151, 2, 1, "", "extractParamMap"], [151, 2, 1, "", "getInputCol"], [151, 2, 1, "", "getOrDefault"], [151, 2, 1, "", "getOutputCol"], [151, 2, 1, "", "getParam"], [151, 2, 1, "", "hasDefault"], [151, 2, 1, "", "hasParam"], [151, 3, 1, "", "inputCol"], [151, 2, 1, "", "isDefined"], [151, 2, 1, "", "isSet"], [151, 2, 1, "", "load"], [151, 3, 1, "", "outputCol"], [151, 3, 1, "", "pageNumCol"], [151, 2, 1, "", "read"], [151, 2, 1, "", "save"], [151, 2, 1, "", "set"], [151, 2, 1, "", "setInputCol"], [151, 2, 1, "", "setOutputCol"], [151, 2, 1, "", "setPageNumCol"], [151, 2, 1, "", "transform"], [151, 3, 1, "", "uid"], [151, 2, 1, "", "write"]], "sparkocr.transformers.doc_to_text_table": [[152, 1, 1, "", "DocToTextTable"]], "sparkocr.transformers.doc_to_text_table.DocToTextTable": [[152, 2, 1, "", "clear"], [152, 2, 1, "", "copy"], [152, 2, 1, "", "explainParam"], [152, 2, 1, "", "explainParams"], [152, 2, 1, "", "extractParamMap"], [152, 2, 1, "", "getInputCol"], [152, 2, 1, "", "getOrDefault"], [152, 2, 1, "", "getOutputCol"], [152, 2, 1, "", "getParam"], [152, 2, 1, "", "hasDefault"], [152, 2, 1, "", "hasParam"], [152, 3, 1, "", "inputCol"], [152, 2, 1, "", "isDefined"], [152, 2, 1, "", "isSet"], [152, 2, 1, "", "load"], [152, 3, 1, "", "outputCol"], [152, 2, 1, "", "read"], [152, 2, 1, "", "save"], [152, 2, 1, "", "set"], [152, 2, 1, "", "setInputCol"], [152, 2, 1, "", "setOutputCol"], [152, 2, 1, "", "transform"], [152, 3, 1, "", "uid"], [152, 2, 1, "", "write"]], "sparkocr.transformers.embeddings": [[154, 0, 0, "-", "vit_image_embeddings"]], "sparkocr.transformers.embeddings.vit_image_embeddings": [[154, 1, 1, "", "VitImageEmbeddings"]], "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings": [[154, 2, 1, "", "clear"], [154, 2, 1, "", "copy"], [154, 2, 1, "", "explainParam"], [154, 2, 1, "", "explainParams"], [154, 2, 1, "", "extractParamMap"], [154, 2, 1, "", "getInputCol"], [154, 2, 1, "", "getOrDefault"], [154, 2, 1, "", "getOutputCol"], [154, 2, 1, "", "getParam"], [154, 2, 1, "", "hasDefault"], [154, 2, 1, "", "hasParam"], [154, 3, 1, "", "height"], [154, 3, 1, "", "inputCol"], [154, 2, 1, "", "isDefined"], [154, 2, 1, "", "isSet"], [154, 2, 1, "", "load"], [154, 2, 1, "", "loadONNXModel"], [154, 3, 1, "", "name"], [154, 3, 1, "", "normMean"], [154, 3, 1, "", "normStd"], [154, 3, 1, "", "outputCol"], [154, 2, 1, "", "pretrained"], [154, 2, 1, "", "read"], [154, 2, 1, "", "save"], [154, 2, 1, "", "saveModel"], [154, 2, 1, "", "set"], [154, 2, 1, "", "setHeight"], [154, 2, 1, "", "setInputCol"], [154, 2, 1, "", "setNormMean"], [154, 2, 1, "", "setOutputCol"], [154, 2, 1, "", "setWidth"], [154, 2, 1, "", "transform"], [154, 3, 1, "", "uid"], [154, 3, 1, "", "width"], [154, 2, 1, "", "write"]], "sparkocr.transformers.extended_java_wrapper": [[155, 1, 1, "", "ExtendedJavaWrapper"]], "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper": [[155, 2, 1, "", "apply"], [155, 3, 1, "", "java_obj"], [155, 2, 1, "", "new_java_array"], [155, 2, 1, "", "new_java_array_integer"], [155, 2, 1, "", "new_java_array_string"], [155, 2, 1, "", "new_java_obj"], [155, 3, 1, "", "sc"]], "sparkocr.transformers.foundationone_parser": [[156, 1, 1, "", "FoundationOneReportParser"]], "sparkocr.transformers.foundationone_parser.FoundationOneReportParser": [[156, 2, 1, "", "clear"], [156, 2, 1, "", "copy"], [156, 2, 1, "", "explainParam"], [156, 2, 1, "", "explainParams"], [156, 2, 1, "", "extractParamMap"], [156, 2, 1, "", "getInputCol"], [156, 2, 1, "", "getOrDefault"], [156, 2, 1, "", "getOutputCol"], [156, 2, 1, "", "getParam"], [156, 2, 1, "", "hasDefault"], [156, 2, 1, "", "hasParam"], [156, 3, 1, "", "inputCol"], [156, 2, 1, "", "isDefined"], [156, 2, 1, "", "isSet"], [156, 2, 1, "", "load"], [156, 3, 1, "", "originCol"], [156, 3, 1, "", "outputCol"], [156, 2, 1, "", "read"], [156, 2, 1, "", "save"], [156, 2, 1, "", "set"], [156, 2, 1, "", "setInputCol"], [156, 2, 1, "", "setOriginCol"], [156, 2, 1, "", "setOutputCol"], [156, 2, 1, "", "transform"], [156, 3, 1, "", "uid"], [156, 2, 1, "", "write"]], "sparkocr.transformers.hocr_merger": [[157, 1, 1, "", "HocrMerger"]], "sparkocr.transformers.hocr_merger.HocrMerger": [[157, 2, 1, "", "clear"], [157, 2, 1, "", "copy"], [157, 2, 1, "", "explainParam"], [157, 2, 1, "", "explainParams"], [157, 2, 1, "", "extractParamMap"], [157, 2, 1, "", "getInputCols"], [157, 2, 1, "", "getOrDefault"], [157, 2, 1, "", "getOutputCol"], [157, 2, 1, "", "getParam"], [157, 2, 1, "", "hasDefault"], [157, 2, 1, "", "hasParam"], [157, 3, 1, "", "inputCols"], [157, 2, 1, "", "isDefined"], [157, 2, 1, "", "isSet"], [157, 3, 1, "", "outputCol"], [157, 2, 1, "", "save"], [157, 2, 1, "", "set"], [157, 2, 1, "", "setInputCols"], [157, 2, 1, "", "setOutputCol"], [157, 2, 1, "", "transform"], [157, 3, 1, "", "uid"], [157, 2, 1, "", "write"]], "sparkocr.transformers.hocr_to_image": [[158, 1, 1, "", "HocrToImage"]], "sparkocr.transformers.hocr_to_image.HocrToImage": [[158, 2, 1, "", "clear"], [158, 2, 1, "", "copy"], [158, 2, 1, "", "explainParam"], [158, 2, 1, "", "explainParams"], [158, 2, 1, "", "extractParamMap"], [158, 2, 1, "", "getInputCol"], [158, 2, 1, "", "getOrDefault"], [158, 2, 1, "", "getOutputCol"], [158, 2, 1, "", "getParam"], [158, 2, 1, "", "hasDefault"], [158, 2, 1, "", "hasParam"], [158, 3, 1, "", "inputCol"], [158, 2, 1, "", "isDefined"], [158, 2, 1, "", "isSet"], [158, 3, 1, "", "outputCol"], [158, 2, 1, "", "save"], [158, 2, 1, "", "set"], [158, 2, 1, "", "setInputCol"], [158, 2, 1, "", "setOutputCol"], [158, 2, 1, "", "transform"], [158, 3, 1, "", "uid"], [158, 2, 1, "", "write"]], "sparkocr.transformers.hocr_to_text_table": [[159, 1, 1, "", "HocrToTextTable"]], "sparkocr.transformers.hocr_to_text_table.HocrToTextTable": [[159, 3, 1, "", "annotator_type"], [159, 2, 1, "", "clear"], [159, 2, 1, "", "copy"], [159, 3, 1, "", "downloadModelData"], [159, 2, 1, "", "explainParam"], [159, 2, 1, "", "explainParams"], [159, 2, 1, "", "extractParamMap"], [159, 2, 1, "", "getInputCol"], [159, 2, 1, "", "getOrDefault"], [159, 2, 1, "", "getOutputCol"], [159, 2, 1, "", "getParam"], [159, 2, 1, "", "hasDefault"], [159, 2, 1, "", "hasParam"], [159, 3, 1, "", "inputCol"], [159, 2, 1, "", "isDefined"], [159, 2, 1, "", "isSet"], [159, 3, 1, "", "language"], [159, 2, 1, "", "load"], [159, 3, 1, "", "modelData"], [159, 3, 1, "", "modelType"], [159, 3, 1, "", "ocrEngineMode"], [159, 3, 1, "", "outputCol"], [159, 3, 1, "", "outputFormat"], [159, 3, 1, "", "pageIteratorLevel"], [159, 3, 1, "", "pageSegMode"], [159, 2, 1, "", "read"], [159, 3, 1, "", "recognizerAlgo"], [159, 3, 1, "", "regionCol"], [159, 2, 1, "", "save"], [159, 2, 1, "", "set"], [159, 2, 1, "", "setDownloadModelData"], [159, 2, 1, "", "setInputCol"], [159, 2, 1, "", "setLanguage"], [159, 2, 1, "", "setModelData"], [159, 2, 1, "", "setModelType"], [159, 2, 1, "", "setOcrEngineMode"], [159, 2, 1, "", "setOutputCol"], [159, 2, 1, "", "setOutputFormat"], [159, 2, 1, "", "setPageIteratorLevel"], [159, 2, 1, "", "setPageSegMode"], [159, 2, 1, "", "setRecognizerAlgo"], [159, 2, 1, "", "setRegionCol"], [159, 2, 1, "", "setUseCellsCol"], [159, 2, 1, "", "setUseTess4j"], [159, 2, 1, "", "transform"], [159, 3, 1, "", "uid"], [159, 3, 1, "", "useCellsCol"], [159, 3, 1, "", "useTess4j"], [159, 2, 1, "", "write"]], "sparkocr.transformers.image_adaptive_binarizer": [[160, 1, 1, "", "ImageAdaptiveBinarizer"]], "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer": [[160, 2, 1, "", "clear"], [160, 2, 1, "", "copy"], [160, 2, 1, "", "explainParam"], [160, 2, 1, "", "explainParams"], [160, 2, 1, "", "extractParamMap"], [160, 2, 1, "", "getInputCol"], [160, 2, 1, "", "getOrDefault"], [160, 2, 1, "", "getOutputCol"], [160, 2, 1, "", "getParam"], [160, 2, 1, "", "hasDefault"], [160, 2, 1, "", "hasParam"], [160, 3, 1, "", "inputCol"], [160, 2, 1, "", "isDefined"], [160, 2, 1, "", "isSet"], [160, 2, 1, "", "load"], [160, 3, 1, "", "method"], [160, 3, 1, "", "outputCol"], [160, 2, 1, "", "read"], [160, 2, 1, "", "save"], [160, 3, 1, "", "scale"], [160, 2, 1, "", "set"], [160, 2, 1, "", "setImageType"], [160, 2, 1, "", "setInputCol"], [160, 2, 1, "", "setMethod"], [160, 2, 1, "", "setOutputCol"], [160, 2, 1, "", "setScale"], [160, 2, 1, "", "setWidth"], [160, 2, 1, "", "transform"], [160, 3, 1, "", "uid"], [160, 3, 1, "", "width"], [160, 2, 1, "", "write"]], "sparkocr.transformers.image_adaptive_scaler": [[161, 1, 1, "", "ImageAdaptiveScaler"]], "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler": [[161, 2, 1, "", "clear"], [161, 2, 1, "", "copy"], [161, 3, 1, "", "desiredSize"], [161, 2, 1, "", "explainParam"], [161, 2, 1, "", "explainParams"], [161, 2, 1, "", "extractParamMap"], [161, 2, 1, "", "getInputCol"], [161, 2, 1, "", "getOrDefault"], [161, 2, 1, "", "getOutputCol"], [161, 2, 1, "", "getParam"], [161, 2, 1, "", "hasDefault"], [161, 2, 1, "", "hasParam"], [161, 3, 1, "", "inputCol"], [161, 2, 1, "", "isDefined"], [161, 2, 1, "", "isSet"], [161, 2, 1, "", "load"], [161, 3, 1, "", "outputCol"], [161, 2, 1, "", "read"], [161, 2, 1, "", "save"], [161, 2, 1, "", "set"], [161, 2, 1, "", "setDesiredSize"], [161, 2, 1, "", "setInputCol"], [161, 2, 1, "", "setOutputCol"], [161, 2, 1, "", "transform"], [161, 3, 1, "", "uid"], [161, 2, 1, "", "write"]], "sparkocr.transformers.image_adaptive_thresholding": [[162, 1, 1, "", "ImageAdaptiveThresholding"]], "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding": [[162, 3, 1, "", "blockSize"], [162, 2, 1, "", "clear"], [162, 2, 1, "", "copy"], [162, 3, 1, "", "cval"], [162, 2, 1, "", "explainParam"], [162, 2, 1, "", "explainParams"], [162, 2, 1, "", "extractParamMap"], [162, 2, 1, "", "getBlockSize"], [162, 2, 1, "", "getCval"], [162, 2, 1, "", "getInputCol"], [162, 2, 1, "", "getMethod"], [162, 2, 1, "", "getMode"], [162, 2, 1, "", "getOffset"], [162, 2, 1, "", "getOrDefault"], [162, 2, 1, "", "getOutputCol"], [162, 2, 1, "", "getParam"], [162, 2, 1, "", "hasDefault"], [162, 2, 1, "", "hasParam"], [162, 3, 1, "", "inputCol"], [162, 2, 1, "", "isDefined"], [162, 2, 1, "", "isSet"], [162, 3, 1, "", "keepInput"], [162, 2, 1, "", "load"], [162, 3, 1, "", "method"], [162, 3, 1, "", "mode"], [162, 3, 1, "", "offset"], [162, 3, 1, "", "outputCol"], [162, 2, 1, "", "read"], [162, 2, 1, "", "save"], [162, 2, 1, "", "set"], [162, 2, 1, "", "setBlockSize"], [162, 2, 1, "", "setCval"], [162, 2, 1, "", "setInputCol"], [162, 2, 1, "", "setKeepInput"], [162, 2, 1, "", "setMethod"], [162, 2, 1, "", "setMode"], [162, 2, 1, "", "setOffset"], [162, 2, 1, "", "setOutputCol"], [162, 2, 1, "", "setParams"], [162, 2, 1, "", "transform"], [162, 2, 1, "", "transform_image"], [162, 3, 1, "", "uid"], [162, 2, 1, "", "write"]], "sparkocr.transformers.image_base_transformer": [[163, 1, 1, "", "ImageBaseTransformer"]], "sparkocr.transformers.image_base_transformer.ImageBaseTransformer": [[163, 2, 1, "", "clear"], [163, 2, 1, "", "copy"], [163, 2, 1, "", "explainParam"], [163, 2, 1, "", "explainParams"], [163, 2, 1, "", "extractParamMap"], [163, 2, 1, "", "getInputCol"], [163, 2, 1, "", "getOrDefault"], [163, 2, 1, "", "getOutputCol"], [163, 2, 1, "", "getParam"], [163, 2, 1, "", "hasDefault"], [163, 2, 1, "", "hasParam"], [163, 3, 1, "", "inputCol"], [163, 2, 1, "", "isDefined"], [163, 2, 1, "", "isSet"], [163, 3, 1, "", "keepInput"], [163, 2, 1, "", "load"], [163, 3, 1, "", "outputCol"], [163, 2, 1, "", "read"], [163, 2, 1, "", "save"], [163, 2, 1, "", "set"], [163, 2, 1, "", "setInputCol"], [163, 2, 1, "", "setKeepInput"], [163, 2, 1, "", "setOutputCol"], [163, 2, 1, "", "transform"], [163, 2, 1, "", "transform_image"], [163, 3, 1, "", "uid"], [163, 2, 1, "", "write"]], "sparkocr.transformers.image_binarizer": [[164, 1, 1, "", "ImageBinarizer"]], "sparkocr.transformers.image_binarizer.ImageBinarizer": [[164, 2, 1, "", "clear"], [164, 2, 1, "", "copy"], [164, 2, 1, "", "explainParam"], [164, 2, 1, "", "explainParams"], [164, 2, 1, "", "extractParamMap"], [164, 2, 1, "", "getInputCol"], [164, 2, 1, "", "getOrDefault"], [164, 2, 1, "", "getOutputCol"], [164, 2, 1, "", "getParam"], [164, 2, 1, "", "hasDefault"], [164, 2, 1, "", "hasParam"], [164, 3, 1, "", "imageType"], [164, 3, 1, "", "inputCol"], [164, 2, 1, "", "isDefined"], [164, 2, 1, "", "isSet"], [164, 2, 1, "", "load"], [164, 3, 1, "", "outputCol"], [164, 2, 1, "", "read"], [164, 2, 1, "", "save"], [164, 2, 1, "", "set"], [164, 2, 1, "", "setImageType"], [164, 2, 1, "", "setInputCol"], [164, 2, 1, "", "setOutputCol"], [164, 2, 1, "", "setThreshold"], [164, 3, 1, "", "threshold"], [164, 2, 1, "", "transform"], [164, 3, 1, "", "uid"], [164, 2, 1, "", "write"]], "sparkocr.transformers.image_brands_ocr": [[165, 1, 1, "", "ImageBrandsToText"]], "sparkocr.transformers.image_brands_ocr.ImageBrandsToText": [[165, 3, 1, "", "brandsCoords"], [165, 2, 1, "", "clear"], [165, 3, 1, "", "confidenceCol"], [165, 3, 1, "", "confidenceThreshold"], [165, 2, 1, "", "copy"], [165, 3, 1, "", "downloadModelData"], [165, 2, 1, "", "explainParam"], [165, 2, 1, "", "explainParams"], [165, 2, 1, "", "extractParamMap"], [165, 2, 1, "", "getInputCol"], [165, 2, 1, "", "getOrDefault"], [165, 2, 1, "", "getOutputCol"], [165, 2, 1, "", "getParam"], [165, 2, 1, "", "hasDefault"], [165, 2, 1, "", "hasParam"], [165, 3, 1, "", "ignoreResolution"], [165, 3, 1, "", "includeConfidence"], [165, 3, 1, "", "inputCol"], [165, 2, 1, "", "isDefined"], [165, 2, 1, "", "isSet"], [165, 3, 1, "", "language"], [165, 2, 1, "", "load"], [165, 3, 1, "", "modelData"], [165, 3, 1, "", "modelType"], [165, 3, 1, "", "ocrEngineMode"], [165, 3, 1, "", "ocrParams"], [165, 3, 1, "", "outputCol"], [165, 3, 1, "", "pageIteratorLevel"], [165, 3, 1, "", "pageSegMode"], [165, 3, 1, "", "positionsCol"], [165, 2, 1, "", "read"], [165, 2, 1, "", "save"], [165, 2, 1, "", "set"], [165, 2, 1, "", "setBrandsCoords"], [165, 2, 1, "", "setConfidenceCol"], [165, 2, 1, "", "setConfidenceThreshold"], [165, 2, 1, "", "setDownloadModelData"], [165, 2, 1, "", "setIgnoreResolution"], [165, 2, 1, "", "setIncludeConfidence"], [165, 2, 1, "", "setInputCol"], [165, 2, 1, "", "setLanguage"], [165, 2, 1, "", "setModelData"], [165, 2, 1, "", "setModelType"], [165, 2, 1, "", "setOcrEngineMode"], [165, 2, 1, "", "setOcrParams"], [165, 2, 1, "", "setOutputCol"], [165, 2, 1, "", "setPageIteratorLevel"], [165, 2, 1, "", "setPageSegMode"], [165, 2, 1, "", "setPositionsCol"], [165, 2, 1, "", "setTextCol"], [165, 2, 1, "", "setUseTess4j"], [165, 3, 1, "", "textCol"], [165, 2, 1, "", "transform"], [165, 3, 1, "", "uid"], [165, 3, 1, "", "useTess4j"], [165, 2, 1, "", "write"]], "sparkocr.transformers.image_cells_to_text_table": [[166, 1, 1, "", "ImageCellsToTextTable"]], "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable": [[166, 3, 1, "", "cellsCol"], [166, 2, 1, "", "clear"], [166, 2, 1, "", "copy"], [166, 3, 1, "", "downloadModelData"], [166, 2, 1, "", "explainParam"], [166, 2, 1, "", "explainParams"], [166, 2, 1, "", "extractParamMap"], [166, 2, 1, "", "getInputCol"], [166, 2, 1, "", "getOrDefault"], [166, 2, 1, "", "getOutputCol"], [166, 2, 1, "", "getParam"], [166, 2, 1, "", "hasDefault"], [166, 2, 1, "", "hasParam"], [166, 3, 1, "", "inputCol"], [166, 2, 1, "", "isDefined"], [166, 2, 1, "", "isSet"], [166, 3, 1, "", "language"], [166, 2, 1, "", "load"], [166, 3, 1, "", "margin"], [166, 3, 1, "", "modelData"], [166, 3, 1, "", "modelType"], [166, 3, 1, "", "ocrEngineMode"], [166, 3, 1, "", "ocrParams"], [166, 3, 1, "", "outputCol"], [166, 3, 1, "", "outputFormat"], [166, 3, 1, "", "pageIteratorLevel"], [166, 3, 1, "", "pageSegMode"], [166, 2, 1, "", "read"], [166, 2, 1, "", "save"], [166, 2, 1, "", "set"], [166, 2, 1, "", "setCellsCol"], [166, 2, 1, "", "setDownloadModelData"], [166, 2, 1, "", "setInputCol"], [166, 2, 1, "", "setLanguage"], [166, 2, 1, "", "setMargin"], [166, 2, 1, "", "setModelData"], [166, 2, 1, "", "setModelType"], [166, 2, 1, "", "setOcrEngineMode"], [166, 2, 1, "", "setOcrParams"], [166, 2, 1, "", "setOutputCol"], [166, 2, 1, "", "setOutputFormat"], [166, 2, 1, "", "setPageIteratorLevel"], [166, 2, 1, "", "setPageSegMode"], [166, 2, 1, "", "setStrip"], [166, 2, 1, "", "setUseTess4j"], [166, 3, 1, "", "strip"], [166, 2, 1, "", "transform"], [166, 3, 1, "", "uid"], [166, 3, 1, "", "useTess4j"], [166, 2, 1, "", "write"]], "sparkocr.transformers.image_cropper": [[167, 1, 1, "", "ImageCropper"]], "sparkocr.transformers.image_cropper.ImageCropper": [[167, 2, 1, "", "clear"], [167, 2, 1, "", "copy"], [167, 3, 1, "", "cropRectangle"], [167, 3, 1, "", "cropSquareType"], [167, 2, 1, "", "explainParam"], [167, 2, 1, "", "explainParams"], [167, 2, 1, "", "extractParamMap"], [167, 2, 1, "", "getInputCol"], [167, 2, 1, "", "getOrDefault"], [167, 2, 1, "", "getOutputCol"], [167, 2, 1, "", "getParam"], [167, 2, 1, "", "hasDefault"], [167, 2, 1, "", "hasParam"], [167, 3, 1, "", "inputCol"], [167, 2, 1, "", "isDefined"], [167, 2, 1, "", "isSet"], [167, 2, 1, "", "load"], [167, 3, 1, "", "outputCol"], [167, 2, 1, "", "read"], [167, 2, 1, "", "save"], [167, 2, 1, "", "set"], [167, 2, 1, "", "setCropRectangle"], [167, 2, 1, "", "setCropSquareType"], [167, 2, 1, "", "setInputCol"], [167, 2, 1, "", "setOutputCol"], [167, 2, 1, "", "transform"], [167, 3, 1, "", "uid"], [167, 2, 1, "", "write"]], "sparkocr.transformers.image_draw_annotations": [[168, 1, 1, "", "ImageDrawAnnotations"]], "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations": [[168, 2, 1, "", "clear"], [168, 3, 1, "", "colorMap"], [168, 2, 1, "", "copy"], [168, 2, 1, "", "explainParam"], [168, 2, 1, "", "explainParams"], [168, 2, 1, "", "extractParamMap"], [168, 3, 1, "", "filledRect"], [168, 3, 1, "", "fontSize"], [168, 2, 1, "", "getInputCol"], [168, 2, 1, "", "getOrDefault"], [168, 2, 1, "", "getOutputCol"], [168, 2, 1, "", "getParam"], [168, 2, 1, "", "hasDefault"], [168, 2, 1, "", "hasParam"], [168, 3, 1, "", "inputChunksCol"], [168, 3, 1, "", "inputCol"], [168, 2, 1, "", "isDefined"], [168, 2, 1, "", "isSet"], [168, 3, 1, "", "lineWidth"], [168, 2, 1, "", "load"], [168, 3, 1, "", "originCol"], [168, 3, 1, "", "outputCol"], [168, 2, 1, "", "read"], [168, 2, 1, "", "save"], [168, 2, 1, "", "set"], [168, 2, 1, "", "setColorMap"], [168, 2, 1, "", "setFilledRect"], [168, 2, 1, "", "setFontSize"], [168, 2, 1, "", "setInputChunksCol"], [168, 2, 1, "", "setInputCol"], [168, 2, 1, "", "setLineWidth"], [168, 2, 1, "", "setOriginCol"], [168, 2, 1, "", "setOutputCol"], [168, 2, 1, "", "transform"], [168, 3, 1, "", "uid"], [168, 2, 1, "", "write"]], "sparkocr.transformers.image_draw_regions": [[169, 1, 1, "", "ImageDrawRegions"]], "sparkocr.transformers.image_draw_regions.ImageDrawRegions": [[169, 3, 1, "", "blackList"], [169, 2, 1, "", "clear"], [169, 2, 1, "", "copy"], [169, 3, 1, "", "displayMetadata"], [169, 3, 1, "", "dynamicColor"], [169, 2, 1, "", "explainParam"], [169, 2, 1, "", "explainParams"], [169, 2, 1, "", "extractParamMap"], [169, 3, 1, "", "filledRect"], [169, 3, 1, "", "fontName"], [169, 3, 1, "", "fontSize"], [169, 3, 1, "", "fontStyle"], [169, 2, 1, "", "getInputCol"], [169, 2, 1, "", "getOrDefault"], [169, 2, 1, "", "getOutputCol"], [169, 2, 1, "", "getParam"], [169, 2, 1, "", "hasDefault"], [169, 2, 1, "", "hasParam"], [169, 3, 1, "", "ignoreSchema"], [169, 3, 1, "", "inpaintedCol"], [169, 3, 1, "", "inputChunkMappingCol"], [169, 3, 1, "", "inputCol"], [169, 3, 1, "", "inputRegionsCol"], [169, 2, 1, "", "isDefined"], [169, 2, 1, "", "isSet"], [169, 3, 1, "", "lineWidth"], [169, 2, 1, "", "load"], [169, 3, 1, "", "originCol"], [169, 3, 1, "", "outputCol"], [169, 3, 1, "", "pageMatrixCol"], [169, 3, 1, "", "patchBackgroundColor"], [169, 3, 1, "", "patchImages"], [169, 3, 1, "", "patchTextColor"], [169, 2, 1, "", "read"], [169, 3, 1, "", "rectColor"], [169, 3, 1, "", "redactionEntityList"], [169, 2, 1, "", "save"], [169, 3, 1, "", "scaleBoundingBoxes"], [169, 2, 1, "", "set"], [169, 2, 1, "", "setBlackList"], [169, 2, 1, "", "setDisplayMetadata"], [169, 2, 1, "", "setDynamicColor"], [169, 2, 1, "", "setFilledRect"], [169, 2, 1, "", "setFontName"], [169, 2, 1, "", "setFontSize"], [169, 2, 1, "", "setFontStyle"], [169, 2, 1, "", "setInpaintedCol"], [169, 2, 1, "", "setInputChunkMappingCol"], [169, 2, 1, "", "setInputCol"], [169, 2, 1, "", "setInputRegionsCol"], [169, 2, 1, "", "setLineWidth"], [169, 2, 1, "", "setOriginCol"], [169, 2, 1, "", "setOutputCol"], [169, 2, 1, "", "setPatchBackgroundColor"], [169, 2, 1, "", "setPatchImages"], [169, 2, 1, "", "setPatchTextColor"], [169, 2, 1, "", "setRectColor"], [169, 2, 1, "", "setRedactionEntityList"], [169, 2, 1, "", "setScaleBoundingBoxes"], [169, 2, 1, "", "setSourceImageHeightCol"], [169, 2, 1, "", "setSourceImageWidthCol"], [169, 2, 1, "", "setUseContrastTextColor"], [169, 3, 1, "", "sourceImageHeightCol"], [169, 3, 1, "", "sourceImageWidthCol"], [169, 2, 1, "", "transform"], [169, 3, 1, "", "uid"], [169, 3, 1, "", "useContrastTextColor"], [169, 2, 1, "", "write"]], "sparkocr.transformers.image_enhance_contrast": [[170, 1, 1, "", "ImageEnhanceContrast"]], "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast": [[170, 2, 1, "", "clear"], [170, 3, 1, "", "clipLimit"], [170, 2, 1, "", "copy"], [170, 2, 1, "", "explainParam"], [170, 2, 1, "", "explainParams"], [170, 2, 1, "", "extractParamMap"], [170, 2, 1, "", "getClipLimit"], [170, 2, 1, "", "getInputCol"], [170, 2, 1, "", "getOrDefault"], [170, 2, 1, "", "getOutputCol"], [170, 2, 1, "", "getParam"], [170, 2, 1, "", "getTileGridSize"], [170, 2, 1, "", "hasDefault"], [170, 2, 1, "", "hasParam"], [170, 3, 1, "", "inputCol"], [170, 2, 1, "", "isDefined"], [170, 2, 1, "", "isSet"], [170, 3, 1, "", "keepInput"], [170, 2, 1, "", "load"], [170, 3, 1, "", "outputCol"], [170, 2, 1, "", "read"], [170, 2, 1, "", "save"], [170, 2, 1, "", "set"], [170, 2, 1, "", "setClipLimit"], [170, 2, 1, "", "setInputCol"], [170, 2, 1, "", "setKeepInput"], [170, 2, 1, "", "setOutputCol"], [170, 2, 1, "", "setParams"], [170, 2, 1, "", "setTileGridSize"], [170, 3, 1, "", "tileGridSize"], [170, 2, 1, "", "transform"], [170, 2, 1, "", "transform_image"], [170, 3, 1, "", "uid"], [170, 2, 1, "", "write"]], "sparkocr.transformers.image_erosion": [[171, 1, 1, "", "ImageErosion"]], "sparkocr.transformers.image_erosion.ImageErosion": [[171, 2, 1, "", "clear"], [171, 2, 1, "", "copy"], [171, 2, 1, "", "explainParam"], [171, 2, 1, "", "explainParams"], [171, 2, 1, "", "extractParamMap"], [171, 2, 1, "", "getInputCol"], [171, 2, 1, "", "getKernel"], [171, 2, 1, "", "getKernelShape"], [171, 2, 1, "", "getKernelSize"], [171, 2, 1, "", "getOrDefault"], [171, 2, 1, "", "getOutputCol"], [171, 2, 1, "", "getParam"], [171, 2, 1, "", "hasDefault"], [171, 2, 1, "", "hasParam"], [171, 3, 1, "", "inputCol"], [171, 2, 1, "", "isDefined"], [171, 2, 1, "", "isSet"], [171, 3, 1, "", "keepInput"], [171, 3, 1, "", "kernelShape"], [171, 3, 1, "", "kernelSize"], [171, 2, 1, "", "load"], [171, 3, 1, "", "outputCol"], [171, 2, 1, "", "read"], [171, 2, 1, "", "save"], [171, 2, 1, "", "set"], [171, 2, 1, "", "setInputCol"], [171, 2, 1, "", "setKeepInput"], [171, 2, 1, "", "setKernelShape"], [171, 2, 1, "", "setKernelSize"], [171, 2, 1, "", "setOutputCol"], [171, 2, 1, "", "setParams"], [171, 2, 1, "", "transform"], [171, 2, 1, "", "transform_image"], [171, 3, 1, "", "uid"], [171, 2, 1, "", "write"]], "sparkocr.transformers.image_gpu_transform": [[172, 1, 1, "", "GPUImageTransformer"]], "sparkocr.transformers.image_gpu_transform.GPUImageTransformer": [[172, 2, 1, "", "addDilateTransform"], [172, 2, 1, "", "addErodeTransform"], [172, 2, 1, "", "addHuangTransform"], [172, 2, 1, "", "addOtsuTransform"], [172, 2, 1, "", "addScalingTransform"], [172, 2, 1, "", "clear"], [172, 2, 1, "", "copy"], [172, 2, 1, "", "explainParam"], [172, 2, 1, "", "explainParams"], [172, 2, 1, "", "extractParamMap"], [172, 2, 1, "", "getInputCol"], [172, 2, 1, "", "getOrDefault"], [172, 2, 1, "", "getOutputCol"], [172, 2, 1, "", "getParam"], [172, 3, 1, "", "gpuName"], [172, 2, 1, "", "hasDefault"], [172, 2, 1, "", "hasParam"], [172, 3, 1, "", "imageType"], [172, 3, 1, "", "inputCol"], [172, 2, 1, "", "isDefined"], [172, 2, 1, "", "isSet"], [172, 2, 1, "", "load"], [172, 3, 1, "", "outputCol"], [172, 2, 1, "", "read"], [172, 2, 1, "", "save"], [172, 2, 1, "", "set"], [172, 2, 1, "", "setGPUName"], [172, 2, 1, "", "setImageType"], [172, 2, 1, "", "setInputCol"], [172, 2, 1, "", "setOutputCol"], [172, 2, 1, "", "setParams"], [172, 2, 1, "", "transform"], [172, 3, 1, "", "uid"], [172, 2, 1, "", "write"]], "sparkocr.transformers.image_handwritten_detector": [[173, 1, 1, "", "ImageHandwrittenDetector"]], "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector": [[173, 2, 1, "", "clear"], [173, 2, 1, "", "copy"], [173, 2, 1, "", "explainParam"], [173, 2, 1, "", "explainParams"], [173, 2, 1, "", "extractParamMap"], [173, 2, 1, "", "getInputCol"], [173, 2, 1, "", "getLabels"], [173, 2, 1, "", "getOrDefault"], [173, 2, 1, "", "getOutputCol"], [173, 2, 1, "", "getParam"], [173, 2, 1, "", "hasDefault"], [173, 2, 1, "", "hasParam"], [173, 3, 1, "", "inputCol"], [173, 2, 1, "", "isDefined"], [173, 2, 1, "", "isSet"], [173, 3, 1, "", "labels"], [173, 2, 1, "", "load"], [173, 2, 1, "", "loadOnnxModel"], [173, 3, 1, "", "name"], [173, 3, 1, "", "outputCol"], [173, 3, 1, "", "outputLabels"], [173, 2, 1, "", "pretrained"], [173, 2, 1, "", "read"], [173, 2, 1, "", "save"], [173, 3, 1, "", "scoreThreshold"], [173, 2, 1, "", "set"], [173, 2, 1, "", "setCaseSensitive"], [173, 2, 1, "", "setInputCol"], [173, 2, 1, "", "setLabels"], [173, 2, 1, "", "setOutputCol"], [173, 2, 1, "", "setOutputLabels"], [173, 2, 1, "", "setScoreThreshold"], [173, 2, 1, "", "transform"], [173, 3, 1, "", "uid"], [173, 2, 1, "", "write"]], "sparkocr.transformers.image_handwritten_text_recognizer": [[174, 1, 1, "", "ImageHandwrittenTextRecognizer"]], "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer": [[174, 2, 1, "", "clear"], [174, 2, 1, "", "copy"], [174, 2, 1, "", "explainParam"], [174, 2, 1, "", "explainParams"], [174, 2, 1, "", "extractParamMap"], [174, 2, 1, "", "getInputCol"], [174, 2, 1, "", "getOrDefault"], [174, 2, 1, "", "getOutputCol"], [174, 2, 1, "", "getParam"], [174, 2, 1, "", "hasDefault"], [174, 2, 1, "", "hasParam"], [174, 3, 1, "", "inputCol"], [174, 2, 1, "", "isDefined"], [174, 2, 1, "", "isSet"], [174, 2, 1, "", "load"], [174, 2, 1, "", "loadOnnxModel"], [174, 3, 1, "", "name"], [174, 3, 1, "", "outputCol"], [174, 2, 1, "", "pretrained"], [174, 2, 1, "", "set"], [174, 2, 1, "", "setInputCol"], [174, 2, 1, "", "setOutputCol"], [174, 2, 1, "", "transform"], [174, 3, 1, "", "uid"]], "sparkocr.transformers.image_homogenize_light": [[175, 1, 1, "", "ImageHomogenizeLight"]], "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight": [[175, 2, 1, "", "clear"], [175, 2, 1, "", "copy"], [175, 3, 1, "", "exp_in"], [175, 2, 1, "", "explainParam"], [175, 2, 1, "", "explainParams"], [175, 2, 1, "", "extractParamMap"], [175, 2, 1, "", "getExpIn"], [175, 2, 1, "", "getInputCol"], [175, 2, 1, "", "getOrDefault"], [175, 2, 1, "", "getOutputCol"], [175, 2, 1, "", "getParam"], [175, 2, 1, "", "getThreshold"], [175, 2, 1, "", "hasDefault"], [175, 2, 1, "", "hasParam"], [175, 2, 1, "", "image_homogenization"], [175, 3, 1, "", "inputCol"], [175, 2, 1, "", "isDefined"], [175, 2, 1, "", "isSet"], [175, 3, 1, "", "keepInput"], [175, 2, 1, "", "load"], [175, 3, 1, "", "outputCol"], [175, 2, 1, "", "process_bright"], [175, 2, 1, "", "process_dimmed"], [175, 2, 1, "", "read"], [175, 2, 1, "", "save"], [175, 2, 1, "", "set"], [175, 2, 1, "", "setExpIn"], [175, 2, 1, "", "setInputCol"], [175, 2, 1, "", "setKeepInput"], [175, 2, 1, "", "setOutputCol"], [175, 2, 1, "", "setParams"], [175, 2, 1, "", "setThreshold"], [175, 3, 1, "", "threshold"], [175, 2, 1, "", "transform"], [175, 2, 1, "", "transform_image"], [175, 3, 1, "", "uid"], [175, 2, 1, "", "write"]], "sparkocr.transformers.image_layout_analyzer": [[176, 1, 1, "", "ImageLayoutAnalyzer"]], "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer": [[176, 2, 1, "", "clear"], [176, 2, 1, "", "copy"], [176, 3, 1, "", "downloadModelData"], [176, 2, 1, "", "explainParam"], [176, 2, 1, "", "explainParams"], [176, 2, 1, "", "extractParamMap"], [176, 2, 1, "", "getInputCol"], [176, 2, 1, "", "getOrDefault"], [176, 2, 1, "", "getOutputCol"], [176, 2, 1, "", "getParam"], [176, 2, 1, "", "hasDefault"], [176, 2, 1, "", "hasParam"], [176, 3, 1, "", "inputCol"], [176, 2, 1, "", "isDefined"], [176, 2, 1, "", "isSet"], [176, 3, 1, "", "language"], [176, 2, 1, "", "load"], [176, 3, 1, "", "modelData"], [176, 3, 1, "", "modelType"], [176, 3, 1, "", "ocrEngineMode"], [176, 3, 1, "", "outputCol"], [176, 3, 1, "", "pageIteratorLevel"], [176, 3, 1, "", "pageSegMode"], [176, 2, 1, "", "read"], [176, 2, 1, "", "save"], [176, 2, 1, "", "set"], [176, 2, 1, "", "setDownloadModelData"], [176, 2, 1, "", "setInputCol"], [176, 2, 1, "", "setLanguage"], [176, 2, 1, "", "setModelData"], [176, 2, 1, "", "setModelType"], [176, 2, 1, "", "setOcrEngineMode"], [176, 2, 1, "", "setOutputCol"], [176, 2, 1, "", "setPageIteratorLevel"], [176, 2, 1, "", "setPageSegMode"], [176, 2, 1, "", "setUseTess4j"], [176, 2, 1, "", "transform"], [176, 3, 1, "", "uid"], [176, 3, 1, "", "useTess4j"], [176, 2, 1, "", "write"]], "sparkocr.transformers.image_morphology_operartion1": [[177, 1, 1, "", "ImageMorphologyOperation1"]], "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1": [[177, 2, 1, "", "clear"], [177, 2, 1, "", "copy"], [177, 2, 1, "", "explainParam"], [177, 2, 1, "", "explainParams"], [177, 2, 1, "", "extractParamMap"], [177, 2, 1, "", "getInputCol"], [177, 2, 1, "", "getOrDefault"], [177, 2, 1, "", "getOutputCol"], [177, 2, 1, "", "getParam"], [177, 2, 1, "", "hasDefault"], [177, 2, 1, "", "hasParam"], [177, 3, 1, "", "inputCol"], [177, 2, 1, "", "isDefined"], [177, 2, 1, "", "isSet"], [177, 3, 1, "", "kernelSize"], [177, 2, 1, "", "load"], [177, 3, 1, "", "operation"], [177, 3, 1, "", "outputCol"], [177, 2, 1, "", "read"], [177, 2, 1, "", "save"], [177, 2, 1, "", "set"], [177, 2, 1, "", "setInputCol"], [177, 2, 1, "", "setKernelSize"], [177, 2, 1, "", "setOperation"], [177, 2, 1, "", "setOutputCol"], [177, 2, 1, "", "transform"], [177, 3, 1, "", "uid"], [177, 2, 1, "", "write"]], "sparkocr.transformers.image_morphology_operation": [[178, 1, 1, "", "ImageMorphologyOperation"]], "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation": [[178, 3, 1, "", "binary"], [178, 2, 1, "", "clear"], [178, 2, 1, "", "copy"], [178, 2, 1, "", "explainParam"], [178, 2, 1, "", "explainParams"], [178, 2, 1, "", "extractParamMap"], [178, 2, 1, "", "getBinary"], [178, 2, 1, "", "getInputCol"], [178, 2, 1, "", "getKernel"], [178, 2, 1, "", "getKernelShape"], [178, 2, 1, "", "getKernelSize"], [178, 2, 1, "", "getOperation"], [178, 2, 1, "", "getOrDefault"], [178, 2, 1, "", "getOutputCol"], [178, 2, 1, "", "getParam"], [178, 2, 1, "", "hasDefault"], [178, 2, 1, "", "hasParam"], [178, 3, 1, "", "inputCol"], [178, 2, 1, "", "isDefined"], [178, 2, 1, "", "isSet"], [178, 3, 1, "", "keepInput"], [178, 3, 1, "", "kernelShape"], [178, 3, 1, "", "kernelSize"], [178, 2, 1, "", "load"], [178, 3, 1, "", "operation"], [178, 3, 1, "", "outputCol"], [178, 2, 1, "", "read"], [178, 2, 1, "", "save"], [178, 2, 1, "", "set"], [178, 2, 1, "", "setBinary"], [178, 2, 1, "", "setInputCol"], [178, 2, 1, "", "setKeepInput"], [178, 2, 1, "", "setKernelShape"], [178, 2, 1, "", "setKernelSize"], [178, 2, 1, "", "setOperation"], [178, 2, 1, "", "setOutputCol"], [178, 2, 1, "", "setParams"], [178, 2, 1, "", "transform"], [178, 2, 1, "", "transform_image"], [178, 3, 1, "", "uid"], [178, 2, 1, "", "write"]], "sparkocr.transformers.image_noise_scorer": [[179, 1, 1, "", "ImageNoiseScorer"]], "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer": [[179, 3, 1, "", "byRegions"], [179, 2, 1, "", "clear"], [179, 2, 1, "", "copy"], [179, 2, 1, "", "explainParam"], [179, 2, 1, "", "explainParams"], [179, 2, 1, "", "extractParamMap"], [179, 2, 1, "", "getInputCol"], [179, 2, 1, "", "getOrDefault"], [179, 2, 1, "", "getOutputCol"], [179, 2, 1, "", "getParam"], [179, 2, 1, "", "hasDefault"], [179, 2, 1, "", "hasParam"], [179, 3, 1, "", "inputCol"], [179, 3, 1, "", "inputRegionsCol"], [179, 2, 1, "", "isDefined"], [179, 2, 1, "", "isSet"], [179, 2, 1, "", "load"], [179, 3, 1, "", "method"], [179, 3, 1, "", "outputCol"], [179, 2, 1, "", "read"], [179, 2, 1, "", "save"], [179, 2, 1, "", "set"], [179, 2, 1, "", "setByRegions"], [179, 2, 1, "", "setInputCol"], [179, 2, 1, "", "setInputRegionsCol"], [179, 2, 1, "", "setMethod"], [179, 2, 1, "", "setOutputCol"], [179, 2, 1, "", "transform"], [179, 3, 1, "", "uid"], [179, 2, 1, "", "write"]], "sparkocr.transformers.image_remove_background": [[180, 1, 1, "", "ImageRemoveBackground"]], "sparkocr.transformers.image_remove_background.ImageRemoveBackground": [[180, 3, 1, "", "bl"], [180, 2, 1, "", "clear"], [180, 2, 1, "", "copy"], [180, 2, 1, "", "explainParam"], [180, 2, 1, "", "explainParams"], [180, 2, 1, "", "extractParamMap"], [180, 2, 1, "", "getBL"], [180, 2, 1, "", "getInputCol"], [180, 2, 1, "", "getOrDefault"], [180, 2, 1, "", "getOutputCol"], [180, 2, 1, "", "getParam"], [180, 2, 1, "", "hasDefault"], [180, 2, 1, "", "hasParam"], [180, 2, 1, "", "img_threshold"], [180, 3, 1, "", "inputCol"], [180, 2, 1, "", "isDefined"], [180, 2, 1, "", "isSet"], [180, 3, 1, "", "keepInput"], [180, 2, 1, "", "load"], [180, 2, 1, "", "merge"], [180, 3, 1, "", "outputCol"], [180, 2, 1, "", "read"], [180, 2, 1, "", "save"], [180, 2, 1, "", "scale"], [180, 2, 1, "", "set"], [180, 2, 1, "", "setBL"], [180, 2, 1, "", "setInputCol"], [180, 2, 1, "", "setKeepInput"], [180, 2, 1, "", "setOutputCol"], [180, 2, 1, "", "setParams"], [180, 2, 1, "", "transform"], [180, 2, 1, "", "transform_image"], [180, 3, 1, "", "uid"], [180, 2, 1, "", "write"]], "sparkocr.transformers.image_remove_glare": [[181, 1, 1, "", "ImageRemoveGlare"]], "sparkocr.transformers.image_remove_glare.ImageRemoveGlare": [[181, 2, 1, "", "clear"], [181, 2, 1, "", "copy"], [181, 2, 1, "", "explainParam"], [181, 2, 1, "", "explainParams"], [181, 2, 1, "", "extractParamMap"], [181, 2, 1, "", "getInputCol"], [181, 2, 1, "", "getOrDefault"], [181, 2, 1, "", "getOutputCol"], [181, 2, 1, "", "getParam"], [181, 2, 1, "", "hasDefault"], [181, 2, 1, "", "hasParam"], [181, 3, 1, "", "inputCol"], [181, 2, 1, "", "isDefined"], [181, 2, 1, "", "isSet"], [181, 3, 1, "", "keepInput"], [181, 2, 1, "", "load"], [181, 3, 1, "", "outputCol"], [181, 2, 1, "", "read"], [181, 2, 1, "", "save"], [181, 2, 1, "", "set"], [181, 2, 1, "", "setInputCol"], [181, 2, 1, "", "setKeepInput"], [181, 2, 1, "", "setOutputCol"], [181, 2, 1, "", "setParams"], [181, 2, 1, "", "transform"], [181, 2, 1, "", "transform_image"], [181, 3, 1, "", "uid"], [181, 2, 1, "", "write"]], "sparkocr.transformers.image_remove_objects": [[182, 4, 1, "", "DOT_RATIO"], [182, 1, 1, "", "ImageRemoveObjects"], [182, 4, 1, "", "POINT_SIZE"]], "sparkocr.transformers.image_remove_objects.ImageRemoveObjects": [[182, 2, 1, "", "clear"], [182, 3, 1, "", "connectivityHole"], [182, 3, 1, "", "connectivityMaxObject"], [182, 3, 1, "", "connectivityObject"], [182, 2, 1, "", "copy"], [182, 2, 1, "", "explainParam"], [182, 2, 1, "", "explainParams"], [182, 2, 1, "", "extractParamMap"], [182, 2, 1, "", "getConnectivityHole"], [182, 2, 1, "", "getConnectivityMaxObject"], [182, 2, 1, "", "getConnectivityObject"], [182, 2, 1, "", "getInputCol"], [182, 2, 1, "", "getMaxSizeObject"], [182, 2, 1, "", "getMinSizeFont"], [182, 2, 1, "", "getMinSizeHole"], [182, 2, 1, "", "getMinSizeObject"], [182, 2, 1, "", "getOrDefault"], [182, 2, 1, "", "getOutputCol"], [182, 2, 1, "", "getParam"], [182, 2, 1, "", "hasDefault"], [182, 2, 1, "", "hasParam"], [182, 3, 1, "", "inputCol"], [182, 2, 1, "", "isDefined"], [182, 2, 1, "", "isSet"], [182, 3, 1, "", "keepInput"], [182, 2, 1, "", "load"], [182, 3, 1, "", "maxSizeObject"], [182, 3, 1, "", "minSizeFont"], [182, 3, 1, "", "minSizeHole"], [182, 3, 1, "", "minSizeObject"], [182, 3, 1, "", "outputCol"], [182, 2, 1, "", "read"], [182, 2, 1, "", "save"], [182, 2, 1, "", "set"], [182, 2, 1, "", "setConnectivityHole"], [182, 2, 1, "", "setConnectivityMaxObject"], [182, 2, 1, "", "setConnectivityObject"], [182, 2, 1, "", "setInputCol"], [182, 2, 1, "", "setKeepInput"], [182, 2, 1, "", "setMaxSizeObject"], [182, 2, 1, "", "setMinSizeFont"], [182, 2, 1, "", "setMinSizeHole"], [182, 2, 1, "", "setMinSizeObject"], [182, 2, 1, "", "setOutputCol"], [182, 2, 1, "", "setParams"], [182, 2, 1, "", "transform"], [182, 2, 1, "", "transform_image"], [182, 3, 1, "", "uid"], [182, 2, 1, "", "write"]], "sparkocr.transformers.image_scaler": [[183, 1, 1, "", "ImageScaler"]], "sparkocr.transformers.image_scaler.ImageScaler": [[183, 2, 1, "", "clear"], [183, 2, 1, "", "copy"], [183, 2, 1, "", "explainParam"], [183, 2, 1, "", "explainParams"], [183, 2, 1, "", "extractParamMap"], [183, 2, 1, "", "getInputCol"], [183, 2, 1, "", "getOrDefault"], [183, 2, 1, "", "getOutputCol"], [183, 2, 1, "", "getParam"], [183, 2, 1, "", "hasDefault"], [183, 2, 1, "", "hasParam"], [183, 3, 1, "", "height"], [183, 3, 1, "", "heightCol"], [183, 3, 1, "", "inputCol"], [183, 2, 1, "", "isDefined"], [183, 2, 1, "", "isSet"], [183, 3, 1, "", "keepRatio"], [183, 2, 1, "", "load"], [183, 3, 1, "", "outputCol"], [183, 2, 1, "", "read"], [183, 2, 1, "", "save"], [183, 3, 1, "", "scaleFactor"], [183, 2, 1, "", "set"], [183, 2, 1, "", "setHeight"], [183, 2, 1, "", "setHeightCol"], [183, 2, 1, "", "setInputCol"], [183, 2, 1, "", "setKeepRatio"], [183, 2, 1, "", "setOutputCol"], [183, 2, 1, "", "setScaleFactor"], [183, 2, 1, "", "setWidth"], [183, 2, 1, "", "setWidthCol"], [183, 2, 1, "", "transform"], [183, 3, 1, "", "uid"], [183, 3, 1, "", "width"], [183, 3, 1, "", "widthCol"], [183, 2, 1, "", "write"]], "sparkocr.transformers.image_skew_corrector": [[184, 1, 1, "", "ImageSkewCorrector"]], "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector": [[184, 3, 1, "", "automaticSkewCorrection"], [184, 2, 1, "", "clear"], [184, 2, 1, "", "copy"], [184, 2, 1, "", "explainParam"], [184, 2, 1, "", "explainParams"], [184, 2, 1, "", "extractParamMap"], [184, 2, 1, "", "getInputCol"], [184, 2, 1, "", "getOrDefault"], [184, 2, 1, "", "getOutputCol"], [184, 2, 1, "", "getParam"], [184, 3, 1, "", "halfAngle"], [184, 2, 1, "", "hasDefault"], [184, 2, 1, "", "hasParam"], [184, 3, 1, "", "imageType"], [184, 3, 1, "", "inputCol"], [184, 2, 1, "", "isDefined"], [184, 2, 1, "", "isSet"], [184, 2, 1, "", "load"], [184, 3, 1, "", "outputCol"], [184, 2, 1, "", "read"], [184, 3, 1, "", "resolution"], [184, 3, 1, "", "rotationAngle"], [184, 2, 1, "", "save"], [184, 2, 1, "", "set"], [184, 2, 1, "", "setAutomaticSkewCorrection"], [184, 2, 1, "", "setHalfAngle"], [184, 2, 1, "", "setImageType"], [184, 2, 1, "", "setInputCol"], [184, 2, 1, "", "setOutputCol"], [184, 2, 1, "", "setResolution"], [184, 2, 1, "", "setRotationAngle"], [184, 2, 1, "", "transform"], [184, 3, 1, "", "uid"], [184, 2, 1, "", "write"]], "sparkocr.transformers.image_split_regions": [[185, 1, 1, "", "ImageSplitRegions"]], "sparkocr.transformers.image_split_regions.ImageSplitRegions": [[185, 2, 1, "", "clear"], [185, 2, 1, "", "copy"], [185, 3, 1, "", "dropCols"], [185, 2, 1, "", "explainParam"], [185, 2, 1, "", "explainParams"], [185, 2, 1, "", "extractParamMap"], [185, 2, 1, "", "getInputCol"], [185, 2, 1, "", "getOrDefault"], [185, 2, 1, "", "getOutputCol"], [185, 2, 1, "", "getParam"], [185, 2, 1, "", "hasDefault"], [185, 2, 1, "", "hasParam"], [185, 3, 1, "", "imageType"], [185, 3, 1, "", "inputCol"], [185, 3, 1, "", "inputRegionsCol"], [185, 2, 1, "", "isDefined"], [185, 2, 1, "", "isSet"], [185, 2, 1, "", "load"], [185, 3, 1, "", "outputCol"], [185, 2, 1, "", "read"], [185, 2, 1, "", "save"], [185, 2, 1, "", "set"], [185, 2, 1, "", "setDropCols"], [185, 2, 1, "", "setImageType"], [185, 2, 1, "", "setInputCol"], [185, 2, 1, "", "setInputRegionsCol"], [185, 2, 1, "", "setOutputCol"], [185, 2, 1, "", "transform"], [185, 3, 1, "", "uid"], [185, 2, 1, "", "write"]], "sparkocr.transformers.image_table_cell_detector": [[186, 1, 1, "", "ImageTableCellDetector"], [186, 5, 1, "", "cut_header"], [186, 5, 1, "", "detect_lines"], [186, 5, 1, "", "get_cells_opencv"], [186, 4, 1, "", "morph_default_params"], [186, 5, 1, "", "normalize_image_size"], [186, 5, 1, "", "remove_lines"]], "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector": [[186, 3, 1, "", "CELL_DETECTION_ALGOS"], [186, 3, 1, "", "algoParams"], [186, 3, 1, "", "algoType"], [186, 2, 1, "", "clear"], [186, 2, 1, "", "copy"], [186, 2, 1, "", "createTransformFunc"], [186, 3, 1, "", "drawDetectedLines"], [186, 2, 1, "", "explainParam"], [186, 2, 1, "", "explainParams"], [186, 2, 1, "", "extractParamMap"], [186, 2, 1, "", "getAlgoParams"], [186, 2, 1, "", "getAlgoType"], [186, 2, 1, "", "getDrawDetectedLines"], [186, 2, 1, "", "getInputCol"], [186, 2, 1, "", "getKeepOriginalLines"], [186, 2, 1, "", "getOrDefault"], [186, 2, 1, "", "getOutputCol"], [186, 2, 1, "", "getOutputImageCol"], [186, 2, 1, "", "getParam"], [186, 2, 1, "", "get_cells"], [186, 2, 1, "", "get_cells_morph"], [186, 2, 1, "", "hasDefault"], [186, 2, 1, "", "hasParam"], [186, 3, 1, "", "inputCol"], [186, 2, 1, "", "isDefined"], [186, 2, 1, "", "isSet"], [186, 3, 1, "", "keepInput"], [186, 3, 1, "", "keepOriginalLines"], [186, 2, 1, "", "load"], [186, 3, 1, "", "name"], [186, 3, 1, "", "outputCol"], [186, 3, 1, "", "outputImageCol"], [186, 2, 1, "", "read"], [186, 2, 1, "", "save"], [186, 2, 1, "", "set"], [186, 2, 1, "", "setAlgoParams"], [186, 2, 1, "", "setAlgoType"], [186, 2, 1, "", "setDrawDetectedLines"], [186, 2, 1, "", "setInputCol"], [186, 2, 1, "", "setKeepInput"], [186, 2, 1, "", "setKeepOriginalLines"], [186, 2, 1, "", "setOutputCol"], [186, 2, 1, "", "setOutputImageCol"], [186, 2, 1, "", "transform"], [186, 3, 1, "", "uid"], [186, 2, 1, "", "write"]], "sparkocr.transformers.image_table_detector": [[187, 1, 1, "", "ImageTableDetector"]], "sparkocr.transformers.image_table_detector.ImageTableDetector": [[187, 3, 1, "", "applyCorrection"], [187, 2, 1, "", "clear"], [187, 2, 1, "", "copy"], [187, 2, 1, "", "explainParam"], [187, 2, 1, "", "explainParams"], [187, 2, 1, "", "extractParamMap"], [187, 2, 1, "", "getInputCol"], [187, 2, 1, "", "getOrDefault"], [187, 2, 1, "", "getOutputCol"], [187, 2, 1, "", "getParam"], [187, 2, 1, "", "hasDefault"], [187, 2, 1, "", "hasParam"], [187, 3, 1, "", "inputCol"], [187, 2, 1, "", "isDefined"], [187, 2, 1, "", "isSet"], [187, 3, 1, "", "labels"], [187, 2, 1, "", "load"], [187, 2, 1, "", "loadONNXModel"], [187, 3, 1, "", "name"], [187, 3, 1, "", "outputCol"], [187, 3, 1, "", "outputLabels"], [187, 2, 1, "", "pretrained"], [187, 2, 1, "", "read"], [187, 2, 1, "", "save"], [187, 2, 1, "", "saveModel"], [187, 3, 1, "", "scaleHeightToCol"], [187, 3, 1, "", "scaleWidthToCol"], [187, 3, 1, "", "scoreThreshold"], [187, 2, 1, "", "set"], [187, 2, 1, "", "setApplyCorrection"], [187, 2, 1, "", "setInputCol"], [187, 2, 1, "", "setLabels"], [187, 2, 1, "", "setOutputCol"], [187, 2, 1, "", "setOutputLabels"], [187, 2, 1, "", "setScaleHeightToCol"], [187, 2, 1, "", "setScaleWidthToCol"], [187, 2, 1, "", "setScoreThreshold"], [187, 2, 1, "", "transform"], [187, 3, 1, "", "uid"], [187, 2, 1, "", "write"]], "sparkocr.transformers.image_text_cleaner": [[188, 1, 1, "", "ImageTextCleaner"]], "sparkocr.transformers.image_text_cleaner.ImageTextCleaner": [[188, 3, 1, "", "binarize"], [188, 2, 1, "", "clear"], [188, 2, 1, "", "copy"], [188, 2, 1, "", "explainParam"], [188, 2, 1, "", "explainParams"], [188, 2, 1, "", "extractParamMap"], [188, 2, 1, "", "getInputCol"], [188, 2, 1, "", "getOrDefault"], [188, 2, 1, "", "getOutputCol"], [188, 2, 1, "", "getParam"], [188, 2, 1, "", "hasDefault"], [188, 2, 1, "", "hasParam"], [188, 3, 1, "", "height"], [188, 3, 1, "", "inputCol"], [188, 2, 1, "", "isDefined"], [188, 2, 1, "", "isSet"], [188, 3, 1, "", "linkThreshold"], [188, 2, 1, "", "load"], [188, 2, 1, "", "loadONNXModel"], [188, 3, 1, "", "medianBlur"], [188, 3, 1, "", "name"], [188, 3, 1, "", "outputCol"], [188, 3, 1, "", "padding"], [188, 2, 1, "", "pretrained"], [188, 2, 1, "", "read"], [188, 2, 1, "", "save"], [188, 2, 1, "", "saveModel"], [188, 2, 1, "", "set"], [188, 2, 1, "", "setBinarize"], [188, 2, 1, "", "setHeight"], [188, 2, 1, "", "setInputCol"], [188, 2, 1, "", "setLinkThreshold"], [188, 2, 1, "", "setMedianBlur"], [188, 2, 1, "", "setOutputCol"], [188, 2, 1, "", "setPadding"], [188, 2, 1, "", "setSizeThreshold"], [188, 2, 1, "", "setTextThreshold"], [188, 2, 1, "", "setWidth"], [188, 3, 1, "", "sizeThreshold"], [188, 3, 1, "", "textThreshold"], [188, 2, 1, "", "transform"], [188, 3, 1, "", "uid"], [188, 3, 1, "", "width"], [188, 2, 1, "", "write"]], "sparkocr.transformers.image_to_dicom": [[189, 1, 1, "", "ImageToDicom"]], "sparkocr.transformers.image_to_dicom.ImageToDicom": [[189, 2, 1, "", "clear"], [189, 2, 1, "", "copy"], [189, 2, 1, "", "explainParam"], [189, 2, 1, "", "explainParams"], [189, 2, 1, "", "extractParamMap"], [189, 2, 1, "", "getInputCol"], [189, 2, 1, "", "getOrDefault"], [189, 2, 1, "", "getOutputCol"], [189, 2, 1, "", "getParam"], [189, 2, 1, "", "hasDefault"], [189, 2, 1, "", "hasParam"], [189, 3, 1, "", "inputCol"], [189, 3, 1, "", "inputMetadata"], [189, 2, 1, "", "isDefined"], [189, 2, 1, "", "isSet"], [189, 3, 1, "", "keepInput"], [189, 2, 1, "", "load"], [189, 3, 1, "", "originCol"], [189, 3, 1, "", "outputCol"], [189, 2, 1, "", "read"], [189, 2, 1, "", "save"], [189, 2, 1, "", "set"], [189, 2, 1, "", "setInputCol"], [189, 2, 1, "", "setInputMetadata"], [189, 2, 1, "", "setKeepInput"], [189, 2, 1, "", "setOriginCol"], [189, 2, 1, "", "setOutputCol"], [189, 2, 1, "", "transform"], [189, 3, 1, "", "uid"], [189, 2, 1, "", "write"]], "sparkocr.transformers.image_to_hocr": [[190, 1, 1, "", "ImageToHocr"]], "sparkocr.transformers.image_to_hocr.ImageToHocr": [[190, 2, 1, "", "clear"], [190, 2, 1, "", "copy"], [190, 3, 1, "", "downloadModelData"], [190, 2, 1, "", "explainParam"], [190, 2, 1, "", "explainParams"], [190, 2, 1, "", "extractParamMap"], [190, 2, 1, "", "getInputCol"], [190, 2, 1, "", "getOrDefault"], [190, 2, 1, "", "getOutputCol"], [190, 2, 1, "", "getParam"], [190, 2, 1, "", "hasDefault"], [190, 2, 1, "", "hasParam"], [190, 3, 1, "", "ignoreResolution"], [190, 3, 1, "", "inputCol"], [190, 2, 1, "", "isDefined"], [190, 2, 1, "", "isSet"], [190, 3, 1, "", "language"], [190, 2, 1, "", "load"], [190, 3, 1, "", "modelData"], [190, 3, 1, "", "modelType"], [190, 3, 1, "", "ocrEngineMode"], [190, 3, 1, "", "ocrParams"], [190, 3, 1, "", "outputCol"], [190, 3, 1, "", "pageIteratorLevel"], [190, 3, 1, "", "pageSegMode"], [190, 2, 1, "", "read"], [190, 2, 1, "", "save"], [190, 2, 1, "", "set"], [190, 2, 1, "", "setDownloadModelData"], [190, 2, 1, "", "setIgnoreResolution"], [190, 2, 1, "", "setInputCol"], [190, 2, 1, "", "setLanguage"], [190, 2, 1, "", "setModelData"], [190, 2, 1, "", "setModelType"], [190, 2, 1, "", "setOcrEngineMode"], [190, 2, 1, "", "setOcrParams"], [190, 2, 1, "", "setOutputCol"], [190, 2, 1, "", "setPageIteratorLevel"], [190, 2, 1, "", "setPageSegMode"], [190, 2, 1, "", "setUseTess4j"], [190, 2, 1, "", "transform"], [190, 3, 1, "", "uid"], [190, 3, 1, "", "useTess4j"], [190, 2, 1, "", "write"]], "sparkocr.transformers.image_to_text": [[191, 1, 1, "", "ImageToText"]], "sparkocr.transformers.image_to_text.ImageToText": [[191, 2, 1, "", "clear"], [191, 3, 1, "", "confidenceCol"], [191, 3, 1, "", "confidenceThreshold"], [191, 2, 1, "", "copy"], [191, 3, 1, "", "downloadModelData"], [191, 2, 1, "", "explainParam"], [191, 2, 1, "", "explainParams"], [191, 2, 1, "", "extractParamMap"], [191, 2, 1, "", "getInputCol"], [191, 2, 1, "", "getOrDefault"], [191, 2, 1, "", "getOutputCol"], [191, 2, 1, "", "getParam"], [191, 2, 1, "", "hasDefault"], [191, 2, 1, "", "hasParam"], [191, 3, 1, "", "ignoreResolution"], [191, 3, 1, "", "includeConfidence"], [191, 3, 1, "", "inputCol"], [191, 2, 1, "", "isDefined"], [191, 2, 1, "", "isSet"], [191, 3, 1, "", "keepLayout"], [191, 3, 1, "", "language"], [191, 2, 1, "", "load"], [191, 3, 1, "", "modelData"], [191, 3, 1, "", "modelType"], [191, 3, 1, "", "ocrEngineMode"], [191, 3, 1, "", "ocrParams"], [191, 3, 1, "", "outputCol"], [191, 3, 1, "", "outputSpaceCharacterWidth"], [191, 3, 1, "", "pageIteratorLevel"], [191, 3, 1, "", "pageSegMode"], [191, 3, 1, "", "pdfCoordinates"], [191, 3, 1, "", "positionsCol"], [191, 2, 1, "", "read"], [191, 2, 1, "", "save"], [191, 2, 1, "", "set"], [191, 2, 1, "", "setConfidenceCol"], [191, 2, 1, "", "setConfidenceThreshold"], [191, 2, 1, "", "setDownloadModelData"], [191, 2, 1, "", "setIgnoreResolution"], [191, 2, 1, "", "setIncludeConfidence"], [191, 2, 1, "", "setInputCol"], [191, 2, 1, "", "setKeepLayout"], [191, 2, 1, "", "setLanguage"], [191, 2, 1, "", "setModelData"], [191, 2, 1, "", "setModelType"], [191, 2, 1, "", "setOcrEngineMode"], [191, 2, 1, "", "setOcrParams"], [191, 2, 1, "", "setOutputCol"], [191, 2, 1, "", "setOutputSpaceCharacterWidth"], [191, 2, 1, "", "setPageIteratorLevel"], [191, 2, 1, "", "setPageSegMode"], [191, 2, 1, "", "setPdfCoordinates"], [191, 2, 1, "", "setPositionsCol"], [191, 2, 1, "", "setUseTess4j"], [191, 2, 1, "", "setWithSpaces"], [191, 2, 1, "", "transform"], [191, 3, 1, "", "uid"], [191, 3, 1, "", "useTess4j"], [191, 3, 1, "", "withSpaces"], [191, 2, 1, "", "write"]], "sparkocr.transformers.image_transformer": [[192, 1, 1, "", "ImageTransformer"]], "sparkocr.transformers.image_transformer.ImageTransformer": [[192, 2, 1, "", "addAdaptiveThreshold"], [192, 2, 1, "", "addBlur"], [192, 2, 1, "", "addDilateTransform"], [192, 2, 1, "", "addErodeTransform"], [192, 2, 1, "", "addInvert"], [192, 2, 1, "", "addMedianBlur"], [192, 2, 1, "", "addOtsuTransform"], [192, 2, 1, "", "addRemoveObjects"], [192, 2, 1, "", "addScalingTransform"], [192, 2, 1, "", "clear"], [192, 2, 1, "", "copy"], [192, 2, 1, "", "explainParam"], [192, 2, 1, "", "explainParams"], [192, 2, 1, "", "extractParamMap"], [192, 2, 1, "", "getInputCol"], [192, 2, 1, "", "getOrDefault"], [192, 2, 1, "", "getOutputCol"], [192, 2, 1, "", "getParam"], [192, 2, 1, "", "hasDefault"], [192, 2, 1, "", "hasParam"], [192, 3, 1, "", "imageType"], [192, 3, 1, "", "inputCol"], [192, 2, 1, "", "isDefined"], [192, 2, 1, "", "isSet"], [192, 2, 1, "", "load"], [192, 3, 1, "", "outputCol"], [192, 2, 1, "", "read"], [192, 2, 1, "", "save"], [192, 2, 1, "", "set"], [192, 2, 1, "", "setImageType"], [192, 2, 1, "", "setInputCol"], [192, 2, 1, "", "setOutputCol"], [192, 2, 1, "", "setParams"], [192, 2, 1, "", "transform"], [192, 3, 1, "", "uid"], [192, 2, 1, "", "write"]], "sparkocr.transformers.inpainting": [[194, 0, 0, "-", "image_inpainting"]], "sparkocr.transformers.inpainting.image_inpainting": [[194, 1, 1, "", "ImageInpainting"], [194, 1, 1, "", "ImageInpaintingWriter"]], "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting": [[194, 3, 1, "", "InferenceCls"], [194, 2, 1, "", "clear"], [194, 2, 1, "", "copy"], [194, 2, 1, "", "explainParam"], [194, 2, 1, "", "explainParams"], [194, 2, 1, "", "exploding_wrap"], [194, 2, 1, "", "extractJsonParams"], [194, 2, 1, "", "extractParamMap"], [194, 3, 1, "", "forceProcessing"], [194, 2, 1, "", "getInputCol"], [194, 2, 1, "", "getModelPath"], [194, 2, 1, "", "getOrDefault"], [194, 2, 1, "", "getOutputCol"], [194, 2, 1, "", "getParam"], [194, 2, 1, "", "hasDefault"], [194, 2, 1, "", "hasParam"], [194, 3, 1, "", "height"], [194, 2, 1, "", "inpaint_image"], [194, 3, 1, "", "inputCol"], [194, 3, 1, "", "inputRegionsCol"], [194, 3, 1, "", "instance"], [194, 2, 1, "", "isDefined"], [194, 2, 1, "", "isSet"], [194, 3, 1, "", "keepInput"], [194, 2, 1, "", "load"], [194, 2, 1, "", "load_model_objects"], [194, 3, 1, "", "name"], [194, 2, 1, "", "option"], [194, 3, 1, "", "optionMap"], [194, 3, 1, "", "originCol"], [194, 3, 1, "", "outputCol"], [194, 2, 1, "", "overwrite"], [194, 2, 1, "", "pretrained"], [194, 2, 1, "", "process_region_information"], [194, 2, 1, "", "read"], [194, 2, 1, "", "save"], [194, 2, 1, "", "saveImpl"], [194, 2, 1, "", "saveMetadata"], [194, 2, 1, "", "saveModel"], [194, 2, 1, "", "session"], [194, 2, 1, "", "set"], [194, 2, 1, "", "setForceProcessing"], [194, 2, 1, "", "setHeight"], [194, 2, 1, "", "setInputCol"], [194, 2, 1, "", "setInputRegionsCol"], [194, 2, 1, "", "setKeepInput"], [194, 2, 1, "", "setOriginCol"], [194, 2, 1, "", "setOutputCol"], [194, 2, 1, "", "setUseGPU"], [194, 2, 1, "", "setWidth"], [194, 3, 1, "", "shouldOverwrite"], [194, 2, 1, "", "transform"], [194, 2, 1, "", "transform_image"], [194, 3, 1, "", "uid"], [194, 3, 1, "", "useGPU"], [194, 3, 1, "", "width"], [194, 2, 1, "", "write"]], "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter": [[194, 2, 1, "", "extractJsonParams"], [194, 3, 1, "", "instance"], [194, 2, 1, "", "option"], [194, 3, 1, "", "optionMap"], [194, 2, 1, "", "overwrite"], [194, 2, 1, "", "save"], [194, 2, 1, "", "saveImpl"], [194, 2, 1, "", "saveMetadata"], [194, 2, 1, "", "session"], [194, 3, 1, "", "shouldOverwrite"]], "sparkocr.transformers.ner": [[196, 0, 0, "-", "hocr_to_features"], [198, 0, 0, "-", "visual_document_ner"], [199, 0, 0, "-", "visual_document_ner_geo"], [200, 0, 0, "-", "visual_document_ner_layoutlm_v1"], [201, 0, 0, "-", "visual_document_ner_lilt"]], "sparkocr.transformers.ner.hocr_to_features": [[196, 1, 1, "", "HocrToFeatures"]], "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures": [[196, 3, 1, "", "CLASSES"], [196, 3, 1, "", "CLASSES_VALID"], [196, 3, 1, "", "VOCA"], [196, 3, 1, "", "bio_class_idx_dic"], [196, 3, 1, "", "bio_class_names"], [196, 3, 1, "", "class_idx_dic"], [196, 3, 1, "", "class_names"], [196, 2, 1, "", "clear"], [196, 3, 1, "", "cls_token_id"], [196, 2, 1, "", "copy"], [196, 2, 1, "", "explainParam"], [196, 2, 1, "", "explainParams"], [196, 2, 1, "", "extractParamMap"], [196, 2, 1, "", "getInputCols"], [196, 2, 1, "", "getOrDefault"], [196, 2, 1, "", "getOutputCol"], [196, 2, 1, "", "getParam"], [196, 2, 1, "", "get_input_col"], [196, 2, 1, "", "getitem_geo"], [196, 2, 1, "", "hasDefault"], [196, 2, 1, "", "hasParam"], [196, 3, 1, "", "img_h"], [196, 3, 1, "", "img_w"], [196, 3, 1, "", "inputCols"], [196, 2, 1, "", "isDefined"], [196, 2, 1, "", "isSet"], [196, 3, 1, "", "keepInput"], [196, 2, 1, "", "load"], [196, 3, 1, "", "max_block_num"], [196, 3, 1, "", "max_seq_length"], [196, 3, 1, "", "outputCol"], [196, 3, 1, "", "pad_token_id"], [196, 2, 1, "", "read"], [196, 2, 1, "", "save"], [196, 3, 1, "", "sep_token_id"], [196, 2, 1, "", "set"], [196, 2, 1, "", "setInputCols"], [196, 2, 1, "", "setKeepInput"], [196, 2, 1, "", "setOutputCol"], [196, 2, 1, "", "to_geo"], [196, 2, 1, "", "tokens_to_funsd_json"], [196, 2, 1, "", "transform"], [196, 2, 1, "", "transform_hocr"], [196, 3, 1, "", "uid"], [196, 3, 1, "", "unk_token_id"], [196, 2, 1, "", "write"]], "sparkocr.transformers.ner.visual_document_ner": [[198, 1, 1, "", "VisualDocumentNer"]], "sparkocr.transformers.ner.visual_document_ner.VisualDocumentNer": [[198, 2, 1, "", "pretrained"]], "sparkocr.transformers.ner.visual_document_ner_geo": [[199, 1, 1, "", "VisualDocumentNerGeo"]], "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo": [[199, 2, 1, "", "clear"], [199, 2, 1, "", "copy"], [199, 2, 1, "", "explainParam"], [199, 2, 1, "", "explainParams"], [199, 2, 1, "", "extractParamMap"], [199, 2, 1, "", "getInputCols"], [199, 2, 1, "", "getOrDefault"], [199, 2, 1, "", "getOutputCol"], [199, 2, 1, "", "getParam"], [199, 2, 1, "", "hasDefault"], [199, 2, 1, "", "hasParam"], [199, 3, 1, "", "inputCols"], [199, 2, 1, "", "isDefined"], [199, 2, 1, "", "isSet"], [199, 3, 1, "", "labels"], [199, 2, 1, "", "load"], [199, 2, 1, "", "loadOnnxModel"], [199, 3, 1, "", "name"], [199, 3, 1, "", "outputCol"], [199, 2, 1, "", "pretrained"], [199, 2, 1, "", "read"], [199, 2, 1, "", "save"], [199, 2, 1, "", "saveModel"], [199, 2, 1, "", "set"], [199, 2, 1, "", "setInputCols"], [199, 2, 1, "", "setLabels"], [199, 2, 1, "", "setMaxSentenceLength"], [199, 2, 1, "", "setOutputCol"], [199, 2, 1, "", "setWhiteList"], [199, 2, 1, "", "transform"], [199, 3, 1, "", "uid"], [199, 3, 1, "", "whiteList"], [199, 2, 1, "", "write"]], "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1": [[200, 1, 1, "", "VisualDocumentNerLayoutLMv1"]], "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1": [[200, 3, 1, "", "caseSensitive"], [200, 2, 1, "", "clear"], [200, 2, 1, "", "copy"], [200, 2, 1, "", "explainParam"], [200, 2, 1, "", "explainParams"], [200, 2, 1, "", "extractParamMap"], [200, 2, 1, "", "getInputCols"], [200, 2, 1, "", "getOrDefault"], [200, 2, 1, "", "getParam"], [200, 2, 1, "", "hasDefault"], [200, 2, 1, "", "hasParam"], [200, 3, 1, "", "inputCols"], [200, 2, 1, "", "isDefined"], [200, 2, 1, "", "isSet"], [200, 3, 1, "", "labels"], [200, 2, 1, "", "load"], [200, 2, 1, "", "loadTFModel"], [200, 3, 1, "", "maxSentenceLength"], [200, 3, 1, "", "name"], [200, 3, 1, "", "outputCol"], [200, 2, 1, "", "pretrained"], [200, 2, 1, "", "read"], [200, 2, 1, "", "save"], [200, 2, 1, "", "set"], [200, 2, 1, "", "setCaseSensitive"], [200, 2, 1, "", "setInputCols"], [200, 2, 1, "", "setLabels"], [200, 2, 1, "", "setMaxSentenceLength"], [200, 2, 1, "", "setWhiteList"], [200, 2, 1, "", "transform"], [200, 3, 1, "", "uid"], [200, 3, 1, "", "whiteList"], [200, 2, 1, "", "write"]], "sparkocr.transformers.ner.visual_document_ner_lilt": [[201, 1, 1, "", "VisualDocumentNerLilt"]], "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt": [[201, 2, 1, "", "clear"], [201, 2, 1, "", "copy"], [201, 3, 1, "", "evalBatchSize"], [201, 3, 1, "", "evalSize"], [201, 3, 1, "", "evalSteps"], [201, 2, 1, "", "explainParam"], [201, 2, 1, "", "explainParams"], [201, 2, 1, "", "extractParamMap"], [201, 2, 1, "", "fit"], [201, 2, 1, "", "getInputCols"], [201, 2, 1, "", "getOrDefault"], [201, 2, 1, "", "getOutputCol"], [201, 2, 1, "", "getParam"], [201, 2, 1, "", "hasDefault"], [201, 2, 1, "", "hasParam"], [201, 3, 1, "", "inputCols"], [201, 2, 1, "", "isDefined"], [201, 2, 1, "", "isSet"], [201, 3, 1, "", "labelAllTokens"], [201, 3, 1, "", "labels"], [201, 3, 1, "", "learningRate"], [201, 2, 1, "", "load"], [201, 3, 1, "", "maxSentenceLength"], [201, 3, 1, "", "maxSteps"], [201, 3, 1, "", "name"], [201, 3, 1, "", "outputCol"], [201, 2, 1, "", "pretrained"], [201, 2, 1, "", "read"], [201, 3, 1, "", "removeCache"], [201, 2, 1, "", "save"], [201, 2, 1, "", "saveModel"], [201, 3, 1, "", "saveSteps"], [201, 2, 1, "", "set"], [201, 2, 1, "", "setEvalSize"], [201, 2, 1, "", "setEvalSteps"], [201, 2, 1, "", "setInputCols"], [201, 2, 1, "", "setLabelAllTokens"], [201, 2, 1, "", "setLabels"], [201, 2, 1, "", "setLearningRate"], [201, 2, 1, "", "setMaxSentenceLength"], [201, 2, 1, "", "setMaxSteps"], [201, 2, 1, "", "setMerges"], [201, 2, 1, "", "setMergesFile"], [201, 2, 1, "", "setOutputCol"], [201, 2, 1, "", "setRemoveCache"], [201, 2, 1, "", "setSaveSteps"], [201, 2, 1, "", "setStride"], [201, 2, 1, "", "setTrainBatchSize"], [201, 2, 1, "", "setVocabulary"], [201, 2, 1, "", "setVocabularyFile"], [201, 2, 1, "", "setWhiteList"], [201, 3, 1, "", "stride"], [201, 3, 1, "", "trainBatchSize"], [201, 2, 1, "", "transform"], [201, 3, 1, "", "uid"], [201, 3, 1, "", "whiteList"], [201, 2, 1, "", "write"]], "sparkocr.transformers.ner_output_cleaner": [[202, 1, 1, "", "NerOutputCleaner"]], "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner": [[202, 2, 1, "", "clear"], [202, 2, 1, "", "copy"], [202, 2, 1, "", "explainParam"], [202, 2, 1, "", "explainParams"], [202, 2, 1, "", "extractParamMap"], [202, 2, 1, "", "getInputCol"], [202, 2, 1, "", "getOrDefault"], [202, 2, 1, "", "getOutputCol"], [202, 2, 1, "", "getParam"], [202, 2, 1, "", "hasDefault"], [202, 2, 1, "", "hasParam"], [202, 3, 1, "", "ignoreSchema"], [202, 3, 1, "", "inputCol"], [202, 2, 1, "", "isDefined"], [202, 2, 1, "", "isSet"], [202, 2, 1, "", "load"], [202, 3, 1, "", "outputCol"], [202, 3, 1, "", "outputNerCol"], [202, 2, 1, "", "read"], [202, 2, 1, "", "save"], [202, 2, 1, "", "set"], [202, 2, 1, "", "setIgnoreSchema"], [202, 2, 1, "", "setInputCol"], [202, 2, 1, "", "setOutputCol"], [202, 2, 1, "", "setOutputNerCol"], [202, 2, 1, "", "transform"], [202, 3, 1, "", "uid"], [202, 2, 1, "", "write"]], "sparkocr.transformers.ocr_resource_downloader": [[203, 1, 1, "", "OcrResourceDownloader"]], "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader": [[203, 2, 1, "", "clearCache"], [203, 2, 1, "", "downloadEndpointModel"], [203, 2, 1, "", "downloadModel"], [203, 2, 1, "", "downloadModelDirectly"], [203, 2, 1, "", "downloadPipeline"], [203, 2, 1, "", "showAvailableAnnotators"], [203, 2, 1, "", "showPublicModels"], [203, 2, 1, "", "showPublicPipelines"], [203, 2, 1, "", "showUnCategorizedResources"]], "sparkocr.transformers.params": [[204, 1, 1, "", "HasForceProcessing"], [204, 1, 1, "", "HasImageType"], [204, 1, 1, "", "HasKeepInput"], [204, 1, 1, "", "HasOcr"]], "sparkocr.transformers.params.HasForceProcessing": [[204, 2, 1, "", "exploding_wrap"], [204, 3, 1, "", "forceProcessing"], [204, 2, 1, "", "setForceProcessing"]], "sparkocr.transformers.params.HasImageType": [[204, 2, 1, "", "clear"], [204, 2, 1, "", "copy"], [204, 2, 1, "", "explainParam"], [204, 2, 1, "", "explainParams"], [204, 2, 1, "", "extractParamMap"], [204, 2, 1, "", "getOrDefault"], [204, 2, 1, "", "getParam"], [204, 2, 1, "", "hasDefault"], [204, 2, 1, "", "hasParam"], [204, 3, 1, "", "imageType"], [204, 2, 1, "", "isDefined"], [204, 2, 1, "", "isSet"], [204, 2, 1, "", "set"], [204, 2, 1, "", "setImageType"], [204, 3, 1, "", "uid"]], "sparkocr.transformers.params.HasKeepInput": [[204, 2, 1, "", "clear"], [204, 2, 1, "", "copy"], [204, 2, 1, "", "explainParam"], [204, 2, 1, "", "explainParams"], [204, 2, 1, "", "extractParamMap"], [204, 2, 1, "", "getOrDefault"], [204, 2, 1, "", "getParam"], [204, 2, 1, "", "hasDefault"], [204, 2, 1, "", "hasParam"], [204, 2, 1, "", "isDefined"], [204, 2, 1, "", "isSet"], [204, 3, 1, "", "keepInput"], [204, 2, 1, "", "set"], [204, 2, 1, "", "setKeepInput"], [204, 3, 1, "", "uid"]], "sparkocr.transformers.params.HasOcr": [[204, 2, 1, "", "clear"], [204, 2, 1, "", "copy"], [204, 3, 1, "", "downloadModelData"], [204, 2, 1, "", "explainParam"], [204, 2, 1, "", "explainParams"], [204, 2, 1, "", "extractParamMap"], [204, 2, 1, "", "getOrDefault"], [204, 2, 1, "", "getParam"], [204, 2, 1, "", "hasDefault"], [204, 2, 1, "", "hasParam"], [204, 2, 1, "", "isDefined"], [204, 2, 1, "", "isSet"], [204, 3, 1, "", "language"], [204, 3, 1, "", "modelData"], [204, 3, 1, "", "modelType"], [204, 3, 1, "", "ocrEngineMode"], [204, 3, 1, "", "pageIteratorLevel"], [204, 3, 1, "", "pageSegMode"], [204, 2, 1, "", "set"], [204, 2, 1, "", "setDownloadModelData"], [204, 2, 1, "", "setLanguage"], [204, 2, 1, "", "setModelData"], [204, 2, 1, "", "setModelType"], [204, 2, 1, "", "setOcrEngineMode"], [204, 2, 1, "", "setPageIteratorLevel"], [204, 2, 1, "", "setPageSegMode"], [204, 2, 1, "", "setUseTess4j"], [204, 3, 1, "", "uid"], [204, 3, 1, "", "useTess4j"]], "sparkocr.transformers.pdf": [[205, 0, 0, "-", "image_to_pdf"], [206, 0, 0, "-", "image_to_text_pdf"], [208, 0, 0, "-", "pdf_assembler"], [209, 0, 0, "-", "pdf_draw_regions"], [210, 0, 0, "-", "pdf_to_form"], [211, 0, 0, "-", "pdf_to_hocr"], [212, 0, 0, "-", "pdf_to_image"], [213, 0, 0, "-", "pdf_to_text"], [214, 0, 0, "-", "pdf_to_text_table"], [215, 0, 0, "-", "text_to_pdf"]], "sparkocr.transformers.pdf.image_to_pdf": [[205, 1, 1, "", "ImageToPdf"]], "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf": [[205, 3, 1, "", "aggregatePages"], [205, 2, 1, "", "clear"], [205, 3, 1, "", "compression"], [205, 2, 1, "", "copy"], [205, 2, 1, "", "explainParam"], [205, 2, 1, "", "explainParams"], [205, 2, 1, "", "extractParamMap"], [205, 2, 1, "", "getInputCol"], [205, 2, 1, "", "getOrDefault"], [205, 2, 1, "", "getOutputCol"], [205, 2, 1, "", "getParam"], [205, 2, 1, "", "hasDefault"], [205, 2, 1, "", "hasParam"], [205, 3, 1, "", "inputCol"], [205, 2, 1, "", "isDefined"], [205, 2, 1, "", "isSet"], [205, 2, 1, "", "load"], [205, 3, 1, "", "originCol"], [205, 3, 1, "", "outputCol"], [205, 3, 1, "", "pageNumCol"], [205, 3, 1, "", "quality"], [205, 2, 1, "", "read"], [205, 3, 1, "", "resolution"], [205, 2, 1, "", "save"], [205, 2, 1, "", "set"], [205, 2, 1, "", "setAggregatePages"], [205, 2, 1, "", "setCompression"], [205, 2, 1, "", "setInputCol"], [205, 2, 1, "", "setOriginCol"], [205, 2, 1, "", "setOutputCol"], [205, 2, 1, "", "setPageNumCol"], [205, 2, 1, "", "setQuality"], [205, 2, 1, "", "setResolution"], [205, 2, 1, "", "transform"], [205, 3, 1, "", "uid"], [205, 2, 1, "", "write"]], "sparkocr.transformers.pdf.image_to_text_pdf": [[206, 1, 1, "", "ImageToTextPdf"]], "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf": [[206, 2, 1, "", "clear"], [206, 2, 1, "", "copy"], [206, 2, 1, "", "explainParam"], [206, 2, 1, "", "explainParams"], [206, 2, 1, "", "extractParamMap"], [206, 2, 1, "", "getInputCol"], [206, 2, 1, "", "getOrDefault"], [206, 2, 1, "", "getOutputCol"], [206, 2, 1, "", "getParam"], [206, 2, 1, "", "hasDefault"], [206, 2, 1, "", "hasParam"], [206, 3, 1, "", "inputCol"], [206, 2, 1, "", "isDefined"], [206, 2, 1, "", "isSet"], [206, 2, 1, "", "load"], [206, 3, 1, "", "ocrParams"], [206, 3, 1, "", "originCol"], [206, 3, 1, "", "outputCol"], [206, 3, 1, "", "pageNumCol"], [206, 2, 1, "", "read"], [206, 2, 1, "", "save"], [206, 2, 1, "", "set"], [206, 2, 1, "", "setInputCol"], [206, 2, 1, "", "setOcrParams"], [206, 2, 1, "", "setOriginCol"], [206, 2, 1, "", "setOutputCol"], [206, 2, 1, "", "setPageNumCol"], [206, 2, 1, "", "transform"], [206, 3, 1, "", "uid"], [206, 2, 1, "", "write"]], "sparkocr.transformers.pdf.pdf_assembler": [[208, 1, 1, "", "PdfAssembler"]], "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler": [[208, 2, 1, "", "clear"], [208, 2, 1, "", "copy"], [208, 2, 1, "", "explainParam"], [208, 2, 1, "", "explainParams"], [208, 2, 1, "", "extractParamMap"], [208, 2, 1, "", "getInputCol"], [208, 2, 1, "", "getOrDefault"], [208, 2, 1, "", "getOutputCol"], [208, 2, 1, "", "getParam"], [208, 2, 1, "", "hasDefault"], [208, 2, 1, "", "hasParam"], [208, 3, 1, "", "inputCol"], [208, 2, 1, "", "isDefined"], [208, 2, 1, "", "isSet"], [208, 2, 1, "", "load"], [208, 3, 1, "", "originCol"], [208, 3, 1, "", "outputCol"], [208, 3, 1, "", "pageNumCol"], [208, 2, 1, "", "read"], [208, 2, 1, "", "save"], [208, 2, 1, "", "set"], [208, 2, 1, "", "setInputCol"], [208, 2, 1, "", "setOriginCol"], [208, 2, 1, "", "setOutputCol"], [208, 2, 1, "", "setPageNumCol"], [208, 2, 1, "", "transform"], [208, 3, 1, "", "uid"], [208, 2, 1, "", "write"]], "sparkocr.transformers.pdf.pdf_draw_regions": [[209, 1, 1, "", "PdfDrawRegions"]], "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions": [[209, 2, 1, "", "clear"], [209, 2, 1, "", "copy"], [209, 2, 1, "", "explainParam"], [209, 2, 1, "", "explainParams"], [209, 2, 1, "", "extractParamMap"], [209, 2, 1, "", "getInputCol"], [209, 2, 1, "", "getOrDefault"], [209, 2, 1, "", "getOutputCol"], [209, 2, 1, "", "getParam"], [209, 2, 1, "", "hasDefault"], [209, 2, 1, "", "hasParam"], [209, 3, 1, "", "inputCol"], [209, 3, 1, "", "inputRegionsCol"], [209, 2, 1, "", "isDefined"], [209, 2, 1, "", "isSet"], [209, 3, 1, "", "lineWidth"], [209, 2, 1, "", "load"], [209, 3, 1, "", "originCol"], [209, 3, 1, "", "outputCol"], [209, 2, 1, "", "read"], [209, 2, 1, "", "save"], [209, 2, 1, "", "set"], [209, 2, 1, "", "setInputCol"], [209, 2, 1, "", "setInputRegionsCol"], [209, 2, 1, "", "setLineWidth"], [209, 2, 1, "", "setOriginCol"], [209, 2, 1, "", "setOutputCol"], [209, 2, 1, "", "transform"], [209, 3, 1, "", "uid"], [209, 2, 1, "", "write"]], "sparkocr.transformers.pdf.pdf_to_form": [[210, 1, 1, "", "PdfToForm"]], "sparkocr.transformers.pdf.pdf_to_form.PdfToForm": [[210, 2, 1, "", "clear"], [210, 2, 1, "", "copy"], [210, 2, 1, "", "explainParam"], [210, 2, 1, "", "explainParams"], [210, 2, 1, "", "extractParamMap"], [210, 2, 1, "", "getInputCol"], [210, 2, 1, "", "getOrDefault"], [210, 2, 1, "", "getOutputCol"], [210, 2, 1, "", "getParam"], [210, 2, 1, "", "hasDefault"], [210, 2, 1, "", "hasParam"], [210, 3, 1, "", "inputCol"], [210, 2, 1, "", "isDefined"], [210, 2, 1, "", "isSet"], [210, 3, 1, "", "keepInput"], [210, 2, 1, "", "load"], [210, 3, 1, "", "outputCol"], [210, 2, 1, "", "read"], [210, 2, 1, "", "save"], [210, 2, 1, "", "set"], [210, 2, 1, "", "setInputCol"], [210, 2, 1, "", "setKeepInput"], [210, 2, 1, "", "setOutputCol"], [210, 2, 1, "", "setUseFullyQualifiedName"], [210, 2, 1, "", "transform"], [210, 3, 1, "", "uid"], [210, 3, 1, "", "useFullyQualifiedName"], [210, 2, 1, "", "write"]], "sparkocr.transformers.pdf.pdf_to_hocr": [[211, 1, 1, "", "PdfToHocr"]], "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr": [[211, 2, 1, "", "clear"], [211, 2, 1, "", "copy"], [211, 2, 1, "", "explainParam"], [211, 2, 1, "", "explainParams"], [211, 2, 1, "", "extractParamMap"], [211, 2, 1, "", "getInputCol"], [211, 2, 1, "", "getOrDefault"], [211, 2, 1, "", "getOutputCol"], [211, 2, 1, "", "getParam"], [211, 2, 1, "", "hasDefault"], [211, 2, 1, "", "hasParam"], [211, 3, 1, "", "inputCol"], [211, 2, 1, "", "isDefined"], [211, 2, 1, "", "isSet"], [211, 3, 1, "", "keepOriginalEncoding"], [211, 2, 1, "", "load"], [211, 3, 1, "", "outputCol"], [211, 3, 1, "", "pageNumCol"], [211, 2, 1, "", "read"], [211, 2, 1, "", "save"], [211, 2, 1, "", "set"], [211, 2, 1, "", "setInputCol"], [211, 2, 1, "", "setKeepOriginalEncoding"], [211, 2, 1, "", "setOutputCol"], [211, 2, 1, "", "setPageNumCol"], [211, 2, 1, "", "setSort"], [211, 2, 1, "", "setStoreSplittedPdf"], [211, 2, 1, "", "setTextStripper"], [211, 3, 1, "", "sort"], [211, 3, 1, "", "textStripper"], [211, 2, 1, "", "transform"], [211, 3, 1, "", "uid"], [211, 2, 1, "", "write"]], "sparkocr.transformers.pdf.pdf_to_image": [[212, 1, 1, "", "PdfToImage"]], "sparkocr.transformers.pdf.pdf_to_image.PdfToImage": [[212, 3, 1, "", "binarization"], [212, 3, 1, "", "binarizationParams"], [212, 2, 1, "", "clear"], [212, 2, 1, "", "copy"], [212, 2, 1, "", "explainParam"], [212, 2, 1, "", "explainParams"], [212, 2, 1, "", "extractParamMap"], [212, 3, 1, "", "fallBackCol"], [212, 2, 1, "", "getInputCol"], [212, 2, 1, "", "getOrDefault"], [212, 2, 1, "", "getOutputCol"], [212, 2, 1, "", "getParam"], [212, 2, 1, "", "hasDefault"], [212, 2, 1, "", "hasParam"], [212, 3, 1, "", "imageType"], [212, 3, 1, "", "inputCol"], [212, 2, 1, "", "isDefined"], [212, 2, 1, "", "isSet"], [212, 3, 1, "", "keepInput"], [212, 2, 1, "", "load"], [212, 3, 1, "", "minSizeBeforeFallback"], [212, 3, 1, "", "originCol"], [212, 3, 1, "", "outputCol"], [212, 3, 1, "", "pageNumCol"], [212, 3, 1, "", "partitionNum"], [212, 3, 1, "", "partitionNumAfterSplit"], [212, 2, 1, "", "read"], [212, 3, 1, "", "resolution"], [212, 2, 1, "", "save"], [212, 2, 1, "", "set"], [212, 2, 1, "", "setBinarization"], [212, 2, 1, "", "setBinarizationParams"], [212, 2, 1, "", "setFallBackCol"], [212, 2, 1, "", "setImageType"], [212, 2, 1, "", "setInputCol"], [212, 2, 1, "", "setKeepInput"], [212, 2, 1, "", "setMinSizeBeforeFallback"], [212, 2, 1, "", "setOriginCol"], [212, 2, 1, "", "setOutputCol"], [212, 2, 1, "", "setPageNumCol"], [212, 2, 1, "", "setPartitionNum"], [212, 2, 1, "", "setPartitionNumAfterSplit"], [212, 2, 1, "", "setResolution"], [212, 2, 1, "", "setSplitNumBatch"], [212, 2, 1, "", "setSplitPage"], [212, 2, 1, "", "setSplittingStategy"], [212, 3, 1, "", "splitNumBatch"], [212, 3, 1, "", "splitPage"], [212, 3, 1, "", "splittingStategy"], [212, 2, 1, "", "transform"], [212, 3, 1, "", "uid"], [212, 2, 1, "", "write"]], "sparkocr.transformers.pdf.pdf_to_text": [[213, 1, 1, "", "PdfToText"]], "sparkocr.transformers.pdf.pdf_to_text.PdfToText": [[213, 2, 1, "", "clear"], [213, 2, 1, "", "copy"], [213, 2, 1, "", "explainParam"], [213, 2, 1, "", "explainParams"], [213, 3, 1, "", "extractCoordinates"], [213, 2, 1, "", "extractParamMap"], [213, 2, 1, "", "getInputCol"], [213, 2, 1, "", "getOrDefault"], [213, 2, 1, "", "getOutputCol"], [213, 2, 1, "", "getParam"], [213, 2, 1, "", "hasDefault"], [213, 2, 1, "", "hasParam"], [213, 3, 1, "", "inputCol"], [213, 2, 1, "", "isDefined"], [213, 2, 1, "", "isSet"], [213, 2, 1, "", "load"], [213, 3, 1, "", "normalizeLigatures"], [213, 3, 1, "", "onlyPageNum"], [213, 3, 1, "", "outputCol"], [213, 3, 1, "", "pageNumCol"], [213, 3, 1, "", "partitionNum"], [213, 2, 1, "", "read"], [213, 2, 1, "", "save"], [213, 2, 1, "", "set"], [213, 2, 1, "", "setExtractCoordinates"], [213, 2, 1, "", "setInputCol"], [213, 2, 1, "", "setNormalizeLigatures"], [213, 2, 1, "", "setOnlyPageNum"], [213, 2, 1, "", "setOutputCol"], [213, 2, 1, "", "setPageNumCol"], [213, 2, 1, "", "setPartitionNum"], [213, 2, 1, "", "setSort"], [213, 2, 1, "", "setSplitPage"], [213, 2, 1, "", "setStoreSplittedPdf"], [213, 2, 1, "", "setTextStripper"], [213, 3, 1, "", "sort"], [213, 3, 1, "", "splitPage"], [213, 3, 1, "", "storeSplittedPdf"], [213, 3, 1, "", "textStripper"], [213, 2, 1, "", "transform"], [213, 3, 1, "", "uid"], [213, 2, 1, "", "write"]], "sparkocr.transformers.pdf.pdf_to_text_table": [[214, 1, 1, "", "PdfToTextTable"]], "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable": [[214, 2, 1, "", "clear"], [214, 2, 1, "", "copy"], [214, 2, 1, "", "explainParam"], [214, 2, 1, "", "explainParams"], [214, 2, 1, "", "extractParamMap"], [214, 2, 1, "", "getInputCol"], [214, 2, 1, "", "getOrDefault"], [214, 2, 1, "", "getOutputCol"], [214, 2, 1, "", "getParam"], [214, 3, 1, "", "guess"], [214, 2, 1, "", "hasDefault"], [214, 2, 1, "", "hasParam"], [214, 3, 1, "", "inputCol"], [214, 2, 1, "", "isDefined"], [214, 2, 1, "", "isSet"], [214, 2, 1, "", "load"], [214, 3, 1, "", "method"], [214, 3, 1, "", "outputCol"], [214, 3, 1, "", "pageIndex"], [214, 2, 1, "", "read"], [214, 2, 1, "", "save"], [214, 2, 1, "", "set"], [214, 2, 1, "", "setGuess"], [214, 2, 1, "", "setInputCol"], [214, 2, 1, "", "setMethod"], [214, 2, 1, "", "setOutputCol"], [214, 2, 1, "", "setPageIndex"], [214, 2, 1, "", "transform"], [214, 3, 1, "", "uid"], [214, 2, 1, "", "write"]], "sparkocr.transformers.pdf.text_to_pdf": [[215, 1, 1, "", "TextToPdf"]], "sparkocr.transformers.pdf.text_to_pdf.TextToPdf": [[215, 2, 1, "", "clear"], [215, 2, 1, "", "copy"], [215, 2, 1, "", "explainParam"], [215, 2, 1, "", "explainParams"], [215, 2, 1, "", "extractParamMap"], [215, 2, 1, "", "getInputCol"], [215, 2, 1, "", "getOrDefault"], [215, 2, 1, "", "getOutputCol"], [215, 2, 1, "", "getParam"], [215, 2, 1, "", "hasDefault"], [215, 2, 1, "", "hasParam"], [215, 3, 1, "", "inputCol"], [215, 3, 1, "", "inputContent"], [215, 3, 1, "", "inputImage"], [215, 3, 1, "", "inputText"], [215, 2, 1, "", "isDefined"], [215, 2, 1, "", "isSet"], [215, 2, 1, "", "load"], [215, 3, 1, "", "originCol"], [215, 3, 1, "", "outputCol"], [215, 3, 1, "", "pageNumCol"], [215, 2, 1, "", "read"], [215, 2, 1, "", "save"], [215, 2, 1, "", "set"], [215, 2, 1, "", "setInputCol"], [215, 2, 1, "", "setInputContent"], [215, 2, 1, "", "setInputImage"], [215, 2, 1, "", "setInputText"], [215, 2, 1, "", "setOriginCol"], [215, 2, 1, "", "setOutputCol"], [215, 2, 1, "", "setPageNumCol"], [215, 2, 1, "", "transform"], [215, 3, 1, "", "uid"], [215, 2, 1, "", "write"]], "sparkocr.transformers.position_finder": [[216, 1, 1, "", "PositionFinder"]], "sparkocr.transformers.position_finder.PositionFinder": [[216, 2, 1, "", "clear"], [216, 2, 1, "", "copy"], [216, 2, 1, "", "explainParam"], [216, 2, 1, "", "explainParams"], [216, 2, 1, "", "extractParamMap"], [216, 2, 1, "", "getInputCols"], [216, 2, 1, "", "getLazyAnnotator"], [216, 2, 1, "", "getOrDefault"], [216, 2, 1, "", "getOutputCol"], [216, 2, 1, "", "getParam"], [216, 2, 1, "", "getParamValue"], [216, 3, 1, "", "getter_attrs"], [216, 2, 1, "", "hasDefault"], [216, 2, 1, "", "hasParam"], [216, 3, 1, "", "ignoreSchema"], [216, 3, 1, "", "inputAnnotatorTypes"], [216, 3, 1, "", "inputCols"], [216, 2, 1, "", "inputColsValidation"], [216, 2, 1, "", "isDefined"], [216, 2, 1, "", "isSet"], [216, 3, 1, "", "lazyAnnotator"], [216, 2, 1, "", "load"], [216, 3, 1, "", "name"], [216, 3, 1, "", "ocrScaleFactor"], [216, 3, 1, "", "optionalInputAnnotatorTypes"], [216, 3, 1, "", "outputAnnotatorType"], [216, 3, 1, "", "outputCol"], [216, 3, 1, "", "pageMatrixCol"], [216, 3, 1, "", "pageNumCol"], [216, 3, 1, "", "pdfScaleFactor"], [216, 2, 1, "", "read"], [216, 2, 1, "", "save"], [216, 2, 1, "", "set"], [216, 2, 1, "", "setIgnoreSchema"], [216, 2, 1, "", "setInputCols"], [216, 2, 1, "", "setLazyAnnotator"], [216, 2, 1, "", "setOcrScaleFactor"], [216, 2, 1, "", "setOutputCol"], [216, 2, 1, "", "setPageMatrixCol"], [216, 2, 1, "", "setPageNumCol"], [216, 2, 1, "", "setParamValue"], [216, 2, 1, "", "setParams"], [216, 2, 1, "", "setPdfScaleFactor"], [216, 2, 1, "", "setSmoothCoordinates"], [216, 2, 1, "", "setSplitOnNewLines"], [216, 3, 1, "", "smoothCoordinates"], [216, 3, 1, "", "splitOnNewLines"], [216, 2, 1, "", "transform"], [216, 3, 1, "", "uid"], [216, 2, 1, "", "write"]], "sparkocr.transformers.ppt_to_pdf": [[217, 1, 1, "", "PptToPdf"]], "sparkocr.transformers.ppt_to_pdf.PptToPdf": [[217, 2, 1, "", "clear"], [217, 2, 1, "", "copy"], [217, 2, 1, "", "explainParam"], [217, 2, 1, "", "explainParams"], [217, 2, 1, "", "extractParamMap"], [217, 2, 1, "", "getInputCol"], [217, 2, 1, "", "getOrDefault"], [217, 2, 1, "", "getOutputCol"], [217, 2, 1, "", "getParam"], [217, 2, 1, "", "hasDefault"], [217, 2, 1, "", "hasParam"], [217, 3, 1, "", "inputCol"], [217, 2, 1, "", "isDefined"], [217, 2, 1, "", "isSet"], [217, 2, 1, "", "load"], [217, 3, 1, "", "outputCol"], [217, 2, 1, "", "read"], [217, 2, 1, "", "save"], [217, 2, 1, "", "set"], [217, 2, 1, "", "setInputCol"], [217, 2, 1, "", "setOutputCol"], [217, 2, 1, "", "transform"], [217, 3, 1, "", "uid"], [217, 2, 1, "", "write"]], "sparkocr.transformers.ppt_to_text_table": [[218, 1, 1, "", "PptToTextTable"]], "sparkocr.transformers.ppt_to_text_table.PptToTextTable": [[218, 2, 1, "", "clear"], [218, 2, 1, "", "copy"], [218, 2, 1, "", "explainParam"], [218, 2, 1, "", "explainParams"], [218, 2, 1, "", "extractParamMap"], [218, 2, 1, "", "getInputCol"], [218, 2, 1, "", "getOrDefault"], [218, 2, 1, "", "getOutputCol"], [218, 2, 1, "", "getParam"], [218, 2, 1, "", "hasDefault"], [218, 2, 1, "", "hasParam"], [218, 3, 1, "", "inputCol"], [218, 2, 1, "", "isDefined"], [218, 2, 1, "", "isSet"], [218, 2, 1, "", "load"], [218, 3, 1, "", "outputCol"], [218, 3, 1, "", "outputFormat"], [218, 2, 1, "", "read"], [218, 2, 1, "", "save"], [218, 2, 1, "", "set"], [218, 2, 1, "", "setInputCol"], [218, 2, 1, "", "setOutputCol"], [218, 2, 1, "", "setOutputFormat"], [218, 2, 1, "", "transform"], [218, 3, 1, "", "uid"], [218, 2, 1, "", "write"]], "sparkocr.transformers.readers": [[219, 0, 0, "-", "alab_readers"], [220, 0, 0, "-", "docvqa_reader"], [221, 0, 0, "-", "funsd_reader"], [222, 0, 0, "-", "iam_reader"], [224, 0, 0, "-", "mixed_iterator"], [225, 0, 0, "-", "rvlcdip_reader"], [226, 0, 0, "-", "sroie_reader"], [227, 0, 0, "-", "tacd_reader"]], "sparkocr.transformers.readers.alab_readers": [[219, 1, 1, "", "AlabReaders"], [219, 1, 1, "", "AlabReadersV1"]], "sparkocr.transformers.readers.alab_readers.AlabReaders": [[219, 2, 1, "", "dataLabeler"], [219, 2, 1, "", "getPreparedDataItem"], [219, 2, 1, "", "get_words"], [219, 2, 1, "", "isRectangleOverlap"], [219, 2, 1, "", "jsonReader"]], "sparkocr.transformers.readers.alab_readers.AlabReadersV1": [[219, 2, 1, "", "dataLabeler"]], "sparkocr.transformers.readers.docvqa_reader": [[220, 1, 1, "", "DocVQA"]], "sparkocr.transformers.readers.docvqa_reader.DocVQA": [[220, 2, 1, "", "apply"], [220, 2, 1, "", "getDataFrame"], [220, 3, 1, "", "java_obj"], [220, 2, 1, "", "new_java_array"], [220, 2, 1, "", "new_java_array_integer"], [220, 2, 1, "", "new_java_array_string"], [220, 2, 1, "", "new_java_obj"], [220, 2, 1, "", "readDataset"], [220, 3, 1, "", "sc"], [220, 2, 1, "", "spark_version"]], "sparkocr.transformers.readers.funsd_reader": [[221, 1, 1, "", "FunsdReader"]], "sparkocr.transformers.readers.funsd_reader.FunsdReader": [[221, 3, 1, "", "EXTRACTED"], [221, 3, 1, "", "FILENAME"], [221, 3, 1, "", "RESULT"], [221, 3, 1, "", "URL"], [221, 3, 1, "", "clean_up"], [221, 2, 1, "", "create_file_identifier"], [221, 2, 1, "", "download_and_extract"], [221, 2, 1, "", "funsd_reader"], [221, 2, 1, "", "process_funsd_split"], [221, 3, 1, "", "root_work_dir"], [221, 3, 1, "", "schema"], [221, 3, 1, "", "spark"], [221, 3, 1, "", "target_dir"]], "sparkocr.transformers.readers.iam_reader": [[222, 1, 1, "", "IAMReader"]], "sparkocr.transformers.readers.iam_reader.IAMReader": [[222, 3, 1, "", "AWS_KEY_ID"], [222, 3, 1, "", "AWS_SECRET_KEY"], [222, 3, 1, "", "AWS_SESSION_TOKEN"], [222, 3, 1, "", "FILE_NAME"], [222, 3, 1, "", "S3_URI"], [222, 3, 1, "", "clean_up"], [222, 2, 1, "", "download_and_extract"], [222, 2, 1, "", "extract_file_name"], [222, 2, 1, "", "iam_reader"], [222, 2, 1, "", "read_annotation_files"], [222, 3, 1, "", "root_work_dir"], [222, 3, 1, "", "spark"], [222, 3, 1, "", "target_dir"]], "sparkocr.transformers.readers.mixed_iterator": [[224, 1, 1, "", "MixedDataset"], [224, 4, 1, "", "added_tokens"]], "sparkocr.transformers.readers.mixed_iterator.MixedDataset": [[224, 2, 1, "", "add_tokens"], [224, 3, 1, "", "dataframes"], [224, 3, 1, "", "df_iterators"], [224, 3, 1, "", "df_sizes"], [224, 3, 1, "", "gt_token_sequences"], [224, 3, 1, "", "ignore_id"], [224, 3, 1, "", "max_length"], [224, 3, 1, "", "max_patches"], [224, 2, 1, "", "process_input_row"], [224, 3, 1, "", "processor"], [224, 3, 1, "", "produced"], [224, 3, 1, "", "produced_distribution"], [224, 3, 1, "", "prompt_end_token"], [224, 3, 1, "", "prompt_end_token_id"], [224, 3, 1, "", "size"], [224, 3, 1, "", "sort_json_key"], [224, 3, 1, "", "split"], [224, 3, 1, "", "task_start_token"], [224, 3, 1, "", "total_weights"], [224, 3, 1, "", "weights"]], "sparkocr.transformers.readers.rvlcdip_reader": [[225, 1, 1, "", "RvlCdipReader"]], "sparkocr.transformers.readers.rvlcdip_reader.RvlCdipReader": [[225, 2, 1, "", "readTestDataset"], [225, 2, 1, "", "readTrainDataset"]], "sparkocr.transformers.readers.sroie_reader": [[226, 1, 1, "", "SROIEReader"]], "sparkocr.transformers.readers.sroie_reader.SROIEReader": [[226, 3, 1, "", "SROIE_TEST"], [226, 3, 1, "", "SROIE_TRAIN"], [226, 3, 1, "", "clean_up"], [226, 2, 1, "", "create_file_identifier"], [226, 2, 1, "", "download_and_extract"], [226, 2, 1, "", "process_sroie_split"], [226, 3, 1, "", "root_work_dir"], [226, 3, 1, "", "schema"], [226, 3, 1, "", "spark"], [226, 2, 1, "", "sroie_reader"], [226, 3, 1, "", "target_dir"]], "sparkocr.transformers.readers.tacd_reader": [[227, 1, 1, "", "TACDReader"]], "sparkocr.transformers.readers.tacd_reader.TACDReader": [[227, 3, 1, "", "AWS_KEY_ID"], [227, 3, 1, "", "AWS_SECRET_KEY"], [227, 3, 1, "", "AWS_SESSION_TOKEN"], [227, 3, 1, "", "FILE_NAME"], [227, 3, 1, "", "S3_URI"], [227, 3, 1, "", "clean_up"], [227, 2, 1, "", "create_file_identifier"], [227, 2, 1, "", "download_and_extract"], [227, 2, 1, "", "process_tacd_split"], [227, 3, 1, "", "root_work_dir"], [227, 3, 1, "", "schema"], [227, 3, 1, "", "spark"], [227, 2, 1, "", "tacd_reader"], [227, 3, 1, "", "target_dir"]], "sparkocr.transformers.recognizers": [[228, 0, 0, "-", "image_to_text_v2"], [229, 0, 0, "-", "image_to_text_v3"]], "sparkocr.transformers.recognizers.image_to_text_v2": [[228, 1, 1, "", "ImageToTextV2"]], "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2": [[228, 3, 1, "", "batchSize"], [228, 3, 1, "", "borderWidth"], [228, 2, 1, "", "clear"], [228, 2, 1, "", "copy"], [228, 3, 1, "", "endTokenId"], [228, 2, 1, "", "explainParam"], [228, 2, 1, "", "explainParams"], [228, 2, 1, "", "exploding_wrap"], [228, 2, 1, "", "extractParamMap"], [228, 3, 1, "", "forceProcessing"], [228, 2, 1, "", "getInputCols"], [228, 2, 1, "", "getModelPath"], [228, 2, 1, "", "getOrDefault"], [228, 2, 1, "", "getOutputCol"], [228, 2, 1, "", "getParam"], [228, 3, 1, "", "groupImages"], [228, 2, 1, "", "hasDefault"], [228, 2, 1, "", "hasParam"], [228, 3, 1, "", "height"], [228, 3, 1, "", "includeConfidence"], [228, 3, 1, "", "inputCols"], [228, 2, 1, "", "isDefined"], [228, 2, 1, "", "isSet"], [228, 3, 1, "", "keepInput"], [228, 3, 1, "", "limitMultiplier"], [228, 3, 1, "", "lineTolerance"], [228, 2, 1, "", "load"], [228, 3, 1, "", "maxImageRatio"], [228, 3, 1, "", "maxImageSize"], [228, 3, 1, "", "name"], [228, 3, 1, "", "normMean"], [228, 3, 1, "", "normStd"], [228, 3, 1, "", "outputCol"], [228, 3, 1, "", "outputFormat"], [228, 2, 1, "", "pretrained"], [228, 2, 1, "", "read"], [228, 3, 1, "", "regionsColumn"], [228, 2, 1, "", "save"], [228, 2, 1, "", "saveModel"], [228, 3, 1, "", "scoresCol"], [228, 2, 1, "", "set"], [228, 2, 1, "", "setBatchSize"], [228, 2, 1, "", "setBorderWidth"], [228, 2, 1, "", "setEndTokenId"], [228, 2, 1, "", "setForceProcessing"], [228, 2, 1, "", "setGroupImages"], [228, 2, 1, "", "setHeight"], [228, 2, 1, "", "setIncludeConfidence"], [228, 2, 1, "", "setInputCols"], [228, 2, 1, "", "setKeepInput"], [228, 2, 1, "", "setLimitMultiplier"], [228, 2, 1, "", "setLineTolerance"], [228, 2, 1, "", "setMaxImageRatio"], [228, 2, 1, "", "setMaxImageSize"], [228, 2, 1, "", "setNormMean"], [228, 2, 1, "", "setNormStd"], [228, 2, 1, "", "setOutputCol"], [228, 2, 1, "", "setOutputFormat"], [228, 2, 1, "", "setRegionsColumn"], [228, 2, 1, "", "setScoresCol"], [228, 2, 1, "", "setSpaceEncoding"], [228, 2, 1, "", "setSpaceWidth"], [228, 2, 1, "", "setStartTokenId"], [228, 2, 1, "", "setTaskParallelism"], [228, 2, 1, "", "setUseCaching"], [228, 2, 1, "", "setUseGPU"], [228, 2, 1, "", "setWidth"], [228, 3, 1, "", "spaceEncoding"], [228, 3, 1, "", "spaceWidth"], [228, 3, 1, "", "startTokenId"], [228, 3, 1, "", "taskParallelism"], [228, 2, 1, "", "transform"], [228, 3, 1, "", "uid"], [228, 3, 1, "", "useCaching"], [228, 3, 1, "", "useGPU"], [228, 3, 1, "", "width"], [228, 2, 1, "", "write"]], "sparkocr.transformers.recognizers.image_to_text_v3": [[229, 1, 1, "", "ImageToTextV3"]], "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3": [[229, 2, 1, "", "clear"], [229, 2, 1, "", "copy"], [229, 3, 1, "", "downloadModelData"], [229, 2, 1, "", "explainParam"], [229, 2, 1, "", "explainParams"], [229, 2, 1, "", "extractParamMap"], [229, 2, 1, "", "getInputCols"], [229, 2, 1, "", "getOrDefault"], [229, 2, 1, "", "getOutputCol"], [229, 2, 1, "", "getParam"], [229, 2, 1, "", "hasDefault"], [229, 2, 1, "", "hasParam"], [229, 3, 1, "", "inputCols"], [229, 2, 1, "", "isDefined"], [229, 2, 1, "", "isSet"], [229, 3, 1, "", "language"], [229, 2, 1, "", "load"], [229, 3, 1, "", "margin"], [229, 3, 1, "", "modelData"], [229, 3, 1, "", "modelType"], [229, 3, 1, "", "name"], [229, 3, 1, "", "ocrEngineMode"], [229, 3, 1, "", "outputCol"], [229, 3, 1, "", "outputFormat"], [229, 3, 1, "", "pageIteratorLevel"], [229, 3, 1, "", "pageSegMode"], [229, 2, 1, "", "read"], [229, 2, 1, "", "save"], [229, 2, 1, "", "set"], [229, 2, 1, "", "setDownloadModelData"], [229, 2, 1, "", "setInputCols"], [229, 2, 1, "", "setLanguage"], [229, 2, 1, "", "setMargin"], [229, 2, 1, "", "setModelData"], [229, 2, 1, "", "setModelType"], [229, 2, 1, "", "setOcrEngineMode"], [229, 2, 1, "", "setOutputCol"], [229, 2, 1, "", "setOutputFormat"], [229, 2, 1, "", "setPageIteratorLevel"], [229, 2, 1, "", "setPageSegMode"], [229, 2, 1, "", "setUseTess4j"], [229, 2, 1, "", "transform"], [229, 3, 1, "", "uid"], [229, 3, 1, "", "useTess4j"], [229, 2, 1, "", "write"]], "sparkocr.transformers.regions_merger": [[231, 1, 1, "", "RegionsMerger"]], "sparkocr.transformers.regions_merger.RegionsMerger": [[231, 3, 1, "", "cellInputCol"], [231, 2, 1, "", "clear"], [231, 2, 1, "", "copy"], [231, 2, 1, "", "explainParam"], [231, 2, 1, "", "explainParams"], [231, 2, 1, "", "extractParamMap"], [231, 2, 1, "", "getInputCols"], [231, 2, 1, "", "getOrDefault"], [231, 2, 1, "", "getOutputCol"], [231, 2, 1, "", "getParam"], [231, 3, 1, "", "handwrittenLabels"], [231, 2, 1, "", "hasDefault"], [231, 2, 1, "", "hasParam"], [231, 3, 1, "", "imageInputCol"], [231, 3, 1, "", "inputCols"], [231, 2, 1, "", "isDefined"], [231, 2, 1, "", "isSet"], [231, 3, 1, "", "keepTextRegions"], [231, 2, 1, "", "load"], [231, 3, 1, "", "outputCol"], [231, 2, 1, "", "read"], [231, 2, 1, "", "save"], [231, 2, 1, "", "set"], [231, 2, 1, "", "setCellInputCol"], [231, 2, 1, "", "setHandwrittenLabels"], [231, 2, 1, "", "setImageInputCol"], [231, 2, 1, "", "setInputCols"], [231, 2, 1, "", "setKeepTextRegions"], [231, 2, 1, "", "setOutputCol"], [231, 2, 1, "", "transform"], [231, 3, 1, "", "uid"], [231, 2, 1, "", "write"]], "sparkocr.transformers.tokenizer": [[232, 0, 0, "-", "bros_hocr_tokenizer"], [233, 0, 0, "-", "hocr_document_assembler"], [234, 0, 0, "-", "hocr_tokenizer"]], "sparkocr.transformers.tokenizer.bros_hocr_tokenizer": [[232, 1, 1, "", "BrosHocrTokenizer"]], "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer": [[232, 2, 1, "", "clear"], [232, 2, 1, "", "copy"], [232, 2, 1, "", "explainParam"], [232, 2, 1, "", "explainParams"], [232, 2, 1, "", "extractParamMap"], [232, 2, 1, "", "getInputCol"], [232, 2, 1, "", "getOrDefault"], [232, 2, 1, "", "getOutputCol"], [232, 2, 1, "", "getParam"], [232, 2, 1, "", "hasDefault"], [232, 2, 1, "", "hasParam"], [232, 3, 1, "", "inputCol"], [232, 2, 1, "", "isDefined"], [232, 2, 1, "", "isSet"], [232, 2, 1, "", "load"], [232, 3, 1, "", "name"], [232, 3, 1, "", "outputCol"], [232, 2, 1, "", "pretrained"], [232, 2, 1, "", "read"], [232, 2, 1, "", "save"], [232, 2, 1, "", "set"], [232, 2, 1, "", "setInputCol"], [232, 2, 1, "", "setOutputCol"], [232, 2, 1, "", "setTokenizerType"], [232, 2, 1, "", "setVocabulary"], [232, 2, 1, "", "setVocabularyFile"], [232, 3, 1, "", "tokenizerType"], [232, 2, 1, "", "transform"], [232, 3, 1, "", "uid"], [232, 2, 1, "", "write"]], "sparkocr.transformers.tokenizer.hocr_document_assembler": [[233, 1, 1, "", "HocrDocumentAssembler"]], "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler": [[233, 2, 1, "", "clear"], [233, 2, 1, "", "copy"], [233, 2, 1, "", "explainParam"], [233, 2, 1, "", "explainParams"], [233, 2, 1, "", "extractParamMap"], [233, 2, 1, "", "getInputCol"], [233, 2, 1, "", "getOrDefault"], [233, 2, 1, "", "getOutputCol"], [233, 2, 1, "", "getParam"], [233, 2, 1, "", "hasDefault"], [233, 2, 1, "", "hasParam"], [233, 3, 1, "", "inputCol"], [233, 2, 1, "", "isDefined"], [233, 2, 1, "", "isSet"], [233, 2, 1, "", "load"], [233, 3, 1, "", "outputCol"], [233, 2, 1, "", "read"], [233, 2, 1, "", "save"], [233, 2, 1, "", "set"], [233, 2, 1, "", "setInputCol"], [233, 2, 1, "", "setOutputCol"], [233, 2, 1, "", "transform"], [233, 3, 1, "", "uid"], [233, 2, 1, "", "write"]], "sparkocr.transformers.tokenizer.hocr_tokenizer": [[234, 1, 1, "", "HocrTokenizer"]], "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer": [[234, 2, 1, "", "clear"], [234, 2, 1, "", "copy"], [234, 2, 1, "", "explainParam"], [234, 2, 1, "", "explainParams"], [234, 2, 1, "", "extractParamMap"], [234, 2, 1, "", "getInputCol"], [234, 2, 1, "", "getOrDefault"], [234, 2, 1, "", "getOutputCol"], [234, 2, 1, "", "getParam"], [234, 2, 1, "", "hasDefault"], [234, 2, 1, "", "hasParam"], [234, 3, 1, "", "inputCol"], [234, 2, 1, "", "isDefined"], [234, 2, 1, "", "isSet"], [234, 2, 1, "", "load"], [234, 3, 1, "", "outputCol"], [234, 2, 1, "", "read"], [234, 2, 1, "", "save"], [234, 2, 1, "", "set"], [234, 2, 1, "", "setInputCol"], [234, 2, 1, "", "setOutputCol"], [234, 2, 1, "", "setTokenizerType"], [234, 3, 1, "", "tokenizerType"], [234, 2, 1, "", "transform"], [234, 3, 1, "", "uid"], [234, 2, 1, "", "write"]], "sparkocr.transformers.update_text_position": [[236, 1, 1, "", "UpdateTextPosition"]], "sparkocr.transformers.update_text_position.UpdateTextPosition": [[236, 2, 1, "", "clear"], [236, 2, 1, "", "copy"], [236, 2, 1, "", "explainParam"], [236, 2, 1, "", "explainParams"], [236, 2, 1, "", "extractParamMap"], [236, 2, 1, "", "getInputCol"], [236, 2, 1, "", "getOrDefault"], [236, 2, 1, "", "getOutputCol"], [236, 2, 1, "", "getParam"], [236, 2, 1, "", "hasDefault"], [236, 2, 1, "", "hasParam"], [236, 3, 1, "", "inputCol"], [236, 3, 1, "", "inputText"], [236, 2, 1, "", "isDefined"], [236, 2, 1, "", "isSet"], [236, 2, 1, "", "load"], [236, 3, 1, "", "outputCol"], [236, 2, 1, "", "read"], [236, 2, 1, "", "save"], [236, 2, 1, "", "set"], [236, 2, 1, "", "setInputCol"], [236, 2, 1, "", "setInputText"], [236, 2, 1, "", "setOutputCol"], [236, 2, 1, "", "transform"], [236, 3, 1, "", "uid"], [236, 2, 1, "", "write"]], "sparkocr.transformers.visual_document_classifier": [[237, 1, 1, "", "VisualDocumentClassifier"]], "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier": [[237, 3, 1, "", "caseSensitive"], [237, 2, 1, "", "clear"], [237, 3, 1, "", "confidenceCol"], [237, 3, 1, "", "confidenceThreshold"], [237, 2, 1, "", "copy"], [237, 2, 1, "", "explainParam"], [237, 2, 1, "", "explainParams"], [237, 2, 1, "", "extractParamMap"], [237, 2, 1, "", "getInputCol"], [237, 2, 1, "", "getOrDefault"], [237, 2, 1, "", "getParam"], [237, 2, 1, "", "hasDefault"], [237, 2, 1, "", "hasParam"], [237, 3, 1, "", "inputCol"], [237, 2, 1, "", "isDefined"], [237, 2, 1, "", "isSet"], [237, 3, 1, "", "labelCol"], [237, 3, 1, "", "labels"], [237, 2, 1, "", "load"], [237, 2, 1, "", "loadTFModel"], [237, 3, 1, "", "maxSentenceLength"], [237, 3, 1, "", "name"], [237, 2, 1, "", "pretrained"], [237, 2, 1, "", "read"], [237, 2, 1, "", "save"], [237, 2, 1, "", "set"], [237, 2, 1, "", "setCaseSensitive"], [237, 2, 1, "", "setConfidenceCol"], [237, 2, 1, "", "setConfidenceThreshold"], [237, 2, 1, "", "setInputCol"], [237, 2, 1, "", "setLabelCol"], [237, 2, 1, "", "setLabels"], [237, 2, 1, "", "setMaxSentenceLength"], [237, 2, 1, "", "transform"], [237, 3, 1, "", "uid"], [237, 2, 1, "", "write"]], "sparkocr.transformers.visual_document_classifier_lilt": [[238, 1, 1, "", "VisualDocumentClassifierLilt"]], "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt": [[238, 3, 1, "", "caseSensitive"], [238, 2, 1, "", "clear"], [238, 2, 1, "", "copy"], [238, 2, 1, "", "explainParam"], [238, 2, 1, "", "explainParams"], [238, 2, 1, "", "extractParamMap"], [238, 2, 1, "", "getInputCol"], [238, 2, 1, "", "getLabels"], [238, 2, 1, "", "getOrDefault"], [238, 2, 1, "", "getOutputCol"], [238, 2, 1, "", "getParam"], [238, 2, 1, "", "getPreprocessedDataset"], [238, 2, 1, "", "hasDefault"], [238, 2, 1, "", "hasParam"], [238, 3, 1, "", "inputCol"], [238, 2, 1, "", "isDefined"], [238, 2, 1, "", "isSet"], [238, 3, 1, "", "labels"], [238, 2, 1, "", "load"], [238, 2, 1, "", "loadDataset"], [238, 2, 1, "", "loadONNXModel"], [238, 2, 1, "", "loadPreprocessedDataset"], [238, 2, 1, "", "loadVocabulary"], [238, 3, 1, "", "maxSentenceLength"], [238, 3, 1, "", "name"], [238, 3, 1, "", "outputCol"], [238, 2, 1, "", "preprocess_preprocessed_df"], [238, 2, 1, "", "pretrained"], [238, 2, 1, "", "read"], [238, 2, 1, "", "save"], [238, 2, 1, "", "saveModel"], [238, 2, 1, "", "set"], [238, 2, 1, "", "setInputCol"], [238, 2, 1, "", "setLabels"], [238, 2, 1, "", "setMaxSentenceLength"], [238, 2, 1, "", "setOutputCol"], [238, 2, 1, "", "setVocabulary"], [238, 2, 1, "", "transform"], [238, 3, 1, "", "uid"], [238, 2, 1, "", "write"]], "sparkocr.transformers.visual_document_classifier_v3": [[239, 1, 1, "", "VisualDocumentClassifierV3"]], "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3": [[239, 2, 1, "", "clear"], [239, 2, 1, "", "copy"], [239, 3, 1, "", "evalSize"], [239, 2, 1, "", "explainParam"], [239, 2, 1, "", "explainParams"], [239, 2, 1, "", "extractParamMap"], [239, 2, 1, "", "fit"], [239, 2, 1, "", "getInputCols"], [239, 2, 1, "", "getOrDefault"], [239, 2, 1, "", "getOutputCol"], [239, 2, 1, "", "getParam"], [239, 2, 1, "", "hasDefault"], [239, 2, 1, "", "hasParam"], [239, 3, 1, "", "inputCols"], [239, 2, 1, "", "isDefined"], [239, 2, 1, "", "isSet"], [239, 3, 1, "", "labels"], [239, 2, 1, "", "load"], [239, 2, 1, "", "loadONNXModel"], [239, 3, 1, "", "name"], [239, 3, 1, "", "outputCol"], [239, 2, 1, "", "pretrained"], [239, 2, 1, "", "read"], [239, 2, 1, "", "save"], [239, 2, 1, "", "saveModel"], [239, 2, 1, "", "set"], [239, 2, 1, "", "setEvalSize"], [239, 2, 1, "", "setInputCols"], [239, 2, 1, "", "setLabels"], [239, 2, 1, "", "setOutputCol"], [239, 2, 1, "", "setTrainBatchSize"], [239, 2, 1, "", "setTrainEpochs"], [239, 3, 1, "", "trainBatchSize"], [239, 3, 1, "", "trainEpochs"], [239, 2, 1, "", "transform"], [239, 3, 1, "", "uid"], [239, 3, 1, "", "vocabulary"], [239, 2, 1, "", "write"]], "sparkocr.transformers.visual_document_processor": [[240, 1, 1, "", "VisualDocumentProcessor"]], "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor": [[240, 2, 1, "", "clear"], [240, 2, 1, "", "copy"], [240, 3, 1, "", "downloadModelData"], [240, 2, 1, "", "explainParam"], [240, 2, 1, "", "explainParams"], [240, 2, 1, "", "extractParamMap"], [240, 3, 1, "", "freeTextOnly"], [240, 2, 1, "", "getInputCol"], [240, 2, 1, "", "getOrDefault"], [240, 2, 1, "", "getOutputCols"], [240, 2, 1, "", "getParam"], [240, 2, 1, "", "hasDefault"], [240, 2, 1, "", "hasParam"], [240, 3, 1, "", "inputCol"], [240, 2, 1, "", "isDefined"], [240, 2, 1, "", "isSet"], [240, 3, 1, "", "language"], [240, 3, 1, "", "modelData"], [240, 3, 1, "", "modelType"], [240, 3, 1, "", "ocrEngine"], [240, 3, 1, "", "ocrEngineMode"], [240, 3, 1, "", "outputCols"], [240, 3, 1, "", "outputFormat"], [240, 3, 1, "", "outputTableFormat"], [240, 3, 1, "", "pageIteratorLevel"], [240, 3, 1, "", "pageSegMode"], [240, 2, 1, "", "process_image"], [240, 2, 1, "", "set"], [240, 2, 1, "", "setDownloadModelData"], [240, 2, 1, "", "setFreeTextOnly"], [240, 2, 1, "", "setInputCol"], [240, 2, 1, "", "setLanguage"], [240, 2, 1, "", "setModelData"], [240, 2, 1, "", "setModelType"], [240, 2, 1, "", "setOcrEngine"], [240, 2, 1, "", "setOcrEngineMode"], [240, 2, 1, "", "setOutputCols"], [240, 2, 1, "", "setOutputFormat"], [240, 2, 1, "", "setOutputTableFormat"], [240, 2, 1, "", "setPageIteratorLevel"], [240, 2, 1, "", "setPageSegMode"], [240, 2, 1, "", "setUseTess4j"], [240, 2, 1, "", "transform"], [240, 3, 1, "", "uid"], [240, 3, 1, "", "useTess4j"]], "sparkocr.transformers.visual_encoder_decoder": [[241, 0, 0, "-", "Dit"], [242, 0, 0, "-", "Lilt"], [243, 0, 0, "-", "engine_for_finetuning"], [245, 0, 0, "-", "optim_factory"], [246, 0, 0, "-", "utils"]], "sparkocr.transformers.visual_encoder_decoder.Dit": [[241, 1, 1, "", "Dit"], [241, 1, 1, "", "DitDatasetIterable"], [241, 5, 1, "", "normalize_bbox"]], "sparkocr.transformers.visual_encoder_decoder.Dit.Dit": [[241, 3, 1, "", "base_model_path"], [241, 3, 1, "", "batch_size"], [241, 3, 1, "", "checkpoint_model"], [241, 3, 1, "", "device"], [241, 2, 1, "", "finish_model"], [241, 3, 1, "", "label2id"], [241, 3, 1, "", "model"], [241, 3, 1, "", "params"], [241, 3, 1, "", "patch_size"], [241, 3, 1, "", "smoothing"], [241, 2, 1, "", "to_onnx"], [241, 2, 1, "", "train"], [241, 2, 1, "", "update_config_labels"], [241, 3, 1, "", "window_size"]], "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable": [[241, 3, 1, "", "dataset"], [241, 3, 1, "", "df"], [241, 3, 1, "", "image_col"], [241, 3, 1, "", "label2id"], [241, 3, 1, "", "label_col"], [241, 3, 1, "", "n_height"], [241, 3, 1, "", "n_width"]], "sparkocr.transformers.visual_encoder_decoder.Lilt": [[242, 1, 1, "", "Lilt"], [242, 1, 1, "", "LiltNerDatasetIterable"], [242, 5, 1, "", "normalize_bbox"]], "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt": [[242, 3, 1, "", "base_model"], [242, 3, 1, "", "device"], [242, 2, 1, "", "getDataset"], [242, 3, 1, "", "max_length"], [242, 3, 1, "", "params"], [242, 2, 1, "", "to_onnx"], [242, 2, 1, "", "to_onnx_optimum"], [242, 3, 1, "", "tokenizer"], [242, 2, 1, "", "train"], [242, 2, 1, "", "update_config_labels"]], "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable": [[242, 3, 1, "", "df"], [242, 3, 1, "", "entities_col"], [242, 3, 1, "", "image_col"], [242, 3, 1, "", "label2id"], [242, 3, 1, "", "label_all_tokens"], [242, 3, 1, "", "max_length"], [242, 3, 1, "", "stride"], [242, 3, 1, "", "tokenizer"]], "sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning": [[243, 5, 1, "", "evaluate"], [243, 5, 1, "", "get_loss_scale_for_deepspeed"], [243, 5, 1, "", "train_class_batch"], [243, 5, 1, "", "train_one_epoch"]], "sparkocr.transformers.visual_encoder_decoder.optim_factory": [[245, 1, 1, "", "LayerDecayValueAssigner"], [245, 5, 1, "", "create_optimizer"], [245, 5, 1, "", "get_num_layer_for_vit"], [245, 5, 1, "", "get_parameter_groups"], [245, 4, 1, "", "has_apex"]], "sparkocr.transformers.visual_encoder_decoder.optim_factory.LayerDecayValueAssigner": [[245, 2, 1, "", "get_layer_id"], [245, 2, 1, "", "get_scale"], [245, 3, 1, "", "values"]], "sparkocr.transformers.visual_encoder_decoder.utils": [[246, 1, 1, "", "MetricLogger"], [246, 1, 1, "", "NativeScalerWithGradNormCount"], [246, 1, 1, "", "SmoothedValue"], [246, 1, 1, "", "TensorboardLogger"], [246, 5, 1, "", "auto_load_model"], [246, 5, 1, "", "cosine_scheduler"], [246, 5, 1, "", "create_ds_config"], [246, 5, 1, "", "get_grad_norm_"], [246, 5, 1, "", "get_rank"], [246, 5, 1, "", "get_world_size"], [246, 5, 1, "", "init_distributed_mode"], [246, 5, 1, "", "is_dist_avail_and_initialized"], [246, 5, 1, "", "is_main_process"], [246, 5, 1, "", "load_state_dict"], [246, 5, 1, "", "save_model"], [246, 5, 1, "", "save_on_master"], [246, 5, 1, "", "setup_for_distributed"]], "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger": [[246, 2, 1, "", "add_meter"], [246, 3, 1, "", "delimiter"], [246, 2, 1, "", "log_every"], [246, 3, 1, "", "meters"], [246, 2, 1, "", "synchronize_between_processes"], [246, 2, 1, "", "update"]], "sparkocr.transformers.visual_encoder_decoder.utils.NativeScalerWithGradNormCount": [[246, 2, 1, "", "load_state_dict"], [246, 2, 1, "", "state_dict"], [246, 3, 1, "", "state_dict_key"]], "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue": [[246, 3, 1, "", "count"], [246, 3, 1, "", "deque"], [246, 3, 1, "", "fmt"], [246, 2, 1, "", "synchronize_between_processes"], [246, 3, 1, "", "total"], [246, 2, 1, "", "update"]], "sparkocr.transformers.visual_encoder_decoder.utils.TensorboardLogger": [[246, 2, 1, "", "flush"], [246, 2, 1, "", "set_step"], [246, 3, 1, "", "step"], [246, 2, 1, "", "update"], [246, 3, 1, "", "writer"]], "sparkocr.transformers.visual_question_answering": [[247, 1, 1, "", "VisualQuestionAnswering"]], "sparkocr.transformers.visual_question_answering.VisualQuestionAnswering": [[247, 2, 1, "", "pretrained"]], "sparkocr.transformers.vqa": [[249, 0, 0, "-", "visual_question_answering_donut"], [250, 0, 0, "-", "visual_question_answering_pix2struct"]], "sparkocr.transformers.vqa.visual_question_answering_donut": [[249, 1, 1, "", "VisualQuestionAnsweringDonut"]], "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut": [[249, 3, 1, "", "answerEndMarker"], [249, 3, 1, "", "answerStartMarker"], [249, 2, 1, "", "clear"], [249, 2, 1, "", "copy"], [249, 3, 1, "", "encoderHiddenStateDim1"], [249, 3, 1, "", "encoderHiddenStateDim2"], [249, 3, 1, "", "endTokenId"], [249, 2, 1, "", "explainParam"], [249, 2, 1, "", "explainParams"], [249, 2, 1, "", "exploding_wrap"], [249, 2, 1, "", "extractParamMap"], [249, 3, 1, "", "forceProcessing"], [249, 2, 1, "", "getInputCols"], [249, 2, 1, "", "getOrDefault"], [249, 2, 1, "", "getOutputCol"], [249, 2, 1, "", "getParam"], [249, 2, 1, "", "hasDefault"], [249, 2, 1, "", "hasParam"], [249, 3, 1, "", "height"], [249, 3, 1, "", "includeConfidence"], [249, 3, 1, "", "inputCols"], [249, 2, 1, "", "isDefined"], [249, 2, 1, "", "isSet"], [249, 3, 1, "", "keepInput"], [249, 2, 1, "", "load"], [249, 3, 1, "", "maxSeqLength"], [249, 3, 1, "", "name"], [249, 3, 1, "", "normMean"], [249, 3, 1, "", "normStd"], [249, 3, 1, "", "numChannels"], [249, 3, 1, "", "outputCol"], [249, 3, 1, "", "padTokenId"], [249, 2, 1, "", "pretrained"], [249, 3, 1, "", "questionEndMarker"], [249, 3, 1, "", "questionStartMarker"], [249, 3, 1, "", "questions"], [249, 3, 1, "", "questionsCol"], [249, 2, 1, "", "read"], [249, 2, 1, "", "save"], [249, 2, 1, "", "saveModel"], [249, 2, 1, "", "set"], [249, 2, 1, "", "setEndTokenId"], [249, 2, 1, "", "setForceProcessing"], [249, 2, 1, "", "setHeight"], [249, 2, 1, "", "setIncludeConfidence"], [249, 2, 1, "", "setInputCol"], [249, 2, 1, "", "setKeepInput"], [249, 2, 1, "", "setMaxSeqLength"], [249, 2, 1, "", "setNormMean"], [249, 2, 1, "", "setNormStd"], [249, 2, 1, "", "setNumChannels"], [249, 2, 1, "", "setOutputCol"], [249, 2, 1, "", "setPadTokenId"], [249, 2, 1, "", "setQuestionEndMarker"], [249, 2, 1, "", "setQuestionStartMarker"], [249, 2, 1, "", "setQuestions"], [249, 2, 1, "", "setQuestionsCol"], [249, 2, 1, "", "setSpaceEncoding"], [249, 2, 1, "", "setStartTokenId"], [249, 2, 1, "", "setTaskEndMarker"], [249, 2, 1, "", "setTaskStartMarker"], [249, 2, 1, "", "setWidth"], [249, 3, 1, "", "spaceEncoding"], [249, 3, 1, "", "startTokenId"], [249, 3, 1, "", "taskEndMarker"], [249, 3, 1, "", "taskStartMarker"], [249, 2, 1, "", "transform"], [249, 3, 1, "", "uid"], [249, 3, 1, "", "width"], [249, 2, 1, "", "write"]], "sparkocr.transformers.vqa.visual_question_answering_pix2struct": [[250, 1, 1, "", "VisualQuestionAnsweringPix2Struct"]], "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct": [[250, 3, 1, "", "answerEndMarker"], [250, 3, 1, "", "answerStartMarker"], [250, 2, 1, "", "clear"], [250, 2, 1, "", "copy"], [250, 3, 1, "", "encoderHiddenStateDim1"], [250, 3, 1, "", "encoderHiddenStateDim2"], [250, 3, 1, "", "endTokenId"], [250, 2, 1, "", "explainParam"], [250, 2, 1, "", "explainParams"], [250, 2, 1, "", "exploding_wrap"], [250, 2, 1, "", "extractParamMap"], [250, 3, 1, "", "forceProcessing"], [250, 2, 1, "", "getInputCols"], [250, 2, 1, "", "getOrDefault"], [250, 2, 1, "", "getOutputCol"], [250, 2, 1, "", "getParam"], [250, 2, 1, "", "hasDefault"], [250, 2, 1, "", "hasParam"], [250, 3, 1, "", "height"], [250, 3, 1, "", "inputCols"], [250, 2, 1, "", "isDefined"], [250, 2, 1, "", "isSet"], [250, 3, 1, "", "keepInput"], [250, 2, 1, "", "load"], [250, 2, 1, "", "loadONNXModel"], [250, 3, 1, "", "maxAnswerLength"], [250, 3, 1, "", "maxPatches"], [250, 3, 1, "", "maxSeqLength"], [250, 3, 1, "", "name"], [250, 3, 1, "", "normMean"], [250, 3, 1, "", "normStd"], [250, 3, 1, "", "numChannels"], [250, 3, 1, "", "outputCol"], [250, 3, 1, "", "padTokenId"], [250, 2, 1, "", "pretrained"], [250, 3, 1, "", "questionEndMarker"], [250, 3, 1, "", "questionStartMarker"], [250, 3, 1, "", "questions"], [250, 3, 1, "", "questionsCol"], [250, 2, 1, "", "read"], [250, 2, 1, "", "save"], [250, 2, 1, "", "saveModel"], [250, 2, 1, "", "set"], [250, 2, 1, "", "setEndTokenId"], [250, 2, 1, "", "setForceProcessing"], [250, 2, 1, "", "setHeight"], [250, 2, 1, "", "setInputCol"], [250, 2, 1, "", "setKeepInput"], [250, 2, 1, "", "setMaxSeqLength"], [250, 2, 1, "", "setNormMean"], [250, 2, 1, "", "setNormStd"], [250, 2, 1, "", "setNumChannels"], [250, 2, 1, "", "setOutputCol"], [250, 2, 1, "", "setPadTokenId"], [250, 2, 1, "", "setQuestionEndMarker"], [250, 2, 1, "", "setQuestionStartMarker"], [250, 2, 1, "", "setQuestions"], [250, 2, 1, "", "setQuestionsCol"], [250, 2, 1, "", "setSpaceEncoding"], [250, 2, 1, "", "setStartTokenId"], [250, 2, 1, "", "setTaskEndMarker"], [250, 2, 1, "", "setTaskStartMarker"], [250, 2, 1, "", "setUseCaching"], [250, 2, 1, "", "setUseGPU"], [250, 2, 1, "", "setVocabulary"], [250, 2, 1, "", "setWidth"], [250, 3, 1, "", "spaceEncoding"], [250, 3, 1, "", "startTokenId"], [250, 3, 1, "", "taskEndMarker"], [250, 3, 1, "", "taskStartMarker"], [250, 2, 1, "", "transform"], [250, 3, 1, "", "uid"], [250, 3, 1, "", "useCaching"], [250, 3, 1, "", "useGPU"], [250, 3, 1, "", "width"], [250, 2, 1, "", "write"]], "sparkocr.utils": [[265, 4, 1, "", "IMAGE_MODE_DISPLAY_MAP"], [265, 4, 1, "", "IMAGE_MODE_MAP"], [265, 5, 1, "", "compare_versions"], [251, 0, 0, "-", "compat_pkg"], [255, 0, 0, "-", "craft"], [265, 5, 1, "", "display_dicom"], [265, 5, 1, "", "display_image"], [265, 5, 1, "", "display_images"], [265, 5, 1, "", "display_images_horizontal"], [265, 5, 1, "", "display_markup"], [265, 5, 1, "", "display_pdf"], [265, 1, 1, "", "display_pdf_file"], [265, 5, 1, "", "display_table"], [265, 5, 1, "", "display_tables"], [265, 5, 1, "", "display_xmls"], [265, 5, 1, "", "ensure_packages_installed"], [265, 5, 1, "", "get_name"], [265, 5, 1, "", "get_packbits_func"], [265, 5, 1, "", "get_read_dicom_func"], [265, 5, 1, "", "get_vocabulary_dict"], [265, 5, 1, "", "get_xml"], [263, 0, 0, "-", "helpers"], [264, 0, 0, "-", "hocr_renderer"], [266, 0, 0, "-", "inpainting"], [267, 0, 0, "-", "rectangle"], [265, 5, 1, "", "remove_dependency_from_traceback"], [265, 5, 1, "", "remove_large_objects"], [265, 5, 1, "", "save_table_to_csv"], [265, 5, 1, "", "save_tables_to_csv"], [268, 0, 0, "-", "seqeval"], [265, 5, 1, "", "singh_threshold"], [265, 5, 1, "", "split_bylen"], [269, 0, 0, "-", "svs"], [265, 5, 1, "", "to_opencv_image"], [265, 5, 1, "", "to_pil_image"], [265, 5, 1, "", "to_xml"], [275, 0, 0, "-", "torchutils"], [265, 5, 1, "", "wolf_threshold"]], "sparkocr.utils.compat_pkg": [[251, 4, 1, "", "parse_version"], [251, 5, 1, "", "resource_filename"]], "sparkocr.utils.craft": [[255, 1, 1, "", "Craft"], [252, 0, 0, "-", "craft_utils"], [255, 4, 1, "", "empty_cuda_cache"], [255, 4, 1, "", "export_detected_regions"], [255, 4, 1, "", "export_extra_results"], [253, 0, 0, "-", "file_utils"], [255, 4, 1, "", "get_prediction"], [254, 0, 0, "-", "image_utils"], [255, 4, 1, "", "load_craftnet_model"], [255, 4, 1, "", "load_refinenet_model"], [259, 0, 0, "-", "models"], [261, 0, 0, "-", "predict"], [255, 4, 1, "", "read_image"], [262, 0, 0, "-", "torch_utils"]], "sparkocr.utils.craft.Craft": [[255, 3, 1, "", "craft_net"], [255, 3, 1, "", "crop_type"], [255, 3, 1, "", "cuda"], [255, 2, 1, "", "detect_text"], [255, 3, 1, "", "export_extra"], [255, 3, 1, "", "link_threshold"], [255, 2, 1, "", "load_craftnet_model"], [255, 2, 1, "", "load_refinenet_model"], [255, 3, 1, "", "long_size"], [255, 3, 1, "", "low_text"], [255, 3, 1, "", "output_dir"], [255, 3, 1, "", "rectify"], [255, 3, 1, "", "refine_net"], [255, 3, 1, "", "refiner"], [255, 3, 1, "", "text_threshold"], [255, 2, 1, "", "unload_craftnet_model"], [255, 2, 1, "", "unload_refinenet_model"]], "sparkocr.utils.craft.craft_utils": [[252, 4, 1, "", "CRAFT_GDRIVE_URL"], [252, 4, 1, "", "REFINENET_GDRIVE_URL"], [252, 5, 1, "", "adjustResultCoordinates"], [252, 5, 1, "", "copyStateDict"], [252, 5, 1, "", "getDetBoxes"], [252, 5, 1, "", "getDetBoxes_core"], [252, 5, 1, "", "getPoly_core"], [252, 5, 1, "", "load_craftnet_model"], [252, 5, 1, "", "load_refinenet_model"], [252, 5, 1, "", "warpCoord"]], "sparkocr.utils.craft.file_utils": [[253, 5, 1, "", "create_dir"], [253, 5, 1, "", "crop_poly"], [253, 5, 1, "", "download"], [253, 5, 1, "", "export_detected_region"], [253, 5, 1, "", "export_detected_regions"], [253, 5, 1, "", "export_extra_results"], [253, 5, 1, "", "get_files"], [253, 5, 1, "", "list_files"], [253, 5, 1, "", "rectify_poly"]], "sparkocr.utils.craft.image_utils": [[254, 5, 1, "", "cvt2HeatmapImg"], [254, 5, 1, "", "denormalizeMeanVariance"], [254, 5, 1, "", "normalizeMeanVariance"], [254, 5, 1, "", "read_image"], [254, 5, 1, "", "resize_aspect_ratio"]], "sparkocr.utils.craft.models": [[256, 0, 0, "-", "basenet"], [258, 0, 0, "-", "craftnet"], [260, 0, 0, "-", "refinenet"]], "sparkocr.utils.craft.models.basenet": [[257, 0, 0, "-", "vgg16_bn"]], "sparkocr.utils.craft.models.basenet.vgg16_bn": [[257, 5, 1, "", "init_weights"], [257, 1, 1, "", "vgg16_bn"]], "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn": [[257, 2, 1, "", "forward"], [257, 3, 1, "", "slice1"], [257, 3, 1, "", "slice2"], [257, 3, 1, "", "slice3"], [257, 3, 1, "", "slice4"], [257, 3, 1, "", "slice5"]], "sparkocr.utils.craft.models.craftnet": [[258, 1, 1, "", "CraftNet"], [258, 1, 1, "", "double_conv"], [258, 4, 1, "", "model"]], "sparkocr.utils.craft.models.craftnet.CraftNet": [[258, 3, 1, "", "basenet"], [258, 3, 1, "", "conv_cls"], [258, 2, 1, "", "forward"], [258, 3, 1, "", "upconv1"], [258, 3, 1, "", "upconv2"], [258, 3, 1, "", "upconv3"], [258, 3, 1, "", "upconv4"]], "sparkocr.utils.craft.models.craftnet.double_conv": [[258, 3, 1, "", "conv"], [258, 2, 1, "", "forward"]], "sparkocr.utils.craft.models.refinenet": [[260, 1, 1, "", "RefineNet"]], "sparkocr.utils.craft.models.refinenet.RefineNet": [[260, 3, 1, "", "aspp1"], [260, 3, 1, "", "aspp2"], [260, 3, 1, "", "aspp3"], [260, 3, 1, "", "aspp4"], [260, 2, 1, "", "forward"], [260, 3, 1, "", "last_conv"]], "sparkocr.utils.craft.predict": [[261, 5, 1, "", "get_prediction"]], "sparkocr.utils.display_pdf_file": [[265, 3, 1, "", "pdf"], [265, 3, 1, "", "size"]], "sparkocr.utils.helpers": [[263, 5, 1, "", "cluster"], [263, 5, 1, "", "get_size"], [263, 5, 1, "", "write_dataset_to_bytes"]], "sparkocr.utils.hocr_renderer": [[264, 1, 1, "", "HocrRenderer"]], "sparkocr.utils.hocr_renderer.HocrRenderer": [[264, 3, 1, "", "baseline"], [264, 3, 1, "", "htmlid"], [264, 3, 1, "", "lang"], [264, 2, 1, "", "maximize_bbox"], [264, 3, 1, "", "ocr_class"], [264, 3, 1, "", "page_height"], [264, 3, 1, "", "page_width"], [264, 2, 1, "", "render"], [264, 3, 1, "", "templates"], [264, 3, 1, "", "title"], [264, 3, 1, "", "x0"], [264, 3, 1, "", "x1"], [264, 3, 1, "", "y0"], [264, 3, 1, "", "y1"]], "sparkocr.utils.inpainting": [[266, 1, 1, "", "BaseInpaintingTrainingModule"], [266, 1, 1, "", "ConcatTupleLayer"], [266, 1, 1, "", "FFC"], [266, 1, 1, "", "FFCResNetGenerator"], [266, 1, 1, "", "FFCResnetBlock"], [266, 1, 1, "", "FFCSE_block"], [266, 1, 1, "", "FFC_BN_ACT"], [266, 1, 1, "", "FourierUnit"], [266, 1, 1, "", "LearnableSpatialTransformWrapper"], [266, 1, 1, "", "SELayer"], [266, 1, 1, "", "SpectralTransform"], [266, 5, 1, "", "ceil_modulo"], [266, 5, 1, "", "get_activation"], [266, 5, 1, "", "pad_img_to_modulo"], [266, 5, 1, "", "rotate_detector_regions"], [266, 5, 1, "", "rotate_tensor"], [266, 5, 1, "", "scale_image"]], "sparkocr.utils.inpainting.BaseInpaintingTrainingModule": [[266, 3, 1, "", "config"], [266, 3, 1, "", "device"], [266, 2, 1, "", "forward"], [266, 3, 1, "", "generator"], [266, 2, 1, "", "prepare_batch"]], "sparkocr.utils.inpainting.ConcatTupleLayer": [[266, 2, 1, "", "forward"]], "sparkocr.utils.inpainting.FFC": [[266, 3, 1, "", "convg2g"], [266, 3, 1, "", "convg2l"], [266, 3, 1, "", "convl2g"], [266, 3, 1, "", "convl2l"], [266, 2, 1, "", "forward"], [266, 3, 1, "", "gate"], [266, 3, 1, "", "gated"], [266, 3, 1, "", "global_in_num"], [266, 3, 1, "", "ratio_gin"], [266, 3, 1, "", "ratio_gout"], [266, 3, 1, "", "stride"]], "sparkocr.utils.inpainting.FFCResNetGenerator": [[266, 2, 1, "", "forward"], [266, 3, 1, "", "model"]], "sparkocr.utils.inpainting.FFCResnetBlock": [[266, 3, 1, "", "conv1"], [266, 3, 1, "", "conv2"], [266, 2, 1, "", "forward"], [266, 3, 1, "", "inline"]], "sparkocr.utils.inpainting.FFCSE_block": [[266, 3, 1, "", "avgpool"], [266, 3, 1, "", "conv1"], [266, 3, 1, "", "conv_a2g"], [266, 3, 1, "", "conv_a2l"], [266, 2, 1, "", "forward"], [266, 3, 1, "", "relu1"], [266, 3, 1, "", "sigmoid"]], "sparkocr.utils.inpainting.FFC_BN_ACT": [[266, 3, 1, "", "act_g"], [266, 3, 1, "", "act_l"], [266, 3, 1, "", "bn_g"], [266, 3, 1, "", "bn_l"], [266, 3, 1, "", "ffc"], [266, 2, 1, "", "forward"]], "sparkocr.utils.inpainting.FourierUnit": [[266, 3, 1, "", "bn"], [266, 3, 1, "", "conv_layer"], [266, 3, 1, "", "ffc3d"], [266, 3, 1, "", "fft_norm"], [266, 2, 1, "", "forward"], [266, 3, 1, "", "groups"], [266, 3, 1, "", "relu"], [266, 3, 1, "", "spatial_scale_factor"], [266, 3, 1, "", "spatial_scale_mode"], [266, 3, 1, "", "spectral_pos_encoding"], [266, 3, 1, "", "use_se"]], "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper": [[266, 3, 1, "", "angle"], [266, 2, 1, "", "forward"], [266, 3, 1, "", "impl"], [266, 2, 1, "", "inverse_transform"], [266, 3, 1, "", "pad_coef"], [266, 2, 1, "", "transform"]], "sparkocr.utils.inpainting.SELayer": [[266, 3, 1, "", "avg_pool"], [266, 3, 1, "", "fc"], [266, 2, 1, "", "forward"]], "sparkocr.utils.inpainting.SpectralTransform": [[266, 3, 1, "", "conv1"], [266, 3, 1, "", "conv2"], [266, 3, 1, "", "enable_lfu"], [266, 2, 1, "", "forward"], [266, 3, 1, "", "fu"], [266, 3, 1, "", "stride"]], "sparkocr.utils.rectangle": [[267, 1, 1, "", "Point"], [267, 1, 1, "", "Rectangle"]], "sparkocr.utils.rectangle.Point": [[267, 3, 1, "", "x"], [267, 3, 1, "", "y"]], "sparkocr.utils.rectangle.Rectangle": [[267, 3, 1, "", "bottom_left"], [267, 3, 1, "", "bottom_right"], [267, 2, 1, "", "from_box"], [267, 2, 1, "", "get_height"], [267, 2, 1, "", "intersects"], [267, 2, 1, "", "intersects_horizontal"], [267, 2, 1, "", "merge_intersects"], [267, 2, 1, "", "merge_rects"], [267, 2, 1, "", "to_region"], [267, 3, 1, "", "top_left"], [267, 3, 1, "", "top_right"]], "sparkocr.utils.seqeval": [[268, 1, 1, "", "Seqeval"]], "sparkocr.utils.svs": [[270, 0, 0, "-", "phi_cleaning"], [271, 0, 0, "-", "phi_redaction"], [272, 0, 0, "-", "remove-phi"], [273, 0, 0, "-", "tiffparser"], [274, 0, 0, "-", "tile_extraction"]], "sparkocr.utils.svs.phi_cleaning": [[270, 1, 1, "", "CopyOp"], [270, 5, 1, "", "add_description"], [270, 5, 1, "", "check_free_space"], [270, 5, 1, "", "copy_and_strip"], [270, 5, 1, "", "copy_and_strip_all"], [270, 5, 1, "", "delete_associated_image"], [270, 5, 1, "", "delete_associated_metadata"], [270, 5, 1, "", "detect_format"], [270, 5, 1, "", "do_strip_in_place"], [270, 5, 1, "", "file_progress"], [270, 5, 1, "", "generate_unique_id"], [270, 5, 1, "", "get_config_path"], [270, 5, 1, "", "get_csv_message"], [270, 5, 1, "", "get_dir"], [270, 5, 1, "", "get_dir_"], [270, 5, 1, "", "get_filename"], [270, 5, 1, "", "get_files"], [270, 5, 1, "", "get_files_"], [270, 5, 1, "", "get_files_structure"], [270, 5, 1, "", "get_inplace_dir"], [270, 5, 1, "", "get_inplace_files"], [270, 5, 1, "", "get_inplace_info"], [270, 5, 1, "", "inplace_info"], [270, 5, 1, "", "parse_csv"], [270, 5, 1, "", "parse_files"], [270, 5, 1, "", "parse_inplace_files"], [270, 4, 1, "", "predefined_tags"], [270, 5, 1, "", "remove_phi"], [270, 5, 1, "", "remove_tag_section"], [270, 5, 1, "", "resource_path"], [270, 5, 1, "", "test_file_dialog"], [270, 5, 1, "", "track_copy_progress"]], "sparkocr.utils.svs.phi_cleaning.CopyOp": [[270, 3, 1, "", "lock"], [270, 3, 1, "", "original"], [270, 2, 1, "", "read"], [270, 2, 1, "", "update"], [270, 3, 1, "", "value"]], "sparkocr.utils.svs.phi_redaction": [[271, 5, 1, "", "calculate_actual_level_height"], [271, 5, 1, "", "calculate_actual_level_width"], [271, 5, 1, "", "calculate_max_group_mem_gb"], [271, 5, 1, "", "chunk_list"], [271, 5, 1, "", "dataframe_to_detections"], [271, 5, 1, "", "detect_tile_level"], [271, 5, 1, "", "detections_to_dataframe"], [271, 5, 1, "", "df2list"], [271, 5, 1, "", "estimate_svs_memory_gb"], [271, 5, 1, "", "extract_base_name"], [271, 5, 1, "", "extract_svs_name_from_tiles"], [271, 5, 1, "", "find_intersecting_tiles"], [271, 5, 1, "", "find_thumbnail_index"], [271, 5, 1, "", "get_existing_extension"], [271, 5, 1, "", "get_svs_info_from_images"], [271, 5, 1, "", "get_tile_position_and_size"], [271, 5, 1, "", "group_svs_files_by_memory"], [271, 5, 1, "", "prepare_thumbnail_deid"], [271, 5, 1, "", "process_file"], [271, 5, 1, "", "redact_phi_in_tiles"], [271, 5, 1, "", "scale_boxes_to_all_levels"], [271, 5, 1, "", "setup_logging"]], "sparkocr.utils.svs.remove-phi": [[272, 4, 1, "", "input_path"], [272, 4, 1, "", "output_path"]], "sparkocr.utils.svs.tiffparser": [[273, 1, 1, "", "FileHandle"], [273, 1, 1, "", "FileSequence"], [273, 1, 1, "", "LazyConst"], [273, 1, 1, "", "NullContext"], [273, 1, 1, "", "OpenFileCache"], [273, 1, 1, "", "TIFF"], [273, 1, 1, "", "TiffFile"], [273, 6, 1, "", "TiffFileError"], [273, 1, 1, "", "TiffFrame"], [273, 1, 1, "", "TiffPage"], [273, 1, 1, "", "TiffPageSeries"], [273, 1, 1, "", "TiffPages"], [273, 6, 1, "", "TiffParserError"], [273, 1, 1, "", "TiffTag"], [273, 1, 1, "", "TiffTags"], [273, 5, 1, "", "apply_colormap"], [273, 5, 1, "", "asbool"], [273, 5, 1, "", "askopenfilename"], [273, 5, 1, "", "astype"], [273, 5, 1, "", "byteorder_isnative"], [273, 5, 1, "", "bytes2str"], [273, 5, 1, "", "bytestr"], [273, 5, 1, "", "clean_whitespace"], [273, 5, 1, "", "create_output"], [273, 1, 1, "", "dtype"], [273, 5, 1, "", "enumarg"], [273, 5, 1, "", "enumstr"], [273, 5, 1, "", "excel_datetime"], [273, 5, 1, "", "fluoview_description_metadata"], [273, 5, 1, "", "format_size"], [273, 5, 1, "", "getdtype"], [273, 5, 1, "", "hexdump"], [273, 5, 1, "", "identityfunc"], [273, 5, 1, "", "imagej_description"], [273, 5, 1, "", "imagej_description_metadata"], [273, 5, 1, "", "imagej_metadata"], [273, 5, 1, "", "imagej_metadata_tag"], [273, 5, 1, "", "imagej_shape"], [273, 5, 1, "", "imshow"], [273, 5, 1, "", "isprintable"], [273, 4, 1, "", "itemsizes"], [273, 5, 1, "", "json_description"], [273, 5, 1, "", "json_description_metadata"], [273, 5, 1, "", "julian_datetime"], [273, 1, 1, "", "lazyattr"], [273, 5, 1, "", "log_warning"], [273, 5, 1, "", "lsm2bin"], [273, 5, 1, "", "matlabstr2py"], [273, 5, 1, "", "metaseries_description_metadata"], [273, 5, 1, "", "natural_sorted"], [273, 5, 1, "", "nullfunc"], [273, 5, 1, "", "olympusini_metadata"], [273, 5, 1, "", "parse_filenames"], [273, 5, 1, "", "parse_kwargs"], [273, 5, 1, "", "pformat"], [273, 5, 1, "", "pformat_xml"], [273, 5, 1, "", "pilatus_description_metadata"], [273, 5, 1, "", "product"], [273, 5, 1, "", "read_bytes"], [273, 5, 1, "", "read_colormap"], [273, 5, 1, "", "read_cz_lsminfo"], [273, 5, 1, "", "read_cz_sem"], [273, 5, 1, "", "read_exif_ifd"], [273, 5, 1, "", "read_fei_metadata"], [273, 5, 1, "", "read_gps_ifd"], [273, 5, 1, "", "read_interoperability_ifd"], [273, 5, 1, "", "read_json"], [273, 5, 1, "", "read_lsm_channelcolors"], [273, 5, 1, "", "read_lsm_eventlist"], [273, 5, 1, "", "read_lsm_floatpairs"], [273, 5, 1, "", "read_lsm_positions"], [273, 5, 1, "", "read_lsm_scaninfo"], [273, 5, 1, "", "read_lsm_timestamps"], [273, 5, 1, "", "read_metaseries_catalog"], [273, 5, 1, "", "read_micromanager_metadata"], [273, 5, 1, "", "read_mm_header"], [273, 5, 1, "", "read_mm_stamp"], [273, 5, 1, "", "read_nih_image_header"], [273, 5, 1, "", "read_numpy"], [273, 5, 1, "", "read_scanimage_metadata"], [273, 5, 1, "", "read_sis"], [273, 5, 1, "", "read_sis_ini"], [273, 5, 1, "", "read_tags"], [273, 5, 1, "", "read_tvips_header"], [273, 5, 1, "", "read_uic1tag"], [273, 5, 1, "", "read_uic2tag"], [273, 5, 1, "", "read_uic3tag"], [273, 5, 1, "", "read_uic4tag"], [273, 5, 1, "", "read_uic_image_property"], [273, 5, 1, "", "read_uic_tag"], [273, 5, 1, "", "read_utf8"], [273, 5, 1, "", "recarray2dict"], [273, 5, 1, "", "reorient"], [273, 5, 1, "", "repeat_nd"], [273, 5, 1, "", "reshape_axes"], [273, 5, 1, "", "reshape_nd"], [273, 5, 1, "", "scanimage_artist_metadata"], [273, 5, 1, "", "scanimage_description_metadata"], [273, 5, 1, "", "sequence"], [273, 5, 1, "", "snipstr"], [273, 5, 1, "", "squeeze_axes"], [273, 5, 1, "", "stack_pages"], [273, 5, 1, "", "stk_description_metadata"], [273, 5, 1, "", "stripascii"], [273, 5, 1, "", "stripnull"], [273, 5, 1, "", "svs_description_metadata"], [273, 5, 1, "", "transpose_axes"], [273, 5, 1, "", "unpack_rgb"], [273, 5, 1, "", "update_kwargs"], [273, 5, 1, "", "validate_jhove"], [273, 5, 1, "", "xml2dict"]], "sparkocr.utils.svs.tiffparser.FileHandle": [[273, 2, 1, "", "close"], [273, 2, 1, "", "flush"], [273, 3, 1, "id0", "is_file"], [273, 2, 1, "", "memmap_array"], [273, 3, 1, "", "name"], [273, 2, 1, "", "open"], [273, 3, 1, "", "path"], [273, 2, 1, "", "read"], [273, 2, 1, "", "read_array"], [273, 2, 1, "", "read_record"], [273, 2, 1, "", "read_segments"], [273, 2, 1, "", "readinto"], [273, 2, 1, "", "seek"], [273, 3, 1, "", "size"], [273, 2, 1, "", "tell"], [273, 2, 1, "", "write"], [273, 2, 1, "", "write_array"], [273, 2, 1, "", "write_empty"]], "sparkocr.utils.svs.tiffparser.FileSequence": [[273, 2, 1, "", "asarray"], [273, 3, 1, "id1", "axes"], [273, 2, 1, "", "close"], [273, 3, 1, "id2", "files"], [273, 3, 1, "", "fromfile"], [273, 3, 1, "", "pattern"], [273, 3, 1, "id3", "shape"]], "sparkocr.utils.svs.tiffparser.OpenFileCache": [[273, 2, 1, "", "clear"], [273, 2, 1, "", "close"], [273, 3, 1, "", "files"], [273, 3, 1, "", "lock"], [273, 2, 1, "", "open"], [273, 3, 1, "", "past"], [273, 3, 1, "", "size"]], "sparkocr.utils.svs.tiffparser.TIFF": [[273, 2, 1, "", "ALLOCATIONGRANULARITY"], [273, 2, 1, "", "AXES_LABELS"], [273, 2, 1, "", "BIG_BE"], [273, 2, 1, "", "BIG_LE"], [273, 2, 1, "", "CLASSIC_BE"], [273, 2, 1, "", "CLASSIC_LE"], [273, 2, 1, "", "COLORRESPONSEUNIT"], [273, 2, 1, "", "COMPESSORS"], [273, 2, 1, "", "COMPRESSION"], [273, 2, 1, "", "CZ_LSMINFO"], [273, 2, 1, "", "CZ_LSMINFO_DATATYPES"], [273, 2, 1, "", "CZ_LSMINFO_DIMENSIONS"], [273, 2, 1, "", "CZ_LSMINFO_READERS"], [273, 2, 1, "", "CZ_LSMINFO_SCANINFO_ARRAYS"], [273, 2, 1, "", "CZ_LSMINFO_SCANINFO_ATTRIBUTES"], [273, 2, 1, "", "CZ_LSMINFO_SCANINFO_STRUCTS"], [273, 2, 1, "", "CZ_LSMINFO_SCANTYPE"], [273, 2, 1, "", "CZ_LSMINFO_TYPEOFDATA"], [273, 2, 1, "", "DATATYPES"], [273, 2, 1, "", "DATA_DTYPES"], [273, 2, 1, "", "DATA_FORMATS"], [273, 2, 1, "", "DECOMPESSORS"], [273, 2, 1, "", "EXIF_TAGS"], [273, 2, 1, "", "EXTRASAMPLE"], [273, 2, 1, "", "FILEOPEN_FILTER"], [273, 2, 1, "", "FILETYPE"], [273, 2, 1, "", "FILE_EXTENSIONS"], [273, 2, 1, "", "FILE_FLAGS"], [273, 2, 1, "", "FILLORDER"], [273, 2, 1, "", "FRAME_ATTRS"], [273, 2, 1, "", "GEO_CODES"], [273, 2, 1, "", "GEO_KEYS"], [273, 2, 1, "", "GPS_TAGS"], [273, 2, 1, "", "GRAYRESPONSEUNIT"], [273, 2, 1, "", "GROUP4OPT"], [273, 2, 1, "", "IOP_TAGS"], [273, 2, 1, "", "MAXWORKERS"], [273, 2, 1, "", "MM_DIMENSIONS"], [273, 2, 1, "", "MM_HEADER"], [273, 2, 1, "", "NDPI_LE"], [273, 2, 1, "", "NDPI_TAGS"], [273, 2, 1, "", "NIH_COLORTABLE_TYPE"], [273, 2, 1, "", "NIH_CURVEFIT_TYPE"], [273, 2, 1, "", "NIH_IMAGE_HEADER"], [273, 2, 1, "", "NIH_LUTMODE_TYPE"], [273, 2, 1, "", "NIH_UNITS_TYPE"], [273, 2, 1, "", "OFILETYPE"], [273, 2, 1, "", "ORIENTATION"], [273, 2, 1, "", "PHOTOMETRIC"], [273, 2, 1, "", "PILATUS_HEADER"], [273, 2, 1, "", "PLANARCONFIG"], [273, 2, 1, "", "PREDICTOR"], [273, 2, 1, "", "PREDICTORS"], [273, 2, 1, "", "RESUNIT"], [273, 2, 1, "", "SAMPLEFORMAT"], [273, 2, 1, "", "SAMPLE_DTYPES"], [273, 2, 1, "", "TAGS"], [273, 2, 1, "", "TAG_ATTRIBUTES"], [273, 2, 1, "", "TAG_ENUM"], [273, 2, 1, "", "TAG_READERS"], [273, 2, 1, "", "TAG_TUPLE"], [273, 2, 1, "", "THRESHHOLD"], [273, 2, 1, "", "TVIPS_HEADER_V1"], [273, 2, 1, "", "TVIPS_HEADER_V2"], [273, 2, 1, "", "UIC_TAGS"], [273, 2, 1, "", "UNPREDICTORS"]], "sparkocr.utils.svs.tiffparser.TiffFile": [[273, 2, 1, "", "asarray"], [273, 2, 1, "", "close"], [273, 2, 1, "", "fei_metadata"], [273, 2, 1, "", "flags"], [273, 2, 1, "", "fluoview_metadata"], [273, 2, 1, "", "fstat"], [273, 2, 1, "", "imagej_metadata"], [273, 3, 1, "", "is_flag"], [273, 2, 1, "", "is_mdgel"], [273, 2, 1, "", "is_uniform"], [273, 2, 1, "", "mdgel_metadata"], [273, 2, 1, "", "metaseries_metadata"], [273, 2, 1, "", "micromanager_metadata"], [273, 2, 1, "", "nih_metadata"], [273, 3, 1, "", "pages"], [273, 2, 1, "", "pilatus_metadata"], [273, 2, 1, "", "scanimage_metadata"], [273, 2, 1, "id4", "series"], [273, 2, 1, "", "shaped_metadata"], [273, 2, 1, "", "sis_metadata"], [273, 2, 1, "", "stk_metadata"]], "sparkocr.utils.svs.tiffparser.TiffFrame": [[273, 2, 1, "", "asarray"], [273, 2, 1, "", "aspage"], [273, 2, 1, "", "asrgb"], [273, 3, 1, "", "index"], [273, 3, 1, "", "is_mdgel"], [273, 3, 1, "", "offset"], [273, 3, 1, "", "pages"], [273, 3, 1, "", "parent"]], "sparkocr.utils.svs.tiffparser.TiffPage": [[273, 2, 1, "", "andor_tags"], [273, 2, 1, "", "asarray"], [273, 2, 1, "", "aspage"], [273, 2, 1, "", "asrgb"], [273, 3, 1, "id5", "axes"], [273, 3, 1, "", "bitspersample"], [273, 3, 1, "id6", "colormap"], [273, 3, 1, "", "compression"], [273, 3, 1, "", "databytecounts"], [273, 3, 1, "", "dataoffsets"], [273, 2, 1, "", "decode"], [273, 3, 1, "", "description"], [273, 3, 1, "", "description1"], [273, 3, 1, "id7", "dtype"], [273, 2, 1, "", "epics_tags"], [273, 3, 1, "", "extrasamples"], [273, 3, 1, "", "fillorder"], [273, 2, 1, "", "flags"], [273, 2, 1, "", "geotiff_tags"], [273, 2, 1, "", "hash"], [273, 3, 1, "", "imagedepth"], [273, 3, 1, "", "imagelength"], [273, 3, 1, "", "imagewidth"], [273, 3, 1, "id8", "index"], [273, 2, 1, "", "is_contiguous"], [273, 2, 1, "", "is_final"], [273, 2, 1, "", "is_imagej"], [273, 2, 1, "", "is_memmappable"], [273, 2, 1, "", "is_ndpi"], [273, 2, 1, "", "is_shaped"], [273, 2, 1, "", "maxworkers"], [273, 2, 1, "", "ndpi_tags"], [273, 3, 1, "", "nodata"], [273, 3, 1, "", "offset"], [273, 2, 1, "", "pages"], [273, 3, 1, "", "parent"], [273, 3, 1, "", "photometric"], [273, 3, 1, "", "planarconfig"], [273, 3, 1, "", "predictor"], [273, 3, 1, "", "rowsperstrip"], [273, 3, 1, "", "sampleformat"], [273, 3, 1, "", "samplesperpixel"], [273, 3, 1, "id9", "shape"], [273, 3, 1, "id10", "shaped"], [273, 3, 1, "", "software"], [273, 3, 1, "", "subfiletype"], [273, 3, 1, "", "tags"], [273, 3, 1, "", "tiledepth"], [273, 3, 1, "", "tilelength"], [273, 3, 1, "", "tilewidth"]], "sparkocr.utils.svs.tiffparser.TiffPageSeries": [[273, 2, 1, "", "asarray"], [273, 3, 1, "id11", "axes"], [273, 3, 1, "id12", "dtype"], [273, 3, 1, "", "index"], [273, 3, 1, "", "kind"], [273, 3, 1, "", "name"], [273, 2, 1, "id14", "offset"], [273, 3, 1, "", "pages"], [273, 3, 1, "id13", "shape"], [273, 3, 1, "", "transform"]], "sparkocr.utils.svs.tiffparser.TiffPages": [[273, 3, 1, "", "pages"], [273, 3, 1, "", "parent"]], "sparkocr.utils.svs.tiffparser.TiffTag": [[273, 3, 1, "id15", "code"], [273, 3, 1, "id16", "count"], [273, 3, 1, "id17", "dtype"], [273, 3, 1, "", "name"], [273, 3, 1, "id18", "offset"], [273, 3, 1, "id19", "value"], [273, 3, 1, "id20", "valueoffset"]], "sparkocr.utils.svs.tiffparser.TiffTags": [[273, 2, 1, "", "add"], [273, 2, 1, "", "get"], [273, 2, 1, "", "getall"], [273, 2, 1, "", "items"], [273, 2, 1, "", "keys"], [273, 2, 1, "", "values"]], "sparkocr.utils.svs.tiffparser.dtype": [[273, 3, 1, "", "itemsize"]], "sparkocr.utils.svs.tiffparser.lazyattr": [[273, 3, 1, "", "func"]], "sparkocr.utils.svs.tile_extraction": [[274, 5, 1, "", "chunk"], [274, 5, 1, "", "extract_tile"], [274, 5, 1, "", "find_thumbnail_page"], [274, 5, 1, "", "get_mid_level_tiles"], [274, 5, 1, "", "get_optimal_workers_and_batch"], [274, 5, 1, "", "process_svs"], [274, 5, 1, "", "svs_to_tiles"]], "sparkocr.utils.torchutils": [[275, 1, 1, "", "ImageIterableDataset"], [275, 1, 1, "", "PandasDataset"], [275, 5, 1, "", "get_chunk"], [275, 5, 1, "", "pad_or_cut"]], "sparkocr.utils.torchutils.PandasDataset": [[275, 3, 1, "", "dataframe"], [275, 3, 1, "", "device"], [275, 3, 1, "", "target_key"]], "test_basic_lp": [[276, 1, 1, "", "TestLightPipeline"]], "test_basic_lp.TestLightPipeline": [[276, 2, 1, "", "get_pipeline"], [276, 2, 1, "", "test_basic_lp"], [276, 2, 1, "", "test_binary_input_lp"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:data", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"sparkocr": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "spark": 1, "ocr": [1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "document": 1, "content": [1, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276], "quick": 1, "start": 1, "base": [3, 4], "submodul": [3, 7, 13, 17, 19, 21, 22, 25, 28, 35, 45, 47, 48, 50, 56, 58, 119, 124, 137, 148, 153, 193, 195, 197, 207, 223, 230, 235, 244, 248, 255, 256, 259, 265, 269], "light_pipelin": 4, "modul": [4, 5, 6, 9, 11, 12, 14, 15, 16, 18, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 257, 258, 260, 261, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277], "class": [4, 6, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 249, 250, 255, 257, 258, 260, 264, 265, 266, 267, 268, 270, 273, 275, 276], "databrick": 5, "function": [5, 7, 9, 16, 37, 121, 186, 241, 242, 243, 245, 246, 251, 252, 253, 254, 257, 261, 263, 265, 266, 270, 271, 273, 274, 275], "attribut": [5, 7, 11, 15, 33, 93, 94, 115, 118, 182, 186, 224, 245, 251, 252, 255, 258, 265, 270, 273], "enum": 6, "subpackag": [7, 17, 20, 21, 47, 193, 255, 259, 265], "packag": [7, 13, 137, 193, 195, 255, 265], "intern": 8, "metric": 9, "optim": 10, "pretrain": [11, 12, 13, 14], "anonymization_pipeline_build": 11, "dicom_pretrained_pipelin": 12, "pretrained_pipelin": 14, "schema": 15, "test": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "conftest": 16, "eval": [18, 19, 20], "icdar": [18, 19], "icdar_table_extractor": 18, "pipelin": [22, 23], "test_pdf": 23, "test_start": 24, "transform": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "annot": [25, 26, 27, 122, 123, 124], "test_form_relation_extractor": 26, "test_geo_relation_extractor": 27, "detector": [28, 29, 30, 31, 32, 33, 34, 130, 131, 132, 133, 134, 135, 136, 137], "test_image_checkbox_detector": 29, "test_image_document_region_detector": 30, "test_image_layout_analyzer_dit": 31, "test_image_text_detector": 32, "test_image_text_detector_craft": 33, "test_image_text_detector_v2": 34, "dicom": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "test_dicom_deidentifi": 36, "test_dicom_draw_region": 37, "test_dicom_metadata_deidentifi": 38, "test_dicom_splitt": 39, "test_dicom_to_image_v2": 40, "test_dicom_to_image_v3": 41, "test_dicom_to_metadata": 42, "test_dicom_to_pdf": 43, "test_dicom_update_pdf": 44, "embed": [45, 46, 153, 154], "test_vit_image_embed": 46, "inpaint": [48, 49, 194, 195, 266], "test_image_inpaint": 49, "ner": [50, 51, 52, 53, 54, 55, 196, 197, 198, 199, 200, 201], "test_hocr_to_featur": 51, "test_visual_document_n": 52, "test_visual_document_ner_geo": 53, "test_visual_document_ner_layoutlm_v1": 54, "test_visual_document_ner_lilt": 55, "reader": [56, 57, 219, 220, 221, 222, 223, 224, 225, 226, 227], "test_alab_read": 57, "recogn": [58, 59, 60, 228, 229, 230], "test_image_to_text_v2": 59, "test_image_to_text_v3": 60, "test_binary_to_imag": 61, "test_datasetread": 62, "test_dicom_metadata_obfusc": 63, "test_dicom_to_imag": 64, "test_display_t": 65, "test_doc_to_pdf": 66, "test_doc_to_text": 67, "test_doc_to_text_t": 68, "test_foundationone_pars": 69, "test_hocr_merg": 70, "test_hocr_to_imag": 71, "test_hocr_to_text_t": 72, "test_image_adaptive_binar": 73, "test_image_adaptive_threshold": 74, "test_image_binar": 75, "test_image_brands_ocr": 76, "test_image_cells_to_text_t": 77, "test_image_cropp": 78, "test_image_draw_annot": 79, "test_image_draw_region": 80, "test_image_eros": 81, "test_image_gpu_transform": 82, "test_image_handwritten_text_recogn": 83, "test_image_layout_analyz": 84, "test_image_morphology_oper": 85, "test_image_noise_scor": 86, "test_image_regions_merg": 87, "test_image_remove_object": 88, "test_image_signature_detector": 89, "test_image_skew_corrector": 90, "test_image_split_region": 91, "test_image_table_cells_detector": 92, "test_image_table_detector": 93, "test_image_text_clean": 94, "test_image_to_dicom": 95, "test_image_to_hocr": 96, "test_image_to_pdf": 97, "test_image_to_text": 98, "test_image_transform": 99, "test_ner_output_clean": 100, "test_ocr_resource_download": 101, "test_pdf_assembl": 102, "test_pdf_draw_region": 103, "test_pdf_to_form": 104, "test_pdf_to_hocr": 105, "test_pdf_to_imag": 106, "test_pdf_to_text": 107, "test_pdf_to_text_t": 108, "test_position_find": 109, "test_ppt_to_pdf": 110, "test_ppt_to_text_t": 111, "test_text_to_pdf": 112, "test_update_text_posit": 113, "test_visual_document_classifi": 114, "test_visual_document_classifier_lilt": 115, "test_visual_document_classifier_v3": 116, "test_visual_document_processor": 117, "test_visual_question_answ": 118, "token": [119, 120, 232, 233, 234, 235], "test_hocr_token": 120, "util": [121, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "form_relation_extractor": 122, "geo_relation_extractor": 123, "base64_to_binari": 125, "base64_to_imag": 126, "binary_to_imag": 127, "chart_to_text_t": 128, "dataset_read": 129, "document_layout_analyz": 130, "image_checkbox_detector": 131, "image_document_region_detector": 132, "image_text_detector": 133, "image_text_detector_craft": 134, "image_text_detector_dit": 135, "image_text_detector_v2": 136, "base_dicom": 138, "dicom_deidentifi": 139, "dicom_draw_region": 140, "dicom_metadata_deidentifi": 141, "dicom_splitt": 142, "dicom_to_image_v2": 143, "dicom_to_image_v3": 144, "dicom_to_metadata": 145, "dicom_to_pdf": 146, "dicom_update_pdf": 147, "dicom_to_imag": 149, "doc_to_pdf": 150, "doc_to_text": 151, "doc_to_text_t": 152, "vit_image_embed": 154, "extended_java_wrapp": 155, "foundationone_pars": 156, "hocr_merg": 157, "hocr_to_imag": 158, "hocr_to_text_t": 159, "image_adaptive_binar": 160, "image_adaptive_scal": 161, "image_adaptive_threshold": 162, "image_base_transform": 163, "image_binar": 164, "image_brands_ocr": 165, "image_cells_to_text_t": 166, "image_cropp": 167, "image_draw_annot": 168, "image_draw_region": 169, "image_enhance_contrast": 170, "image_eros": 171, "image_gpu_transform": 172, "image_handwritten_detector": 173, "image_handwritten_text_recogn": 174, "image_homogenize_light": 175, "image_layout_analyz": 176, "image_morphology_operartion1": 177, "image_morphology_oper": 178, "image_noise_scor": 179, "image_remove_background": 180, "image_remove_glar": 181, "image_remove_object": 182, "image_scal": 183, "image_skew_corrector": 184, "image_split_region": 185, "image_table_cell_detector": 186, "image_table_detector": 187, "image_text_clean": 188, "image_to_dicom": 189, "image_to_hocr": 190, "image_to_text": 191, "image_transform": 192, "image_inpaint": 194, "hocr_to_featur": 196, "visual_document_n": 198, "visual_document_ner_geo": 199, "visual_document_ner_layoutlm_v1": 200, "visual_document_ner_lilt": 201, "ner_output_clean": 202, "ocr_resource_download": 203, "param": 204, "pdf": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "image_to_pdf": 205, "image_to_text_pdf": 206, "pdf_assembl": 208, "pdf_draw_region": 209, "pdf_to_form": 210, "pdf_to_hocr": 211, "pdf_to_imag": 212, "pdf_to_text": 213, "pdf_to_text_t": 214, "text_to_pdf": 215, "position_find": 216, "ppt_to_pdf": 217, "ppt_to_text_t": 218, "alab_read": 219, "docvqa_read": 220, "funsd_read": 221, "iam_read": 222, "mixed_iter": 224, "rvlcdip_read": 225, "sroie_read": 226, "tacd_read": 227, "image_to_text_v2": 228, "image_to_text_v3": 229, "regions_merg": 231, "bros_hocr_token": 232, "hocr_document_assembl": 233, "hocr_token": 234, "update_text_posit": 236, "visual_document_classifi": 237, "visual_document_classifier_lilt": 238, "visual_document_classifier_v3": 239, "visual_document_processor": 240, "visual_encoder_decod": [241, 242, 243, 244, 245, 246], "dit": 241, "lilt": 242, "engine_for_finetun": 243, "optim_factori": 245, "visual_question_answ": 247, "vqa": [248, 249, 250], "visual_question_answering_donut": 249, "visual_question_answering_pix2struct": 250, "compat_pkg": 251, "craft": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "craft_util": 252, "file_util": 253, "image_util": 254, "model": [256, 257, 258, 259, 260], "basenet": [256, 257], "vgg16_bn": 257, "craftnet": 258, "refinenet": 260, "predict": 261, "torch_util": 262, "helper": 263, "hocr_render": 264, "rectangl": 267, "seqev": 268, "sv": [269, 270, 271, 272, 273, 274], "phi_clean": 270, "phi_redact": 271, "remov": 272, "phi": 272, "tiffpars": 273, "tile_extract": 274, "torchutil": 275, "test_basic_lp": 276, "api": 277, "refer": 277}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparkocr": [[0, "module-sparkocr"], [2, "module-sparkocr"], [7, "module-sparkocr"]], "Spark OCR Documentation": [[1, "spark-ocr-documentation"]], "Content": [[1, "content"]], "Quick Start": [[1, "quick-start"]], "sparkocr.base": [[3, "module-sparkocr.base"]], "Submodules": [[3, "submodules"], [7, "submodules"], [13, "submodules"], [17, "submodules"], [19, "submodules"], [21, "submodules"], [22, "submodules"], [25, "submodules"], [28, "submodules"], [35, "submodules"], [45, "submodules"], [47, "submodules"], [48, "submodules"], [50, "submodules"], [56, "submodules"], [58, "submodules"], [119, "submodules"], [124, "submodules"], [137, "submodules"], [148, "submodules"], [153, "submodules"], [193, "submodules"], [195, "submodules"], [197, "submodules"], [207, "submodules"], [223, "submodules"], [230, "submodules"], [235, "submodules"], [244, "submodules"], [248, "submodules"], [255, "submodules"], [256, "submodules"], [259, "submodules"], [265, "submodules"], [269, "submodules"]], "sparkocr.base.light_pipelines": [[4, "module-sparkocr.base.light_pipelines"]], "Module Contents": [[4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [9, "module-contents"], [11, "module-contents"], [12, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [23, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"]], "Classes": [[4, "classes"], [6, "classes"], [9, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [18, "classes"], [23, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [120, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [249, "classes"], [250, "classes"], [255, "classes"], [257, "classes"], [258, "classes"], [260, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [270, "classes"], [273, "classes"], [275, "classes"], [276, "classes"]], "sparkocr.databricks": [[5, "module-sparkocr.databricks"]], "Functions": [[5, "functions"], [7, "functions"], [9, "functions"], [16, "functions"], [37, "functions"], [121, "functions"], [186, "functions"], [241, "functions"], [242, "functions"], [243, "functions"], [245, "functions"], [246, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [257, "functions"], [261, "functions"], [263, "functions"], [265, "functions"], [266, "functions"], [270, "functions"], [271, "functions"], [273, "functions"], [274, "functions"], [275, "functions"]], "Attributes": [[5, "attributes"], [7, "attributes"], [11, "attributes"], [15, "attributes"], [33, "attributes"], [93, "attributes"], [94, "attributes"], [115, "attributes"], [118, "attributes"], [182, "attributes"], [186, "attributes"], [224, "attributes"], [245, "attributes"], [251, "attributes"], [252, "attributes"], [255, "attributes"], [258, "attributes"], [265, "attributes"], [270, "attributes"], [273, "attributes"]], "sparkocr.enums": [[6, "module-sparkocr.enums"]], "Subpackages": [[7, "subpackages"], [17, "subpackages"], [20, "subpackages"], [21, "subpackages"], [47, "subpackages"], [193, "subpackages"], [255, "subpackages"], [259, "subpackages"], [265, "subpackages"]], "Package Contents": [[7, "package-contents"], [13, "package-contents"], [137, "package-contents"], [193, "package-contents"], [195, "package-contents"], [255, "package-contents"], [265, "package-contents"]], "sparkocr.internal": [[8, "module-sparkocr.internal"]], "sparkocr.metrics": [[9, "module-sparkocr.metrics"]], "sparkocr.optimized": [[10, "module-sparkocr.optimized"]], "sparkocr.pretrained.anonymization_pipeline_builder": [[11, "module-sparkocr.pretrained.anonymization_pipeline_builder"]], "sparkocr.pretrained.dicom_pretrained_pipeline": [[12, "module-sparkocr.pretrained.dicom_pretrained_pipeline"]], "sparkocr.pretrained": [[13, "module-sparkocr.pretrained"]], "sparkocr.pretrained.pretrained_pipeline": [[14, "module-sparkocr.pretrained.pretrained_pipeline"]], "sparkocr.schemas": [[15, "module-sparkocr.schemas"]], "sparkocr.tests.conftest": [[16, "module-sparkocr.tests.conftest"]], "sparkocr.tests": [[17, "module-sparkocr.tests"]], "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor": [[18, "module-sparkocr.tests.ocr.eval.icdar.icdar_table_extractor"]], "sparkocr.tests.ocr.eval.icdar": [[19, "module-sparkocr.tests.ocr.eval.icdar"]], "sparkocr.tests.ocr.eval": [[20, "module-sparkocr.tests.ocr.eval"]], "sparkocr.tests.ocr": [[21, "module-sparkocr.tests.ocr"]], "sparkocr.tests.ocr.pipelines": [[22, "module-sparkocr.tests.ocr.pipelines"]], "sparkocr.tests.ocr.pipelines.test_pdf": [[23, "module-sparkocr.tests.ocr.pipelines.test_pdf"]], "sparkocr.tests.ocr.test_start": [[24, "module-sparkocr.tests.ocr.test_start"]], "sparkocr.tests.ocr.transformers.annotators": [[25, "module-sparkocr.tests.ocr.transformers.annotators"]], "sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor": [[26, "module-sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor"]], "sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor": [[27, "module-sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor"]], "sparkocr.tests.ocr.transformers.detectors": [[28, "module-sparkocr.tests.ocr.transformers.detectors"]], "sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector": [[29, "module-sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector": [[30, "module-sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit": [[31, "module-sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector": [[32, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft": [[33, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2": [[34, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2"]], "sparkocr.tests.ocr.transformers.dicom": [[35, "module-sparkocr.tests.ocr.transformers.dicom"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier": [[36, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions": [[37, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier": [[38, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter": [[39, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2": [[40, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3": [[41, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata": [[42, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf": [[43, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf": [[44, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf"]], "sparkocr.tests.ocr.transformers.embeddings": [[45, "module-sparkocr.tests.ocr.transformers.embeddings"]], "sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings": [[46, "module-sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings"]], "sparkocr.tests.ocr.transformers": [[47, "module-sparkocr.tests.ocr.transformers"]], "sparkocr.tests.ocr.transformers.inpainting": [[48, "module-sparkocr.tests.ocr.transformers.inpainting"]], "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting": [[49, "module-sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting"]], "sparkocr.tests.ocr.transformers.ner": [[50, "module-sparkocr.tests.ocr.transformers.ner"]], "sparkocr.tests.ocr.transformers.ner.test_hocr_to_features": [[51, "module-sparkocr.tests.ocr.transformers.ner.test_hocr_to_features"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner": [[52, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo": [[53, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1": [[54, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt": [[55, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt"]], "sparkocr.tests.ocr.transformers.readers": [[56, "module-sparkocr.tests.ocr.transformers.readers"]], "sparkocr.tests.ocr.transformers.readers.test_alab_readers": [[57, "module-sparkocr.tests.ocr.transformers.readers.test_alab_readers"]], "sparkocr.tests.ocr.transformers.recognizers": [[58, "module-sparkocr.tests.ocr.transformers.recognizers"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2": [[59, "module-sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3": [[60, "module-sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3"]], "sparkocr.tests.ocr.transformers.test_binary_to_image": [[61, "module-sparkocr.tests.ocr.transformers.test_binary_to_image"]], "sparkocr.tests.ocr.transformers.test_datasetreader": [[62, "module-sparkocr.tests.ocr.transformers.test_datasetreader"]], "sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator": [[63, "module-sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator"]], "sparkocr.tests.ocr.transformers.test_dicom_to_image": [[64, "module-sparkocr.tests.ocr.transformers.test_dicom_to_image"]], "sparkocr.tests.ocr.transformers.test_display_table": [[65, "module-sparkocr.tests.ocr.transformers.test_display_table"]], "sparkocr.tests.ocr.transformers.test_doc_to_pdf": [[66, "module-sparkocr.tests.ocr.transformers.test_doc_to_pdf"]], "sparkocr.tests.ocr.transformers.test_doc_to_text": [[67, "module-sparkocr.tests.ocr.transformers.test_doc_to_text"]], "sparkocr.tests.ocr.transformers.test_doc_to_text_table": [[68, "module-sparkocr.tests.ocr.transformers.test_doc_to_text_table"]], "sparkocr.tests.ocr.transformers.test_foundationone_parser": [[69, "module-sparkocr.tests.ocr.transformers.test_foundationone_parser"]], "sparkocr.tests.ocr.transformers.test_hocr_merger": [[70, "module-sparkocr.tests.ocr.transformers.test_hocr_merger"]], "sparkocr.tests.ocr.transformers.test_hocr_to_image": [[71, "module-sparkocr.tests.ocr.transformers.test_hocr_to_image"]], "sparkocr.tests.ocr.transformers.test_hocr_to_text_table": [[72, "module-sparkocr.tests.ocr.transformers.test_hocr_to_text_table"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer": [[73, "module-sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding": [[74, "module-sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding"]], "sparkocr.tests.ocr.transformers.test_image_binarizer": [[75, "module-sparkocr.tests.ocr.transformers.test_image_binarizer"]], "sparkocr.tests.ocr.transformers.test_image_brands_ocr": [[76, "module-sparkocr.tests.ocr.transformers.test_image_brands_ocr"]], "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table": [[77, "module-sparkocr.tests.ocr.transformers.test_image_cells_to_text_table"]], "sparkocr.tests.ocr.transformers.test_image_cropper": [[78, "module-sparkocr.tests.ocr.transformers.test_image_cropper"]], "sparkocr.tests.ocr.transformers.test_image_draw_annotations": [[79, "module-sparkocr.tests.ocr.transformers.test_image_draw_annotations"]], "sparkocr.tests.ocr.transformers.test_image_draw_regions": [[80, "module-sparkocr.tests.ocr.transformers.test_image_draw_regions"]], "sparkocr.tests.ocr.transformers.test_image_erosion": [[81, "module-sparkocr.tests.ocr.transformers.test_image_erosion"]], "sparkocr.tests.ocr.transformers.test_image_gpu_transform": [[82, "module-sparkocr.tests.ocr.transformers.test_image_gpu_transform"]], "sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer": [[83, "module-sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer"]], "sparkocr.tests.ocr.transformers.test_image_layout_analyzer": [[84, "module-sparkocr.tests.ocr.transformers.test_image_layout_analyzer"]], "sparkocr.tests.ocr.transformers.test_image_morphology_operation": [[85, "module-sparkocr.tests.ocr.transformers.test_image_morphology_operation"]], "sparkocr.tests.ocr.transformers.test_image_noise_scorer": [[86, "module-sparkocr.tests.ocr.transformers.test_image_noise_scorer"]], "sparkocr.tests.ocr.transformers.test_image_regions_merger": [[87, "module-sparkocr.tests.ocr.transformers.test_image_regions_merger"]], "sparkocr.tests.ocr.transformers.test_image_remove_objects": [[88, "module-sparkocr.tests.ocr.transformers.test_image_remove_objects"]], "sparkocr.tests.ocr.transformers.test_image_signature_detector": [[89, "module-sparkocr.tests.ocr.transformers.test_image_signature_detector"]], "sparkocr.tests.ocr.transformers.test_image_skew_corrector": [[90, "module-sparkocr.tests.ocr.transformers.test_image_skew_corrector"]], "sparkocr.tests.ocr.transformers.test_image_split_regions": [[91, "module-sparkocr.tests.ocr.transformers.test_image_split_regions"]], "sparkocr.tests.ocr.transformers.test_image_table_cells_detector": [[92, "module-sparkocr.tests.ocr.transformers.test_image_table_cells_detector"]], "sparkocr.tests.ocr.transformers.test_image_table_detector": [[93, "module-sparkocr.tests.ocr.transformers.test_image_table_detector"]], "sparkocr.tests.ocr.transformers.test_image_text_cleaner": [[94, "module-sparkocr.tests.ocr.transformers.test_image_text_cleaner"]], "sparkocr.tests.ocr.transformers.test_image_to_dicom": [[95, "module-sparkocr.tests.ocr.transformers.test_image_to_dicom"]], "sparkocr.tests.ocr.transformers.test_image_to_hocr": [[96, "module-sparkocr.tests.ocr.transformers.test_image_to_hocr"]], "sparkocr.tests.ocr.transformers.test_image_to_pdf": [[97, "module-sparkocr.tests.ocr.transformers.test_image_to_pdf"]], "sparkocr.tests.ocr.transformers.test_image_to_text": [[98, "module-sparkocr.tests.ocr.transformers.test_image_to_text"]], "sparkocr.tests.ocr.transformers.test_image_transformer": [[99, "module-sparkocr.tests.ocr.transformers.test_image_transformer"]], "sparkocr.tests.ocr.transformers.test_ner_output_cleaner": [[100, "module-sparkocr.tests.ocr.transformers.test_ner_output_cleaner"]], "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader": [[101, "module-sparkocr.tests.ocr.transformers.test_ocr_resource_downloader"]], "sparkocr.tests.ocr.transformers.test_pdf_assembler": [[102, "module-sparkocr.tests.ocr.transformers.test_pdf_assembler"]], "sparkocr.tests.ocr.transformers.test_pdf_draw_regions": [[103, "module-sparkocr.tests.ocr.transformers.test_pdf_draw_regions"]], "sparkocr.tests.ocr.transformers.test_pdf_to_form": [[104, "module-sparkocr.tests.ocr.transformers.test_pdf_to_form"]], "sparkocr.tests.ocr.transformers.test_pdf_to_hocr": [[105, "module-sparkocr.tests.ocr.transformers.test_pdf_to_hocr"]], "sparkocr.tests.ocr.transformers.test_pdf_to_image": [[106, "module-sparkocr.tests.ocr.transformers.test_pdf_to_image"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text": [[107, "module-sparkocr.tests.ocr.transformers.test_pdf_to_text"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text_table": [[108, "module-sparkocr.tests.ocr.transformers.test_pdf_to_text_table"]], "sparkocr.tests.ocr.transformers.test_position_finder": [[109, "module-sparkocr.tests.ocr.transformers.test_position_finder"]], "sparkocr.tests.ocr.transformers.test_ppt_to_pdf": [[110, "module-sparkocr.tests.ocr.transformers.test_ppt_to_pdf"]], "sparkocr.tests.ocr.transformers.test_ppt_to_text_table": [[111, "module-sparkocr.tests.ocr.transformers.test_ppt_to_text_table"]], "sparkocr.tests.ocr.transformers.test_text_to_pdf": [[112, "module-sparkocr.tests.ocr.transformers.test_text_to_pdf"]], "sparkocr.tests.ocr.transformers.test_update_text_position": [[113, "module-sparkocr.tests.ocr.transformers.test_update_text_position"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier": [[114, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt": [[115, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3": [[116, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3"]], "sparkocr.tests.ocr.transformers.test_visual_document_processor": [[117, "module-sparkocr.tests.ocr.transformers.test_visual_document_processor"]], "sparkocr.tests.ocr.transformers.test_visual_question_answering": [[118, "module-sparkocr.tests.ocr.transformers.test_visual_question_answering"]], "sparkocr.tests.ocr.transformers.tokenizer": [[119, "module-sparkocr.tests.ocr.transformers.tokenizer"]], "sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer": [[120, "module-sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer"]], "sparkocr.tests.ocr.utils": [[121, "module-sparkocr.tests.ocr.utils"]], "sparkocr.transformers.annotators.form_relation_extractor": [[122, "module-sparkocr.transformers.annotators.form_relation_extractor"]], "sparkocr.transformers.annotators.geo_relation_extractor": [[123, "module-sparkocr.transformers.annotators.geo_relation_extractor"]], "sparkocr.transformers.annotators": [[124, "module-sparkocr.transformers.annotators"]], "sparkocr.transformers.base64_to_binary": [[125, "module-sparkocr.transformers.base64_to_binary"]], "sparkocr.transformers.base64_to_image": [[126, "module-sparkocr.transformers.base64_to_image"]], "sparkocr.transformers.binary_to_image": [[127, "module-sparkocr.transformers.binary_to_image"]], "sparkocr.transformers.chart_to_text_table": [[128, "module-sparkocr.transformers.chart_to_text_table"]], "sparkocr.transformers.dataset_reader": [[129, "module-sparkocr.transformers.dataset_reader"]], "sparkocr.transformers.detectors.document_layout_analyzer": [[130, "module-sparkocr.transformers.detectors.document_layout_analyzer"]], "sparkocr.transformers.detectors.image_checkbox_detector": [[131, "module-sparkocr.transformers.detectors.image_checkbox_detector"]], "sparkocr.transformers.detectors.image_document_region_detector": [[132, "module-sparkocr.transformers.detectors.image_document_region_detector"]], "sparkocr.transformers.detectors.image_text_detector": [[133, "module-sparkocr.transformers.detectors.image_text_detector"]], "sparkocr.transformers.detectors.image_text_detector_craft": [[134, "module-sparkocr.transformers.detectors.image_text_detector_craft"]], "sparkocr.transformers.detectors.image_text_detector_dit": [[135, "module-sparkocr.transformers.detectors.image_text_detector_dit"]], "sparkocr.transformers.detectors.image_text_detector_v2": [[136, "module-sparkocr.transformers.detectors.image_text_detector_v2"]], "sparkocr.transformers.detectors": [[137, "module-sparkocr.transformers.detectors"]], "sparkocr.transformers.dicom.base_dicom": [[138, "module-sparkocr.transformers.dicom.base_dicom"]], "sparkocr.transformers.dicom.dicom_deidentifier": [[139, "module-sparkocr.transformers.dicom.dicom_deidentifier"]], "sparkocr.transformers.dicom.dicom_draw_regions": [[140, "module-sparkocr.transformers.dicom.dicom_draw_regions"]], "sparkocr.transformers.dicom.dicom_metadata_deidentifier": [[141, "module-sparkocr.transformers.dicom.dicom_metadata_deidentifier"]], "sparkocr.transformers.dicom.dicom_splitter": [[142, "module-sparkocr.transformers.dicom.dicom_splitter"]], "sparkocr.transformers.dicom.dicom_to_image_v2": [[143, "module-sparkocr.transformers.dicom.dicom_to_image_v2"]], "sparkocr.transformers.dicom.dicom_to_image_v3": [[144, "module-sparkocr.transformers.dicom.dicom_to_image_v3"]], "sparkocr.transformers.dicom.dicom_to_metadata": [[145, "module-sparkocr.transformers.dicom.dicom_to_metadata"]], "sparkocr.transformers.dicom.dicom_to_pdf": [[146, "module-sparkocr.transformers.dicom.dicom_to_pdf"]], "sparkocr.transformers.dicom.dicom_update_pdf": [[147, "module-sparkocr.transformers.dicom.dicom_update_pdf"]], "sparkocr.transformers.dicom": [[148, "module-sparkocr.transformers.dicom"]], "sparkocr.transformers.dicom_to_image": [[149, "module-sparkocr.transformers.dicom_to_image"]], "sparkocr.transformers.doc_to_pdf": [[150, "module-sparkocr.transformers.doc_to_pdf"]], "sparkocr.transformers.doc_to_text": [[151, "module-sparkocr.transformers.doc_to_text"]], "sparkocr.transformers.doc_to_text_table": [[152, "module-sparkocr.transformers.doc_to_text_table"]], "sparkocr.transformers.embeddings": [[153, "module-sparkocr.transformers.embeddings"]], "sparkocr.transformers.embeddings.vit_image_embeddings": [[154, "module-sparkocr.transformers.embeddings.vit_image_embeddings"]], "sparkocr.transformers.extended_java_wrapper": [[155, "module-sparkocr.transformers.extended_java_wrapper"]], "sparkocr.transformers.foundationone_parser": [[156, "module-sparkocr.transformers.foundationone_parser"]], "sparkocr.transformers.hocr_merger": [[157, "module-sparkocr.transformers.hocr_merger"]], "sparkocr.transformers.hocr_to_image": [[158, "module-sparkocr.transformers.hocr_to_image"]], "sparkocr.transformers.hocr_to_text_table": [[159, "module-sparkocr.transformers.hocr_to_text_table"]], "sparkocr.transformers.image_adaptive_binarizer": [[160, "module-sparkocr.transformers.image_adaptive_binarizer"]], "sparkocr.transformers.image_adaptive_scaler": [[161, "module-sparkocr.transformers.image_adaptive_scaler"]], "sparkocr.transformers.image_adaptive_thresholding": [[162, "module-sparkocr.transformers.image_adaptive_thresholding"]], "sparkocr.transformers.image_base_transformer": [[163, "module-sparkocr.transformers.image_base_transformer"]], "sparkocr.transformers.image_binarizer": [[164, "module-sparkocr.transformers.image_binarizer"]], "sparkocr.transformers.image_brands_ocr": [[165, "module-sparkocr.transformers.image_brands_ocr"]], "sparkocr.transformers.image_cells_to_text_table": [[166, "module-sparkocr.transformers.image_cells_to_text_table"]], "sparkocr.transformers.image_cropper": [[167, "module-sparkocr.transformers.image_cropper"]], "sparkocr.transformers.image_draw_annotations": [[168, "module-sparkocr.transformers.image_draw_annotations"]], "sparkocr.transformers.image_draw_regions": [[169, "module-sparkocr.transformers.image_draw_regions"]], "sparkocr.transformers.image_enhance_contrast": [[170, "module-sparkocr.transformers.image_enhance_contrast"]], "sparkocr.transformers.image_erosion": [[171, "module-sparkocr.transformers.image_erosion"]], "sparkocr.transformers.image_gpu_transform": [[172, "module-sparkocr.transformers.image_gpu_transform"]], "sparkocr.transformers.image_handwritten_detector": [[173, "module-sparkocr.transformers.image_handwritten_detector"]], "sparkocr.transformers.image_handwritten_text_recognizer": [[174, "module-sparkocr.transformers.image_handwritten_text_recognizer"]], "sparkocr.transformers.image_homogenize_light": [[175, "module-sparkocr.transformers.image_homogenize_light"]], "sparkocr.transformers.image_layout_analyzer": [[176, "module-sparkocr.transformers.image_layout_analyzer"]], "sparkocr.transformers.image_morphology_operartion1": [[177, "module-sparkocr.transformers.image_morphology_operartion1"]], "sparkocr.transformers.image_morphology_operation": [[178, "module-sparkocr.transformers.image_morphology_operation"]], "sparkocr.transformers.image_noise_scorer": [[179, "module-sparkocr.transformers.image_noise_scorer"]], "sparkocr.transformers.image_remove_background": [[180, "module-sparkocr.transformers.image_remove_background"]], "sparkocr.transformers.image_remove_glare": [[181, "module-sparkocr.transformers.image_remove_glare"]], "sparkocr.transformers.image_remove_objects": [[182, "module-sparkocr.transformers.image_remove_objects"]], "sparkocr.transformers.image_scaler": [[183, "module-sparkocr.transformers.image_scaler"]], "sparkocr.transformers.image_skew_corrector": [[184, "module-sparkocr.transformers.image_skew_corrector"]], "sparkocr.transformers.image_split_regions": [[185, "module-sparkocr.transformers.image_split_regions"]], "sparkocr.transformers.image_table_cell_detector": [[186, "module-sparkocr.transformers.image_table_cell_detector"]], "sparkocr.transformers.image_table_detector": [[187, "module-sparkocr.transformers.image_table_detector"]], "sparkocr.transformers.image_text_cleaner": [[188, "module-sparkocr.transformers.image_text_cleaner"]], "sparkocr.transformers.image_to_dicom": [[189, "module-sparkocr.transformers.image_to_dicom"]], "sparkocr.transformers.image_to_hocr": [[190, "module-sparkocr.transformers.image_to_hocr"]], "sparkocr.transformers.image_to_text": [[191, "module-sparkocr.transformers.image_to_text"]], "sparkocr.transformers.image_transformer": [[192, "module-sparkocr.transformers.image_transformer"]], "sparkocr.transformers": [[193, "module-sparkocr.transformers"]], "sparkocr.transformers.inpainting.image_inpainting": [[194, "module-sparkocr.transformers.inpainting.image_inpainting"]], "sparkocr.transformers.inpainting": [[195, "module-sparkocr.transformers.inpainting"]], "sparkocr.transformers.ner.hocr_to_features": [[196, "module-sparkocr.transformers.ner.hocr_to_features"]], "sparkocr.transformers.ner": [[197, "module-sparkocr.transformers.ner"]], "sparkocr.transformers.ner.visual_document_ner": [[198, "module-sparkocr.transformers.ner.visual_document_ner"]], "sparkocr.transformers.ner.visual_document_ner_geo": [[199, "module-sparkocr.transformers.ner.visual_document_ner_geo"]], "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1": [[200, "module-sparkocr.transformers.ner.visual_document_ner_layoutlm_v1"]], "sparkocr.transformers.ner.visual_document_ner_lilt": [[201, "module-sparkocr.transformers.ner.visual_document_ner_lilt"]], "sparkocr.transformers.ner_output_cleaner": [[202, "module-sparkocr.transformers.ner_output_cleaner"]], "sparkocr.transformers.ocr_resource_downloader": [[203, "module-sparkocr.transformers.ocr_resource_downloader"]], "sparkocr.transformers.params": [[204, "module-sparkocr.transformers.params"]], "sparkocr.transformers.pdf.image_to_pdf": [[205, "module-sparkocr.transformers.pdf.image_to_pdf"]], "sparkocr.transformers.pdf.image_to_text_pdf": [[206, "module-sparkocr.transformers.pdf.image_to_text_pdf"]], "sparkocr.transformers.pdf": [[207, "module-sparkocr.transformers.pdf"]], "sparkocr.transformers.pdf.pdf_assembler": [[208, "module-sparkocr.transformers.pdf.pdf_assembler"]], "sparkocr.transformers.pdf.pdf_draw_regions": [[209, "module-sparkocr.transformers.pdf.pdf_draw_regions"]], "sparkocr.transformers.pdf.pdf_to_form": [[210, "module-sparkocr.transformers.pdf.pdf_to_form"]], "sparkocr.transformers.pdf.pdf_to_hocr": [[211, "module-sparkocr.transformers.pdf.pdf_to_hocr"]], "sparkocr.transformers.pdf.pdf_to_image": [[212, "module-sparkocr.transformers.pdf.pdf_to_image"]], "sparkocr.transformers.pdf.pdf_to_text": [[213, "module-sparkocr.transformers.pdf.pdf_to_text"]], "sparkocr.transformers.pdf.pdf_to_text_table": [[214, "module-sparkocr.transformers.pdf.pdf_to_text_table"]], "sparkocr.transformers.pdf.text_to_pdf": [[215, "module-sparkocr.transformers.pdf.text_to_pdf"]], "sparkocr.transformers.position_finder": [[216, "module-sparkocr.transformers.position_finder"]], "sparkocr.transformers.ppt_to_pdf": [[217, "module-sparkocr.transformers.ppt_to_pdf"]], "sparkocr.transformers.ppt_to_text_table": [[218, "module-sparkocr.transformers.ppt_to_text_table"]], "sparkocr.transformers.readers.alab_readers": [[219, "module-sparkocr.transformers.readers.alab_readers"]], "sparkocr.transformers.readers.docvqa_reader": [[220, "module-sparkocr.transformers.readers.docvqa_reader"]], "sparkocr.transformers.readers.funsd_reader": [[221, "module-sparkocr.transformers.readers.funsd_reader"]], "sparkocr.transformers.readers.iam_reader": [[222, "module-sparkocr.transformers.readers.iam_reader"]], "sparkocr.transformers.readers": [[223, "module-sparkocr.transformers.readers"]], "sparkocr.transformers.readers.mixed_iterator": [[224, "module-sparkocr.transformers.readers.mixed_iterator"]], "sparkocr.transformers.readers.rvlcdip_reader": [[225, "module-sparkocr.transformers.readers.rvlcdip_reader"]], "sparkocr.transformers.readers.sroie_reader": [[226, "module-sparkocr.transformers.readers.sroie_reader"]], "sparkocr.transformers.readers.tacd_reader": [[227, "module-sparkocr.transformers.readers.tacd_reader"]], "sparkocr.transformers.recognizers.image_to_text_v2": [[228, "module-sparkocr.transformers.recognizers.image_to_text_v2"]], "sparkocr.transformers.recognizers.image_to_text_v3": [[229, "module-sparkocr.transformers.recognizers.image_to_text_v3"]], "sparkocr.transformers.recognizers": [[230, "module-sparkocr.transformers.recognizers"]], "sparkocr.transformers.regions_merger": [[231, "module-sparkocr.transformers.regions_merger"]], "sparkocr.transformers.tokenizer.bros_hocr_tokenizer": [[232, "module-sparkocr.transformers.tokenizer.bros_hocr_tokenizer"]], "sparkocr.transformers.tokenizer.hocr_document_assembler": [[233, "module-sparkocr.transformers.tokenizer.hocr_document_assembler"]], "sparkocr.transformers.tokenizer.hocr_tokenizer": [[234, "module-sparkocr.transformers.tokenizer.hocr_tokenizer"]], "sparkocr.transformers.tokenizer": [[235, "module-sparkocr.transformers.tokenizer"]], "sparkocr.transformers.update_text_position": [[236, "module-sparkocr.transformers.update_text_position"]], "sparkocr.transformers.visual_document_classifier": [[237, "module-sparkocr.transformers.visual_document_classifier"]], "sparkocr.transformers.visual_document_classifier_lilt": [[238, "module-sparkocr.transformers.visual_document_classifier_lilt"]], "sparkocr.transformers.visual_document_classifier_v3": [[239, "module-sparkocr.transformers.visual_document_classifier_v3"]], "sparkocr.transformers.visual_document_processor": [[240, "module-sparkocr.transformers.visual_document_processor"]], "sparkocr.transformers.visual_encoder_decoder.Dit": [[241, "module-sparkocr.transformers.visual_encoder_decoder.Dit"]], "sparkocr.transformers.visual_encoder_decoder.Lilt": [[242, "module-sparkocr.transformers.visual_encoder_decoder.Lilt"]], "sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning": [[243, "module-sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning"]], "sparkocr.transformers.visual_encoder_decoder": [[244, "module-sparkocr.transformers.visual_encoder_decoder"]], "sparkocr.transformers.visual_encoder_decoder.optim_factory": [[245, "module-sparkocr.transformers.visual_encoder_decoder.optim_factory"]], "sparkocr.transformers.visual_encoder_decoder.utils": [[246, "module-sparkocr.transformers.visual_encoder_decoder.utils"]], "sparkocr.transformers.visual_question_answering": [[247, "module-sparkocr.transformers.visual_question_answering"]], "sparkocr.transformers.vqa": [[248, "module-sparkocr.transformers.vqa"]], "sparkocr.transformers.vqa.visual_question_answering_donut": [[249, "module-sparkocr.transformers.vqa.visual_question_answering_donut"]], "sparkocr.transformers.vqa.visual_question_answering_pix2struct": [[250, "module-sparkocr.transformers.vqa.visual_question_answering_pix2struct"]], "sparkocr.utils.compat_pkg": [[251, "module-sparkocr.utils.compat_pkg"]], "sparkocr.utils.craft.craft_utils": [[252, "module-sparkocr.utils.craft.craft_utils"]], "sparkocr.utils.craft.file_utils": [[253, "module-sparkocr.utils.craft.file_utils"]], "sparkocr.utils.craft.image_utils": [[254, "module-sparkocr.utils.craft.image_utils"]], "sparkocr.utils.craft": [[255, "module-sparkocr.utils.craft"]], "sparkocr.utils.craft.models.basenet": [[256, "module-sparkocr.utils.craft.models.basenet"]], "sparkocr.utils.craft.models.basenet.vgg16_bn": [[257, "module-sparkocr.utils.craft.models.basenet.vgg16_bn"]], "sparkocr.utils.craft.models.craftnet": [[258, "module-sparkocr.utils.craft.models.craftnet"]], "sparkocr.utils.craft.models": [[259, "module-sparkocr.utils.craft.models"]], "sparkocr.utils.craft.models.refinenet": [[260, "module-sparkocr.utils.craft.models.refinenet"]], "sparkocr.utils.craft.predict": [[261, "module-sparkocr.utils.craft.predict"]], "sparkocr.utils.craft.torch_utils": [[262, "module-sparkocr.utils.craft.torch_utils"]], "sparkocr.utils.helpers": [[263, "module-sparkocr.utils.helpers"]], "sparkocr.utils.hocr_renderer": [[264, "module-sparkocr.utils.hocr_renderer"]], "sparkocr.utils": [[265, "module-sparkocr.utils"]], "sparkocr.utils.inpainting": [[266, "module-sparkocr.utils.inpainting"]], "sparkocr.utils.rectangle": [[267, "module-sparkocr.utils.rectangle"]], "sparkocr.utils.seqeval": [[268, "module-sparkocr.utils.seqeval"]], "sparkocr.utils.svs": [[269, "module-sparkocr.utils.svs"]], "sparkocr.utils.svs.phi_cleaning": [[270, "module-sparkocr.utils.svs.phi_cleaning"]], "sparkocr.utils.svs.phi_redaction": [[271, "module-sparkocr.utils.svs.phi_redaction"]], "sparkocr.utils.svs.remove-phi": [[272, "module-sparkocr.utils.svs.remove-phi"]], "sparkocr.utils.svs.tiffparser": [[273, "module-sparkocr.utils.svs.tiffparser"]], "sparkocr.utils.svs.tile_extraction": [[274, "module-sparkocr.utils.svs.tile_extraction"]], "sparkocr.utils.torchutils": [[275, "module-sparkocr.utils.torchutils"]], "test_basic_lp": [[276, "module-test_basic_lp"]], "API Reference": [[277, "api-reference"]], "Modules": [[277, "modules"]]}, "indexentries": {"module": [[0, "module-sparkocr"], [2, "module-sparkocr"], [3, "module-sparkocr.base"], [4, "module-sparkocr.base.light_pipelines"], [5, "module-sparkocr.databricks"], [6, "module-sparkocr.enums"], [7, "module-sparkocr"], [8, "module-sparkocr.internal"], [9, "module-sparkocr.metrics"], [10, "module-sparkocr.optimized"], [11, "module-sparkocr.pretrained.anonymization_pipeline_builder"], [12, "module-sparkocr.pretrained.dicom_pretrained_pipeline"], [13, "module-sparkocr.pretrained"], [14, "module-sparkocr.pretrained.pretrained_pipeline"], [15, "module-sparkocr.schemas"], [16, "module-sparkocr.tests.conftest"], [17, "module-sparkocr.tests"], [18, "module-sparkocr.tests.ocr.eval.icdar.icdar_table_extractor"], [19, "module-sparkocr.tests.ocr.eval.icdar"], [20, "module-sparkocr.tests.ocr.eval"], [21, "module-sparkocr.tests.ocr"], [22, "module-sparkocr.tests.ocr.pipelines"], [23, "module-sparkocr.tests.ocr.pipelines.test_pdf"], [24, "module-sparkocr.tests.ocr.test_start"], [25, "module-sparkocr.tests.ocr.transformers.annotators"], [26, "module-sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor"], [27, "module-sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor"], [28, "module-sparkocr.tests.ocr.transformers.detectors"], [29, "module-sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector"], [30, "module-sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector"], [31, "module-sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit"], [32, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector"], [33, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft"], [34, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2"], [35, "module-sparkocr.tests.ocr.transformers.dicom"], [36, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier"], [37, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions"], [38, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier"], [39, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter"], [40, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2"], [41, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3"], [42, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata"], [43, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf"], [44, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf"], [45, "module-sparkocr.tests.ocr.transformers.embeddings"], [46, "module-sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings"], [47, "module-sparkocr.tests.ocr.transformers"], [48, "module-sparkocr.tests.ocr.transformers.inpainting"], [49, "module-sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting"], [50, "module-sparkocr.tests.ocr.transformers.ner"], [51, "module-sparkocr.tests.ocr.transformers.ner.test_hocr_to_features"], [52, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner"], [53, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo"], [54, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1"], [55, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt"], [56, "module-sparkocr.tests.ocr.transformers.readers"], [57, "module-sparkocr.tests.ocr.transformers.readers.test_alab_readers"], [58, "module-sparkocr.tests.ocr.transformers.recognizers"], [59, "module-sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2"], [60, "module-sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3"], [61, "module-sparkocr.tests.ocr.transformers.test_binary_to_image"], [62, "module-sparkocr.tests.ocr.transformers.test_datasetreader"], [63, "module-sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator"], [64, "module-sparkocr.tests.ocr.transformers.test_dicom_to_image"], [65, "module-sparkocr.tests.ocr.transformers.test_display_table"], [66, "module-sparkocr.tests.ocr.transformers.test_doc_to_pdf"], [67, "module-sparkocr.tests.ocr.transformers.test_doc_to_text"], [68, "module-sparkocr.tests.ocr.transformers.test_doc_to_text_table"], [69, "module-sparkocr.tests.ocr.transformers.test_foundationone_parser"], [70, "module-sparkocr.tests.ocr.transformers.test_hocr_merger"], [71, "module-sparkocr.tests.ocr.transformers.test_hocr_to_image"], [72, "module-sparkocr.tests.ocr.transformers.test_hocr_to_text_table"], [73, "module-sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer"], [74, "module-sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding"], [75, "module-sparkocr.tests.ocr.transformers.test_image_binarizer"], [76, "module-sparkocr.tests.ocr.transformers.test_image_brands_ocr"], [77, "module-sparkocr.tests.ocr.transformers.test_image_cells_to_text_table"], [78, "module-sparkocr.tests.ocr.transformers.test_image_cropper"], [79, "module-sparkocr.tests.ocr.transformers.test_image_draw_annotations"], [80, "module-sparkocr.tests.ocr.transformers.test_image_draw_regions"], [81, "module-sparkocr.tests.ocr.transformers.test_image_erosion"], [82, "module-sparkocr.tests.ocr.transformers.test_image_gpu_transform"], [83, "module-sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer"], [84, "module-sparkocr.tests.ocr.transformers.test_image_layout_analyzer"], [85, "module-sparkocr.tests.ocr.transformers.test_image_morphology_operation"], [86, "module-sparkocr.tests.ocr.transformers.test_image_noise_scorer"], [87, "module-sparkocr.tests.ocr.transformers.test_image_regions_merger"], [88, "module-sparkocr.tests.ocr.transformers.test_image_remove_objects"], [89, "module-sparkocr.tests.ocr.transformers.test_image_signature_detector"], [90, "module-sparkocr.tests.ocr.transformers.test_image_skew_corrector"], [91, "module-sparkocr.tests.ocr.transformers.test_image_split_regions"], [92, "module-sparkocr.tests.ocr.transformers.test_image_table_cells_detector"], [93, "module-sparkocr.tests.ocr.transformers.test_image_table_detector"], [94, "module-sparkocr.tests.ocr.transformers.test_image_text_cleaner"], [95, "module-sparkocr.tests.ocr.transformers.test_image_to_dicom"], [96, "module-sparkocr.tests.ocr.transformers.test_image_to_hocr"], [97, "module-sparkocr.tests.ocr.transformers.test_image_to_pdf"], [98, "module-sparkocr.tests.ocr.transformers.test_image_to_text"], [99, "module-sparkocr.tests.ocr.transformers.test_image_transformer"], [100, "module-sparkocr.tests.ocr.transformers.test_ner_output_cleaner"], [101, "module-sparkocr.tests.ocr.transformers.test_ocr_resource_downloader"], [102, "module-sparkocr.tests.ocr.transformers.test_pdf_assembler"], [103, "module-sparkocr.tests.ocr.transformers.test_pdf_draw_regions"], [104, "module-sparkocr.tests.ocr.transformers.test_pdf_to_form"], [105, "module-sparkocr.tests.ocr.transformers.test_pdf_to_hocr"], [106, "module-sparkocr.tests.ocr.transformers.test_pdf_to_image"], [107, "module-sparkocr.tests.ocr.transformers.test_pdf_to_text"], [108, "module-sparkocr.tests.ocr.transformers.test_pdf_to_text_table"], [109, "module-sparkocr.tests.ocr.transformers.test_position_finder"], [110, "module-sparkocr.tests.ocr.transformers.test_ppt_to_pdf"], [111, "module-sparkocr.tests.ocr.transformers.test_ppt_to_text_table"], [112, "module-sparkocr.tests.ocr.transformers.test_text_to_pdf"], [113, "module-sparkocr.tests.ocr.transformers.test_update_text_position"], [114, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier"], [115, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt"], [116, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3"], [117, "module-sparkocr.tests.ocr.transformers.test_visual_document_processor"], [118, "module-sparkocr.tests.ocr.transformers.test_visual_question_answering"], [119, "module-sparkocr.tests.ocr.transformers.tokenizer"], [120, "module-sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer"], [121, "module-sparkocr.tests.ocr.utils"], [122, "module-sparkocr.transformers.annotators.form_relation_extractor"], [123, "module-sparkocr.transformers.annotators.geo_relation_extractor"], [124, "module-sparkocr.transformers.annotators"], [125, "module-sparkocr.transformers.base64_to_binary"], [126, "module-sparkocr.transformers.base64_to_image"], [127, "module-sparkocr.transformers.binary_to_image"], [128, "module-sparkocr.transformers.chart_to_text_table"], [129, "module-sparkocr.transformers.dataset_reader"], [130, "module-sparkocr.transformers.detectors.document_layout_analyzer"], [131, "module-sparkocr.transformers.detectors.image_checkbox_detector"], [132, "module-sparkocr.transformers.detectors.image_document_region_detector"], [133, "module-sparkocr.transformers.detectors.image_text_detector"], [134, "module-sparkocr.transformers.detectors.image_text_detector_craft"], [135, "module-sparkocr.transformers.detectors.image_text_detector_dit"], [136, "module-sparkocr.transformers.detectors.image_text_detector_v2"], [137, "module-sparkocr.transformers.detectors"], [138, "module-sparkocr.transformers.dicom.base_dicom"], [139, "module-sparkocr.transformers.dicom.dicom_deidentifier"], [140, "module-sparkocr.transformers.dicom.dicom_draw_regions"], [141, "module-sparkocr.transformers.dicom.dicom_metadata_deidentifier"], [142, "module-sparkocr.transformers.dicom.dicom_splitter"], [143, "module-sparkocr.transformers.dicom.dicom_to_image_v2"], [144, "module-sparkocr.transformers.dicom.dicom_to_image_v3"], [145, "module-sparkocr.transformers.dicom.dicom_to_metadata"], [146, "module-sparkocr.transformers.dicom.dicom_to_pdf"], [147, "module-sparkocr.transformers.dicom.dicom_update_pdf"], [148, "module-sparkocr.transformers.dicom"], [149, "module-sparkocr.transformers.dicom_to_image"], [150, "module-sparkocr.transformers.doc_to_pdf"], [151, "module-sparkocr.transformers.doc_to_text"], [152, "module-sparkocr.transformers.doc_to_text_table"], [153, "module-sparkocr.transformers.embeddings"], [154, "module-sparkocr.transformers.embeddings.vit_image_embeddings"], [155, "module-sparkocr.transformers.extended_java_wrapper"], [156, "module-sparkocr.transformers.foundationone_parser"], [157, "module-sparkocr.transformers.hocr_merger"], [158, "module-sparkocr.transformers.hocr_to_image"], [159, "module-sparkocr.transformers.hocr_to_text_table"], [160, "module-sparkocr.transformers.image_adaptive_binarizer"], [161, "module-sparkocr.transformers.image_adaptive_scaler"], [162, "module-sparkocr.transformers.image_adaptive_thresholding"], [163, "module-sparkocr.transformers.image_base_transformer"], [164, "module-sparkocr.transformers.image_binarizer"], [165, "module-sparkocr.transformers.image_brands_ocr"], [166, "module-sparkocr.transformers.image_cells_to_text_table"], [167, "module-sparkocr.transformers.image_cropper"], [168, "module-sparkocr.transformers.image_draw_annotations"], [169, "module-sparkocr.transformers.image_draw_regions"], [170, "module-sparkocr.transformers.image_enhance_contrast"], [171, "module-sparkocr.transformers.image_erosion"], [172, "module-sparkocr.transformers.image_gpu_transform"], [173, "module-sparkocr.transformers.image_handwritten_detector"], [174, "module-sparkocr.transformers.image_handwritten_text_recognizer"], [175, "module-sparkocr.transformers.image_homogenize_light"], [176, "module-sparkocr.transformers.image_layout_analyzer"], [177, "module-sparkocr.transformers.image_morphology_operartion1"], [178, "module-sparkocr.transformers.image_morphology_operation"], [179, "module-sparkocr.transformers.image_noise_scorer"], [180, "module-sparkocr.transformers.image_remove_background"], [181, "module-sparkocr.transformers.image_remove_glare"], [182, "module-sparkocr.transformers.image_remove_objects"], [183, "module-sparkocr.transformers.image_scaler"], [184, "module-sparkocr.transformers.image_skew_corrector"], [185, "module-sparkocr.transformers.image_split_regions"], [186, "module-sparkocr.transformers.image_table_cell_detector"], [187, "module-sparkocr.transformers.image_table_detector"], [188, "module-sparkocr.transformers.image_text_cleaner"], [189, "module-sparkocr.transformers.image_to_dicom"], [190, "module-sparkocr.transformers.image_to_hocr"], [191, "module-sparkocr.transformers.image_to_text"], [192, "module-sparkocr.transformers.image_transformer"], [193, "module-sparkocr.transformers"], [194, "module-sparkocr.transformers.inpainting.image_inpainting"], [195, "module-sparkocr.transformers.inpainting"], [196, "module-sparkocr.transformers.ner.hocr_to_features"], [197, "module-sparkocr.transformers.ner"], [198, "module-sparkocr.transformers.ner.visual_document_ner"], [199, "module-sparkocr.transformers.ner.visual_document_ner_geo"], [200, "module-sparkocr.transformers.ner.visual_document_ner_layoutlm_v1"], [201, "module-sparkocr.transformers.ner.visual_document_ner_lilt"], [202, "module-sparkocr.transformers.ner_output_cleaner"], [203, "module-sparkocr.transformers.ocr_resource_downloader"], [204, "module-sparkocr.transformers.params"], [205, "module-sparkocr.transformers.pdf.image_to_pdf"], [206, "module-sparkocr.transformers.pdf.image_to_text_pdf"], [207, "module-sparkocr.transformers.pdf"], [208, "module-sparkocr.transformers.pdf.pdf_assembler"], [209, "module-sparkocr.transformers.pdf.pdf_draw_regions"], [210, "module-sparkocr.transformers.pdf.pdf_to_form"], [211, "module-sparkocr.transformers.pdf.pdf_to_hocr"], [212, "module-sparkocr.transformers.pdf.pdf_to_image"], [213, "module-sparkocr.transformers.pdf.pdf_to_text"], [214, "module-sparkocr.transformers.pdf.pdf_to_text_table"], [215, "module-sparkocr.transformers.pdf.text_to_pdf"], [216, "module-sparkocr.transformers.position_finder"], [217, "module-sparkocr.transformers.ppt_to_pdf"], [218, "module-sparkocr.transformers.ppt_to_text_table"], [219, "module-sparkocr.transformers.readers.alab_readers"], [220, "module-sparkocr.transformers.readers.docvqa_reader"], [221, "module-sparkocr.transformers.readers.funsd_reader"], [222, "module-sparkocr.transformers.readers.iam_reader"], [223, "module-sparkocr.transformers.readers"], [224, "module-sparkocr.transformers.readers.mixed_iterator"], [225, "module-sparkocr.transformers.readers.rvlcdip_reader"], [226, "module-sparkocr.transformers.readers.sroie_reader"], [227, "module-sparkocr.transformers.readers.tacd_reader"], [228, "module-sparkocr.transformers.recognizers.image_to_text_v2"], [229, "module-sparkocr.transformers.recognizers.image_to_text_v3"], [230, "module-sparkocr.transformers.recognizers"], [231, "module-sparkocr.transformers.regions_merger"], [232, "module-sparkocr.transformers.tokenizer.bros_hocr_tokenizer"], [233, "module-sparkocr.transformers.tokenizer.hocr_document_assembler"], [234, "module-sparkocr.transformers.tokenizer.hocr_tokenizer"], [235, "module-sparkocr.transformers.tokenizer"], [236, "module-sparkocr.transformers.update_text_position"], [237, "module-sparkocr.transformers.visual_document_classifier"], [238, "module-sparkocr.transformers.visual_document_classifier_lilt"], [239, "module-sparkocr.transformers.visual_document_classifier_v3"], [240, "module-sparkocr.transformers.visual_document_processor"], [241, "module-sparkocr.transformers.visual_encoder_decoder.Dit"], [242, "module-sparkocr.transformers.visual_encoder_decoder.Lilt"], [243, "module-sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning"], [244, "module-sparkocr.transformers.visual_encoder_decoder"], [245, "module-sparkocr.transformers.visual_encoder_decoder.optim_factory"], [246, "module-sparkocr.transformers.visual_encoder_decoder.utils"], [247, "module-sparkocr.transformers.visual_question_answering"], [248, "module-sparkocr.transformers.vqa"], [249, "module-sparkocr.transformers.vqa.visual_question_answering_donut"], [250, "module-sparkocr.transformers.vqa.visual_question_answering_pix2struct"], [251, "module-sparkocr.utils.compat_pkg"], [252, "module-sparkocr.utils.craft.craft_utils"], [253, "module-sparkocr.utils.craft.file_utils"], [254, "module-sparkocr.utils.craft.image_utils"], [255, "module-sparkocr.utils.craft"], [256, "module-sparkocr.utils.craft.models.basenet"], [257, "module-sparkocr.utils.craft.models.basenet.vgg16_bn"], [258, "module-sparkocr.utils.craft.models.craftnet"], [259, "module-sparkocr.utils.craft.models"], [260, "module-sparkocr.utils.craft.models.refinenet"], [261, "module-sparkocr.utils.craft.predict"], [262, "module-sparkocr.utils.craft.torch_utils"], [263, "module-sparkocr.utils.helpers"], [264, "module-sparkocr.utils.hocr_renderer"], [265, "module-sparkocr.utils"], [266, "module-sparkocr.utils.inpainting"], [267, "module-sparkocr.utils.rectangle"], [268, "module-sparkocr.utils.seqeval"], [269, "module-sparkocr.utils.svs"], [270, "module-sparkocr.utils.svs.phi_cleaning"], [271, "module-sparkocr.utils.svs.phi_redaction"], [272, "module-sparkocr.utils.svs.remove-phi"], [273, "module-sparkocr.utils.svs.tiffparser"], [274, "module-sparkocr.utils.svs.tile_extraction"], [275, "module-sparkocr.utils.torchutils"], [276, "module-test_basic_lp"]], "sparkocr": [[0, "module-sparkocr"], [2, "module-sparkocr"], [7, "module-sparkocr"]], "start() (in module sparkocr)": [[0, "sparkocr.start"], [2, "sparkocr.start"], [7, "sparkocr.start"]], "sparkocr.base": [[3, "module-sparkocr.base"]], "annotationtypeint (class in sparkocr.base.light_pipelines)": [[4, "sparkocr.base.light_pipelines.AnnotationTypeInt"]], "lightpipeline (class in sparkocr.base.light_pipelines)": [[4, "sparkocr.base.light_pipelines.LightPipeline"]], "frombinary() (lightpipeline method)": [[4, "sparkocr.base.light_pipelines.LightPipeline.fromBinary"]], "fromlocalpath() (lightpipeline method)": [[4, "sparkocr.base.light_pipelines.LightPipeline.fromLocalPath"]], "fromstring() (lightpipeline method)": [[4, "sparkocr.base.light_pipelines.LightPipeline.fromString"]], "getignoreunsupported() (lightpipeline method)": [[4, "sparkocr.base.light_pipelines.LightPipeline.getIgnoreUnsupported"]], "pipeline_model (lightpipeline attribute)": [[4, "sparkocr.base.light_pipelines.LightPipeline.pipeline_model"]], "setignoreunsupported() (lightpipeline method)": [[4, "sparkocr.base.light_pipelines.LightPipeline.setIgnoreUnsupported"]], "sparkocr.base.light_pipelines": [[4, "module-sparkocr.base.light_pipelines"]], "transform() (lightpipeline method)": [[4, "sparkocr.base.light_pipelines.LightPipeline.transform"]], "init_script_path (in module sparkocr.databricks)": [[5, "sparkocr.databricks.INIT_SCRIPT_PATH"]], "ocr_model_dir (in module sparkocr.databricks)": [[5, "sparkocr.databricks.OCR_MODEL_DIR"]], "create_init_script_for_tesseract() (in module sparkocr.databricks)": [[5, "sparkocr.databricks.create_init_script_for_tesseract"]], "display_images() (in module sparkocr.databricks)": [[5, "sparkocr.databricks.display_images"]], "isrunningindatabricks() (in module sparkocr.databricks)": [[5, "sparkocr.databricks.isRunningInDatabricks"]], "sparkocr.databricks": [[5, "module-sparkocr.databricks"]], "annotations (relationoutputformat attribute)": [[6, "sparkocr.enums.RelationOutputFormat.ANNOTATIONS"]], "ara (language attribute)": [[6, "sparkocr.enums.Language.ARA"]], "auto (fontstyle attribute)": [[6, "sparkocr.enums.FontStyle.AUTO"]], "auto (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.AUTO"]], "auto_only (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.AUTO_ONLY"]], "auto_osd (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.AUTO_OSD"]], "adaptivethresholdingmethod (class in sparkocr.enums)": [[6, "sparkocr.enums.AdaptiveThresholdingMethod"]], "adaptivethresholdingmode (class in sparkocr.enums)": [[6, "sparkocr.enums.AdaptiveThresholdingMode"]], "base (modeltype attribute)": [[6, "sparkocr.enums.ModelType.BASE"]], "basic (datasettype attribute)": [[6, "sparkocr.enums.DatasetType.BASIC"]], "basic (tokenizertype attribute)": [[6, "sparkocr.enums.TokenizerType.BASIC"]], "best (modeltype attribute)": [[6, "sparkocr.enums.ModelType.BEST"]], "block (pageiteratorlevel attribute)": [[6, "sparkocr.enums.PageIteratorLevel.BLOCK"]], "bold (fontstyle attribute)": [[6, "sparkocr.enums.FontStyle.BOLD"]], "bottom_center (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.BOTTOM_CENTER"]], "bottom_left (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.BOTTOM_LEFT"]], "bottom_right (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.BOTTOM_RIGHT"]], "center (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.CENTER"]], "center_left (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.CENTER_LEFT"]], "center_right (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.CENTER_RIGHT"]], "chi (language attribute)": [[6, "sparkocr.enums.Language.CHI"]], "circle_word (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.CIRCLE_WORD"]], "closing (morphologyoperationtype attribute)": [[6, "sparkocr.enums.MorphologyOperationType.CLOSING"]], "constant (adaptivethresholdingmode attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMode.CONSTANT"]], "contours (celldetectionalgos attribute)": [[6, "sparkocr.enums.CellDetectionAlgos.CONTOURS"]], "csv (tableoutputformat attribute)": [[6, "sparkocr.enums.TableOutputFormat.CSV"]], "celldetectionalgos (class in sparkocr.enums)": [[6, "sparkocr.enums.CellDetectionAlgos"]], "color (class in sparkocr.enums)": [[6, "sparkocr.enums.Color"]], "compressiontype (class in sparkocr.enums)": [[6, "sparkocr.enums.CompressionType"]], "cropsquaretype (class in sparkocr.enums)": [[6, "sparkocr.enums.CropSquareType"]], "dan (language attribute)": [[6, "sparkocr.enums.Language.DAN"]], "default (enginemode attribute)": [[6, "sparkocr.enums.EngineMode.DEFAULT"]], "deu (language attribute)": [[6, "sparkocr.enums.Language.DEU"]], "diamond (kernelshape attribute)": [[6, "sparkocr.enums.KernelShape.DIAMOND"]], "dilation (morphologyoperationtype attribute)": [[6, "sparkocr.enums.MorphologyOperationType.DILATION"]], "disk (kernelshape attribute)": [[6, "sparkocr.enums.KernelShape.DISK"]], "datasettype (class in sparkocr.enums)": [[6, "sparkocr.enums.DatasetType"]], "detectoroutputformat (class in sparkocr.enums)": [[6, "sparkocr.enums.DetectorOutputFormat"]], "dicomcompression (class in sparkocr.enums)": [[6, "sparkocr.enums.DicomCompression"]], "easyocr (visualdocumentprocessorocrengines attribute)": [[6, "sparkocr.enums.VisualDocumentProcessorOcrEngines.EASYOCR"]], "eng (language attribute)": [[6, "sparkocr.enums.Language.ENG"]], "erosion (morphologyoperationtype attribute)": [[6, "sparkocr.enums.MorphologyOperationType.EROSION"]], "enginemode (class in sparkocr.enums)": [[6, "sparkocr.enums.EngineMode"]], "fast (modeltype attribute)": [[6, "sparkocr.enums.ModelType.FAST"]], "fixed_number_of_partitions (splittingstrategy attribute)": [[6, "sparkocr.enums.SplittingStrategy.FIXED_NUMBER_OF_PARTITIONS"]], "fixed_size_of_partition (splittingstrategy attribute)": [[6, "sparkocr.enums.SplittingStrategy.FIXED_SIZE_OF_PARTITION"]], "formatted_text (ocroutputformat attribute)": [[6, "sparkocr.enums.OcrOutputFormat.FORMATTED_TEXT"]], "fra (language attribute)": [[6, "sparkocr.enums.Language.FRA"]], "fontstyle (class in sparkocr.enums)": [[6, "sparkocr.enums.FontStyle"]], "gaussian (adaptivethresholdingmethod attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMethod.GAUSSIAN"]], "gaussian (thresholdingmethod attribute)": [[6, "sparkocr.enums.ThresholdingMethod.GAUSSIAN"]], "hocr (detectoroutputformat attribute)": [[6, "sparkocr.enums.DetectorOutputFormat.HOCR"]], "hocr (ocroutputformat attribute)": [[6, "sparkocr.enums.OcrOutputFormat.HOCR"]], "ita (language attribute)": [[6, "sparkocr.enums.Language.ITA"]], "iterable (datasettype attribute)": [[6, "sparkocr.enums.DatasetType.ITERABLE"]], "imagetype (class in sparkocr.enums)": [[6, "sparkocr.enums.ImageType"]], "jpeg (compressiontype attribute)": [[6, "sparkocr.enums.CompressionType.JPEG"]], "jpegbaseline8bit (dicomcompression attribute)": [[6, "sparkocr.enums.DicomCompression.JPEGBaseline8Bit"]], "jpeglslossless (dicomcompression attribute)": [[6, "sparkocr.enums.DicomCompression.JPEGLSLossless"]], "json (ocroutputformat attribute)": [[6, "sparkocr.enums.OcrOutputFormat.JSON"]], "json (relationoutputformat attribute)": [[6, "sparkocr.enums.RelationOutputFormat.JSON"]], "kor (language attribute)": [[6, "sparkocr.enums.Language.KOR"]], "kernelshape (class in sparkocr.enums)": [[6, "sparkocr.enums.KernelShape"]], "lossless (compressiontype attribute)": [[6, "sparkocr.enums.CompressionType.LOSSLESS"]], "lstm_only (enginemode attribute)": [[6, "sparkocr.enums.EngineMode.LSTM_ONLY"]], "language (class in sparkocr.enums)": [[6, "sparkocr.enums.Language"]], "mean (adaptivethresholdingmethod attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMethod.MEAN"]], "median (adaptivethresholdingmethod attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMethod.MEDIAN"]], "mirror (adaptivethresholdingmode attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMode.MIRROR"]], "morphops (celldetectionalgos attribute)": [[6, "sparkocr.enums.CellDetectionAlgos.MORPHOPS"]], "modeltype (class in sparkocr.enums)": [[6, "sparkocr.enums.ModelType"]], "morphologyoperationtype (class in sparkocr.enums)": [[6, "sparkocr.enums.MorphologyOperationType"]], "nearest (adaptivethresholdingmode attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMode.NEAREST"]], "noisemethod (class in sparkocr.enums)": [[6, "sparkocr.enums.NoiseMethod"]], "ocrmac (visualdocumentprocessorocrengines attribute)": [[6, "sparkocr.enums.VisualDocumentProcessorOcrEngines.OCRMAC"]], "octagon (kernelshape attribute)": [[6, "sparkocr.enums.KernelShape.OCTAGON"]], "octahedron (kernelshape attribute)": [[6, "sparkocr.enums.KernelShape.OCTAHEDRON"]], "opening (morphologyoperationtype attribute)": [[6, "sparkocr.enums.MorphologyOperationType.OPENING"]], "osd_only (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.OSD_ONLY"]], "otsu (thresholdingmethod attribute)": [[6, "sparkocr.enums.ThresholdingMethod.OTSU"]], "ocroutputformat (class in sparkocr.enums)": [[6, "sparkocr.enums.OcrOutputFormat"]], "paragraph (pageiteratorlevel attribute)": [[6, "sparkocr.enums.PageIteratorLevel.PARAGRAPH"]], "pdf_layout_text_stripper (textstrippertype attribute)": [[6, "sparkocr.enums.TextStripperType.PDF_LAYOUT_TEXT_STRIPPER"]], "pdf_text_stripper (textstrippertype attribute)": [[6, "sparkocr.enums.TextStripperType.PDF_TEXT_STRIPPER"]], "plain (fontstyle attribute)": [[6, "sparkocr.enums.FontStyle.PLAIN"]], "pageiteratorlevel (class in sparkocr.enums)": [[6, "sparkocr.enums.PageIteratorLevel"]], "pagesegmentationmode (class in sparkocr.enums)": [[6, "sparkocr.enums.PageSegmentationMode"]], "rapidocr (visualdocumentprocessorocrengines attribute)": [[6, "sparkocr.enums.VisualDocumentProcessorOcrEngines.RAPIDOCR"]], "ratio (noisemethod attribute)": [[6, "sparkocr.enums.NoiseMethod.RATIO"]], "reflect (adaptivethresholdingmode attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMode.REFLECT"]], "regions (detectoroutputformat attribute)": [[6, "sparkocr.enums.DetectorOutputFormat.REGIONS"]], "rlelossless (dicomcompression attribute)": [[6, "sparkocr.enums.DicomCompression.RLELossless"]], "rus (language attribute)": [[6, "sparkocr.enums.Language.RUS"]], "relationoutputformat (class in sparkocr.enums)": [[6, "sparkocr.enums.RelationOutputFormat"]], "sauvola (thresholdingmethod attribute)": [[6, "sparkocr.enums.ThresholdingMethod.SAUVOLA"]], "simple (tokenizertype attribute)": [[6, "sparkocr.enums.TokenizerType.SIMPLE"]], "singh (adaptivethresholdingmethod attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMethod.SINGH"]], "single_block (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SINGLE_BLOCK"]], "single_block_vert_text (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SINGLE_BLOCK_VERT_TEXT"]], "single_char (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SINGLE_CHAR"]], "single_column (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SINGLE_COLUMN"]], "single_line (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SINGLE_LINE"]], "single_word (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SINGLE_WORD"]], "spa (language attribute)": [[6, "sparkocr.enums.Language.SPA"]], "sparse_text (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SPARSE_TEXT"]], "sparse_text_osd (pagesegmentationmode attribute)": [[6, "sparkocr.enums.PageSegmentationMode.SPARSE_TEXT_OSD"]], "square (kernelshape attribute)": [[6, "sparkocr.enums.KernelShape.SQUARE"]], "star (kernelshape attribute)": [[6, "sparkocr.enums.KernelShape.STAR"]], "symbol (pageiteratorlevel attribute)": [[6, "sparkocr.enums.PageIteratorLevel.SYMBOL"]], "splittingstrategy (class in sparkocr.enums)": [[6, "sparkocr.enums.SplittingStrategy"]], "table (tableoutputformat attribute)": [[6, "sparkocr.enums.TableOutputFormat.TABLE"]], "tesseract (visualdocumentprocessorocrengines attribute)": [[6, "sparkocr.enums.VisualDocumentProcessorOcrEngines.TESSERACT"]], "tesseractcli (visualdocumentprocessorocrengines attribute)": [[6, "sparkocr.enums.VisualDocumentProcessorOcrEngines.TESSERACTCLI"]], "tesseract_lstm_combined (enginemode attribute)": [[6, "sparkocr.enums.EngineMode.TESSERACT_LSTM_COMBINED"]], "tesseract_only (enginemode attribute)": [[6, "sparkocr.enums.EngineMode.TESSERACT_ONLY"]], "text (ocroutputformat attribute)": [[6, "sparkocr.enums.OcrOutputFormat.TEXT"]], "textline (pageiteratorlevel attribute)": [[6, "sparkocr.enums.PageIteratorLevel.TEXTLINE"]], "text_with_positions (ocroutputformat attribute)": [[6, "sparkocr.enums.OcrOutputFormat.TEXT_WITH_POSITIONS"]], "top_center (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.TOP_CENTER"]], "top_left (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.TOP_LEFT"]], "top_right (cropsquaretype attribute)": [[6, "sparkocr.enums.CropSquareType.TOP_RIGHT"]], "tur (language attribute)": [[6, "sparkocr.enums.Language.TUR"]], "type_3byte_bgr (imagetype attribute)": [[6, "sparkocr.enums.ImageType.TYPE_3BYTE_BGR"]], "type_4byte_abgr (imagetype attribute)": [[6, "sparkocr.enums.ImageType.TYPE_4BYTE_ABGR"]], "type_byte_binary (imagetype attribute)": [[6, "sparkocr.enums.ImageType.TYPE_BYTE_BINARY"]], "type_byte_gray (imagetype attribute)": [[6, "sparkocr.enums.ImageType.TYPE_BYTE_GRAY"]], "type_jpeg (imagetype attribute)": [[6, "sparkocr.enums.ImageType.TYPE_JPEG"]], "type_ushort_gray (imagetype attribute)": [[6, "sparkocr.enums.ImageType.TYPE_USHORT_GRAY"]], "tableoutputformat (class in sparkocr.enums)": [[6, "sparkocr.enums.TableOutputFormat"]], "textstrippertype (class in sparkocr.enums)": [[6, "sparkocr.enums.TextStripperType"]], "thresholdingmethod (class in sparkocr.enums)": [[6, "sparkocr.enums.ThresholdingMethod"]], "tokenizertype (class in sparkocr.enums)": [[6, "sparkocr.enums.TokenizerType"]], "variance (noisemethod attribute)": [[6, "sparkocr.enums.NoiseMethod.VARIANCE"]], "vie (language attribute)": [[6, "sparkocr.enums.Language.VIE"]], "visualdocumentprocessorocrengines (class in sparkocr.enums)": [[6, "sparkocr.enums.VisualDocumentProcessorOcrEngines"]], "wolf (adaptivethresholdingmethod attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMethod.WOLF"]], "word (pageiteratorlevel attribute)": [[6, "sparkocr.enums.PageIteratorLevel.WORD"]], "wrap (adaptivethresholdingmode attribute)": [[6, "sparkocr.enums.AdaptiveThresholdingMode.WRAP"]], "aliceblue (color attribute)": [[6, "sparkocr.enums.Color.aliceblue"]], "antiquewhite (color attribute)": [[6, "sparkocr.enums.Color.antiquewhite"]], "aqua (color attribute)": [[6, "sparkocr.enums.Color.aqua"]], "aquamarine (color attribute)": [[6, "sparkocr.enums.Color.aquamarine"]], "azure (color attribute)": [[6, "sparkocr.enums.Color.azure"]], "beige (color attribute)": [[6, "sparkocr.enums.Color.beige"]], "bisque (color attribute)": [[6, "sparkocr.enums.Color.bisque"]], "black (color attribute)": [[6, "sparkocr.enums.Color.black"]], "blanchedalmond (color attribute)": [[6, "sparkocr.enums.Color.blanchedalmond"]], "blue (color attribute)": [[6, "sparkocr.enums.Color.blue"]], "blueviolet (color attribute)": [[6, "sparkocr.enums.Color.blueviolet"]], "brown (color attribute)": [[6, "sparkocr.enums.Color.brown"]], "burlywood (color attribute)": [[6, "sparkocr.enums.Color.burlywood"]], "cadetblue (color attribute)": [[6, "sparkocr.enums.Color.cadetblue"]], "chartreuse (color attribute)": [[6, "sparkocr.enums.Color.chartreuse"]], "chocolate (color attribute)": [[6, "sparkocr.enums.Color.chocolate"]], "coral (color attribute)": [[6, "sparkocr.enums.Color.coral"]], "cornflowerblue (color attribute)": [[6, "sparkocr.enums.Color.cornflowerblue"]], "cornsilk (color attribute)": [[6, "sparkocr.enums.Color.cornsilk"]], "crimson (color attribute)": [[6, "sparkocr.enums.Color.crimson"]], "cyan (color attribute)": [[6, "sparkocr.enums.Color.cyan"]], "darkblue (color attribute)": [[6, "sparkocr.enums.Color.darkblue"]], "darkcyan (color attribute)": [[6, "sparkocr.enums.Color.darkcyan"]], "darkgoldenrod (color attribute)": [[6, "sparkocr.enums.Color.darkgoldenrod"]], "darkgray (color attribute)": [[6, "sparkocr.enums.Color.darkgray"]], "darkgreen (color attribute)": [[6, "sparkocr.enums.Color.darkgreen"]], "darkkhaki (color attribute)": [[6, "sparkocr.enums.Color.darkkhaki"]], "darkmagenta (color attribute)": [[6, "sparkocr.enums.Color.darkmagenta"]], "darkolivegreen (color attribute)": [[6, "sparkocr.enums.Color.darkolivegreen"]], "darkorange (color attribute)": [[6, "sparkocr.enums.Color.darkorange"]], "darkorchid (color attribute)": [[6, "sparkocr.enums.Color.darkorchid"]], "darkred (color attribute)": [[6, "sparkocr.enums.Color.darkred"]], "darksalmon (color attribute)": [[6, "sparkocr.enums.Color.darksalmon"]], "darkseagreen (color attribute)": [[6, "sparkocr.enums.Color.darkseagreen"]], "darkslateblue (color attribute)": [[6, "sparkocr.enums.Color.darkslateblue"]], "darkslategray (color attribute)": [[6, "sparkocr.enums.Color.darkslategray"]], "darkturquoise (color attribute)": [[6, "sparkocr.enums.Color.darkturquoise"]], "darkviolet (color attribute)": [[6, "sparkocr.enums.Color.darkviolet"]], "deeppink (color attribute)": [[6, "sparkocr.enums.Color.deeppink"]], "deepskyblue (color attribute)": [[6, "sparkocr.enums.Color.deepskyblue"]], "dimgray (color attribute)": [[6, "sparkocr.enums.Color.dimgray"]], "dodgerblue (color attribute)": [[6, "sparkocr.enums.Color.dodgerblue"]], "firebrick (color attribute)": [[6, "sparkocr.enums.Color.firebrick"]], "floralwhite (color attribute)": [[6, "sparkocr.enums.Color.floralwhite"]], "forestgreen (color attribute)": [[6, "sparkocr.enums.Color.forestgreen"]], "fuchsia (color attribute)": [[6, "sparkocr.enums.Color.fuchsia"]], "gainsboro (color attribute)": [[6, "sparkocr.enums.Color.gainsboro"]], "ghostwhite (color attribute)": [[6, "sparkocr.enums.Color.ghostwhite"]], "gold (color attribute)": [[6, "sparkocr.enums.Color.gold"]], "goldenrod (color attribute)": [[6, "sparkocr.enums.Color.goldenrod"]], "gray (color attribute)": [[6, "sparkocr.enums.Color.gray"]], "green (color attribute)": [[6, "sparkocr.enums.Color.green"]], "greenyellow (color attribute)": [[6, "sparkocr.enums.Color.greenyellow"]], "honeydew (color attribute)": [[6, "sparkocr.enums.Color.honeydew"]], "hotpink (color attribute)": [[6, "sparkocr.enums.Color.hotpink"]], "indianred (color attribute)": [[6, "sparkocr.enums.Color.indianred"]], "indigo (color attribute)": [[6, "sparkocr.enums.Color.indigo"]], "ivory (color attribute)": [[6, "sparkocr.enums.Color.ivory"]], "khaki (color attribute)": [[6, "sparkocr.enums.Color.khaki"]], "lavender (color attribute)": [[6, "sparkocr.enums.Color.lavender"]], "lavenderblush (color attribute)": [[6, "sparkocr.enums.Color.lavenderblush"]], "lawngreen (color attribute)": [[6, "sparkocr.enums.Color.lawngreen"]], "lemonchiffon (color attribute)": [[6, "sparkocr.enums.Color.lemonchiffon"]], "lightblue (color attribute)": [[6, "sparkocr.enums.Color.lightblue"]], "lightcoral (color attribute)": [[6, "sparkocr.enums.Color.lightcoral"]], "lightcyan (color attribute)": [[6, "sparkocr.enums.Color.lightcyan"]], "lightgoldenrodyellow (color attribute)": [[6, "sparkocr.enums.Color.lightgoldenrodyellow"]], "lightgreen (color attribute)": [[6, "sparkocr.enums.Color.lightgreen"]], "lightgrey (color attribute)": [[6, "sparkocr.enums.Color.lightgrey"]], "lightpink (color attribute)": [[6, "sparkocr.enums.Color.lightpink"]], "lightsalmon (color attribute)": [[6, "sparkocr.enums.Color.lightsalmon"]], "lightseagreen (color attribute)": [[6, "sparkocr.enums.Color.lightseagreen"]], "lightskyblue (color attribute)": [[6, "sparkocr.enums.Color.lightskyblue"]], "lightslategray (color attribute)": [[6, "sparkocr.enums.Color.lightslategray"]], "lightsteelblue (color attribute)": [[6, "sparkocr.enums.Color.lightsteelblue"]], "lightyellow (color attribute)": [[6, "sparkocr.enums.Color.lightyellow"]], "lime (color attribute)": [[6, "sparkocr.enums.Color.lime"]], "limegreen (color attribute)": [[6, "sparkocr.enums.Color.limegreen"]], "linen (color attribute)": [[6, "sparkocr.enums.Color.linen"]], "magenta (color attribute)": [[6, "sparkocr.enums.Color.magenta"]], "maroon (color attribute)": [[6, "sparkocr.enums.Color.maroon"]], "mediumaquamarine (color attribute)": [[6, "sparkocr.enums.Color.mediumaquamarine"]], "mediumblue (color attribute)": [[6, "sparkocr.enums.Color.mediumblue"]], "mediumorchid (color attribute)": [[6, "sparkocr.enums.Color.mediumorchid"]], "mediumpurple (color attribute)": [[6, "sparkocr.enums.Color.mediumpurple"]], "mediumseagreen (color attribute)": [[6, "sparkocr.enums.Color.mediumseagreen"]], "mediumslateblue (color attribute)": [[6, "sparkocr.enums.Color.mediumslateblue"]], "mediumspringgreen (color attribute)": [[6, "sparkocr.enums.Color.mediumspringgreen"]], "mediumturquoise (color attribute)": [[6, "sparkocr.enums.Color.mediumturquoise"]], "mediumvioletred (color attribute)": [[6, "sparkocr.enums.Color.mediumvioletred"]], "midnightblue (color attribute)": [[6, "sparkocr.enums.Color.midnightblue"]], "mintcream (color attribute)": [[6, "sparkocr.enums.Color.mintcream"]], "mistyrose (color attribute)": [[6, "sparkocr.enums.Color.mistyrose"]], "moccasin (color attribute)": [[6, "sparkocr.enums.Color.moccasin"]], "navajowhite (color attribute)": [[6, "sparkocr.enums.Color.navajowhite"]], "navy (color attribute)": [[6, "sparkocr.enums.Color.navy"]], "oldlace (color attribute)": [[6, "sparkocr.enums.Color.oldlace"]], "olive (color attribute)": [[6, "sparkocr.enums.Color.olive"]], "olivedrab (color attribute)": [[6, "sparkocr.enums.Color.olivedrab"]], "orange (color attribute)": [[6, "sparkocr.enums.Color.orange"]], "orangered (color attribute)": [[6, "sparkocr.enums.Color.orangered"]], "orchid (color attribute)": [[6, "sparkocr.enums.Color.orchid"]], "palegoldenrod (color attribute)": [[6, "sparkocr.enums.Color.palegoldenrod"]], "palegreen (color attribute)": [[6, "sparkocr.enums.Color.palegreen"]], "paleturquoise (color attribute)": [[6, "sparkocr.enums.Color.paleturquoise"]], "palevioletred (color attribute)": [[6, "sparkocr.enums.Color.palevioletred"]], "papayawhip (color attribute)": [[6, "sparkocr.enums.Color.papayawhip"]], "peachpuff (color attribute)": [[6, "sparkocr.enums.Color.peachpuff"]], "peru (color attribute)": [[6, "sparkocr.enums.Color.peru"]], "pink (color attribute)": [[6, "sparkocr.enums.Color.pink"]], "plum (color attribute)": [[6, "sparkocr.enums.Color.plum"]], "powderblue (color attribute)": [[6, "sparkocr.enums.Color.powderblue"]], "purple (color attribute)": [[6, "sparkocr.enums.Color.purple"]], "red (color attribute)": [[6, "sparkocr.enums.Color.red"]], "rosybrown (color attribute)": [[6, "sparkocr.enums.Color.rosybrown"]], "royalblue (color attribute)": [[6, "sparkocr.enums.Color.royalblue"]], "saddlebrown (color attribute)": [[6, "sparkocr.enums.Color.saddlebrown"]], "salmon (color attribute)": [[6, "sparkocr.enums.Color.salmon"]], "sandybrown (color attribute)": [[6, "sparkocr.enums.Color.sandybrown"]], "seagreen (color attribute)": [[6, "sparkocr.enums.Color.seagreen"]], "seashell (color attribute)": [[6, "sparkocr.enums.Color.seashell"]], "sienna (color attribute)": [[6, "sparkocr.enums.Color.sienna"]], "silver (color attribute)": [[6, "sparkocr.enums.Color.silver"]], "skyblue (color attribute)": [[6, "sparkocr.enums.Color.skyblue"]], "slateblue (color attribute)": [[6, "sparkocr.enums.Color.slateblue"]], "slategray (color attribute)": [[6, "sparkocr.enums.Color.slategray"]], "snow (color attribute)": [[6, "sparkocr.enums.Color.snow"]], "sparkocr.enums": [[6, "module-sparkocr.enums"]], "springgreen (color attribute)": [[6, "sparkocr.enums.Color.springgreen"]], "steelblue (color attribute)": [[6, "sparkocr.enums.Color.steelblue"]], "tan (color attribute)": [[6, "sparkocr.enums.Color.tan"]], "teal (color attribute)": [[6, "sparkocr.enums.Color.teal"]], "thistle (color attribute)": [[6, "sparkocr.enums.Color.thistle"]], "tomato (color attribute)": [[6, "sparkocr.enums.Color.tomato"]], "turquoise (color attribute)": [[6, "sparkocr.enums.Color.turquoise"]], "violet (color attribute)": [[6, "sparkocr.enums.Color.violet"]], "wheat (color attribute)": [[6, "sparkocr.enums.Color.wheat"]], "white (color attribute)": [[6, "sparkocr.enums.Color.white"]], "whitesmoke (color attribute)": [[6, "sparkocr.enums.Color.whitesmoke"]], "yellow (color attribute)": [[6, "sparkocr.enums.Color.yellow"]], "yellowgreen (color attribute)": [[6, "sparkocr.enums.Color.yellowgreen"]], "info() (in module sparkocr)": [[7, "sparkocr.info"]], "johnsnowlabs_module (in module sparkocr)": [[7, "sparkocr.johnsnowlabs_module"]], "load_license_validator() (in module sparkocr)": [[7, "sparkocr.load_license_validator"]], "retry() (in module sparkocr)": [[7, "sparkocr.retry"]], "spark32 (in module sparkocr)": [[7, "sparkocr.spark32"]], "spark_version (in module sparkocr)": [[7, "sparkocr.spark_version"]], "version() (in module sparkocr)": [[7, "sparkocr.version"]], "with_spark_nlp (in module sparkocr)": [[7, "sparkocr.with_spark_nlp"]], "with_spark_nlp_jsl (in module sparkocr)": [[7, "id0"], [7, "sparkocr.with_spark_nlp_jsl"]], "sparkocr.internal": [[8, "module-sparkocr.internal"]], "ocrmetrics (class in sparkocr.metrics)": [[9, "sparkocr.metrics.OcrMetrics"]], "levenshtein_distance() (ocrmetrics method)": [[9, "sparkocr.metrics.OcrMetrics.levenshtein_distance"]], "score() (ocrmetrics method)": [[9, "sparkocr.metrics.OcrMetrics.score"]], "score() (in module sparkocr.metrics)": [[9, "sparkocr.metrics.score"]], "sparkocr.metrics": [[9, "module-sparkocr.metrics"]], "sparkocr.optimized": [[10, "module-sparkocr.optimized"]], "anonymizationpipelinebuilder (class in sparkocr.pretrained.anonymization_pipeline_builder)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder"]], "build() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.build"]], "build_deidentification_branch() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.build_deidentification_branch"]], "build_dicom_branch() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.build_dicom_branch"]], "build_memory_branch() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.build_memory_branch"]], "build_obfuscation_branch() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.build_obfuscation_branch"]], "check_pretrained_pipeline() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.check_pretrained_pipeline"]], "default_matcher_threshold (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.default_matcher_threshold"]], "finalizer (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.finalizer"]], "get_config() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.get_config"]], "get_matcher_entities() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.get_matcher_entities"]], "get_names_from_uid() (anonymizationpipelinebuilder static method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.get_names_from_uid"]], "hc_pipeline (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.hc_pipeline"]], "individual_stage_settings (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.individual_stage_settings"]], "input_type (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.input_type"]], "keep_memory (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.keep_memory"]], "language (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.language"]], "logger (in module sparkocr.pretrained.anonymization_pipeline_builder)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.logger"]], "matcher_dict (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.matcher_dict"]], "nlp_builder() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.nlp_builder"]], "ocr (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.ocr"]], "post_nlp_stages() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.post_nlp_stages"]], "pre_nlp_stages() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.pre_nlp_stages"]], "remote_loc (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.remote_loc"]], "reset_config() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.reset_config"]], "show_config() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.show_config"]], "sparkocr.pretrained.anonymization_pipeline_builder": [[11, "module-sparkocr.pretrained.anonymization_pipeline_builder"]], "stage_config (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.stage_config"]], "task (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.task"]], "update_config() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.update_config"]], "use_gpu (anonymizationpipelinebuilder attribute)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.use_gpu"]], "validate_matchers() (anonymizationpipelinebuilder method)": [[11, "sparkocr.pretrained.anonymization_pipeline_builder.AnonymizationPipelineBuilder.validate_matchers"]], "dicompretrainedpipeline (class in sparkocr.pretrained.dicom_pretrained_pipeline)": [[12, "sparkocr.pretrained.dicom_pretrained_pipeline.DicomPretrainedPipeline"]], "dicom_to_image_pipe (dicompretrainedpipeline attribute)": [[12, "sparkocr.pretrained.dicom_pretrained_pipeline.DicomPretrainedPipeline.dicom_to_image_pipe"]], "draw_regions_pipe (dicompretrainedpipeline attribute)": [[12, "sparkocr.pretrained.dicom_pretrained_pipeline.DicomPretrainedPipeline.draw_regions_pipe"]], "iterable_stages (dicompretrainedpipeline attribute)": [[12, "sparkocr.pretrained.dicom_pretrained_pipeline.DicomPretrainedPipeline.iterable_stages"]], "region_col (dicompretrainedpipeline attribute)": [[12, "sparkocr.pretrained.dicom_pretrained_pipeline.DicomPretrainedPipeline.region_col"]], "sparkocr.pretrained.dicom_pretrained_pipeline": [[12, "module-sparkocr.pretrained.dicom_pretrained_pipeline"]], "transform() (dicompretrainedpipeline method)": [[12, "sparkocr.pretrained.dicom_pretrained_pipeline.DicomPretrainedPipeline.transform"]], "sparkocr.pretrained": [[13, "module-sparkocr.pretrained"]], "pretrainedpipeline (class in sparkocr.pretrained.pretrained_pipeline)": [[14, "sparkocr.pretrained.pretrained_pipeline.PretrainedPipeline"]], "fromlocalpath() (pretrainedpipeline method)": [[14, "sparkocr.pretrained.pretrained_pipeline.PretrainedPipeline.fromLocalPath"]], "from_disk() (pretrainedpipeline static method)": [[14, "sparkocr.pretrained.pretrained_pipeline.PretrainedPipeline.from_disk"]], "sparkocr.pretrained.pretrained_pipeline": [[14, "module-sparkocr.pretrained.pretrained_pipeline"]], "supports_lp() (pretrainedpipeline method)": [[14, "sparkocr.pretrained.pretrained_pipeline.PretrainedPipeline.supports_lp"]], "transform() (pretrainedpipeline method)": [[14, "sparkocr.pretrained.pretrained_pipeline.PretrainedPipeline.transform"]], "answersoutput (class in sparkocr.schemas)": [[15, "sparkocr.schemas.AnswersOutput"]], "base64file (class in sparkocr.schemas)": [[15, "sparkocr.schemas.Base64File"]], "binaryfields (in module sparkocr.schemas)": [[15, "sparkocr.schemas.BinaryFields"]], "binaryfile (class in sparkocr.schemas)": [[15, "sparkocr.schemas.BinaryFile"]], "binaryschema (in module sparkocr.schemas)": [[15, "sparkocr.schemas.BinarySchema"]], "coordinate (class in sparkocr.schemas)": [[15, "sparkocr.schemas.Coordinate"]], "coordinatefields (in module sparkocr.schemas)": [[15, "sparkocr.schemas.CoordinateFields"]], "coordinateschema (in module sparkocr.schemas)": [[15, "sparkocr.schemas.CoordinateSchema"]], "height (class in sparkocr.schemas)": [[15, "sparkocr.schemas.Height"]], "image (class in sparkocr.schemas)": [[15, "sparkocr.schemas.Image"]], "imagefields (in module sparkocr.schemas)": [[15, "sparkocr.schemas.ImageFields"]], "imageoutput (class in sparkocr.schemas)": [[15, "sparkocr.schemas.ImageOutput"]], "imageschema (in module sparkocr.schemas)": [[15, "sparkocr.schemas.ImageSchema"]], "lightpipelineexception (class in sparkocr.schemas)": [[15, "sparkocr.schemas.LightPipelineException"]], "pagenum (class in sparkocr.schemas)": [[15, "sparkocr.schemas.PageNum"]], "positionsoutput (class in sparkocr.schemas)": [[15, "sparkocr.schemas.PositionsOutput"]], "width (class in sparkocr.schemas)": [[15, "sparkocr.schemas.Width"]], "angle (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.angle"]], "data (image attribute)": [[15, "sparkocr.schemas.Image.data"]], "desc (base64file attribute)": [[15, "sparkocr.schemas.Base64File.desc"]], "desc (binaryfile attribute)": [[15, "sparkocr.schemas.BinaryFile.desc"]], "exception (imageoutput attribute)": [[15, "sparkocr.schemas.ImageOutput.exception"]], "height (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.height"]], "height (image attribute)": [[15, "sparkocr.schemas.Image.height"]], "index (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.index"]], "label (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.label"]], "mappingschema (in module sparkocr.schemas)": [[15, "sparkocr.schemas.mappingSchema"]], "mappings (positionsoutput attribute)": [[15, "sparkocr.schemas.PositionsOutput.mappings"]], "merge() (coordinate method)": [[15, "sparkocr.schemas.Coordinate.merge"]], "message (lightpipelineexception attribute)": [[15, "sparkocr.schemas.LightPipelineException.message"]], "mode (image attribute)": [[15, "sparkocr.schemas.Image.mode"]], "nchannels (image attribute)": [[15, "sparkocr.schemas.Image.nChannels"]], "origin (image attribute)": [[15, "sparkocr.schemas.Image.origin"]], "page (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.page"]], "pagematrixschema (in module sparkocr.schemas)": [[15, "sparkocr.schemas.pageMatrixSchema"]], "path (imageoutput attribute)": [[15, "sparkocr.schemas.ImageOutput.path"]], "questions_and_answers (answersoutput attribute)": [[15, "sparkocr.schemas.AnswersOutput.questions_and_answers"]], "resolution (image attribute)": [[15, "sparkocr.schemas.Image.resolution"]], "score (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.score"]], "sparkocr.schemas": [[15, "module-sparkocr.schemas"]], "tablecontainerschema (in module sparkocr.schemas)": [[15, "sparkocr.schemas.tableContainerSchema"]], "text (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.text"]], "textchunkcoordinatetype (in module sparkocr.schemas)": [[15, "sparkocr.schemas.textChunkCoordinateType"]], "value (height attribute)": [[15, "sparkocr.schemas.Height.value"]], "value (pagenum attribute)": [[15, "sparkocr.schemas.PageNum.value"]], "value (width attribute)": [[15, "sparkocr.schemas.Width.value"]], "width (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.width"]], "width (image attribute)": [[15, "sparkocr.schemas.Image.width"]], "x (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.x"]], "y (coordinate attribute)": [[15, "sparkocr.schemas.Coordinate.y"]], "all_dicoms_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.all_dicoms_df"]], "dicom_image_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.dicom_image_df"]], "dicom_image_with_metadata_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.dicom_image_with_metadata_df"]], "dicom_pdf_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.dicom_pdf_df"]], "dicom_single_image_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.dicom_single_image_df"]], "digital_pdf_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.digital_pdf_df"]], "doc_text_multipage_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.doc_text_multipage_df"]], "form1_expected_output() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.form1_expected_output"]], "form_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.form_df"]], "genomic_json() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.genomic_json"]], "hocr_table_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.hocr_table_df"]], "html_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.html_df"]], "htr_span_fake_model() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.htr_span_fake_model"]], "image_brand_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_brand_df"]], "image_cells_header_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_cells_header_df"]], "image_check_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_check_df"]], "image_check_full_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_check_full_df"]], "image_check_hocr() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_check_hocr"]], "image_checkbox_document_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_checkbox_document_df"]], "image_cropped_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_cropped_df"]], "image_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_df"]], "image_df_draw() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_df_draw"]], "image_df_keeplayout() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_df_keeplayout"]], "image_handwritten_text_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_handwritten_text_df"]], "image_kor_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_kor_df"]], "image_multi_dicom_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_multi_dicom_df"]], "image_noised_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_noised_df"]], "image_noised_text() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_noised_text"]], "image_signature_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_signature_df"]], "image_table_cells_document_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_table_cells_document_df"]], "image_table_cells_testdocument_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_table_cells_testdocument_df"]], "image_table_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_table_df"]], "image_table_document_corrected_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_table_document_corrected_df"]], "image_table_document_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_table_document_df"]], "image_table_hocr_cells_img_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_table_hocr_cells_img_df"]], "image_text_lines_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.image_text_lines_df"]], "pdf_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_df"]], "pdf_fonts_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_fonts_df"]], "pdf_genomic_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_genomic_df"]], "pdf_rotated_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_rotated_df"]], "pdf_rotated_text() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_rotated_text"]], "pdf_table_hocr_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_table_hocr_df"]], "pdf_table_hocr_nonascii_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_table_hocr_nonascii_df"]], "pdf_table_image_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_table_image_df"]], "pdf_text_multipage_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_text_multipage_df"]], "pdf_text_tables_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_text_tables_df"]], "pdf_with_acro_form_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_with_acro_form_df"]], "pdf_with_xfa_form_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pdf_with_xfa_form_df"]], "ppt_table_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.ppt_table_df"]], "ppt_text_multipage_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.ppt_text_multipage_df"]], "pptx_table_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pptx_table_df"]], "pptx_text_multipage_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.pptx_text_multipage_df"]], "raw_image_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.raw_image_df"]], "raw_jpeg2k_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.raw_jpeg2k_df"]], "raw_png_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.raw_png_df"]], "raw_tiff_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.raw_tiff_df"]], "regions_merger_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.regions_merger_df"]], "sparkocr.tests.conftest": [[16, "module-sparkocr.tests.conftest"]], "torch_fake_model() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.torch_fake_model"]], "updated_text_multipage_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.updated_text_multipage_df"]], "visual_document_classifier_lilt_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_document_classifier_lilt_df"]], "visual_document_classifier_v2_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_document_classifier_v2_df"]], "visual_document_classifier_v3_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_document_classifier_v3_df"]], "visual_document_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_document_df"]], "visual_document_ner_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_document_ner_df"]], "visual_document_ner_v2_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_document_ner_v2_df"]], "visual_document_ner_v2_train_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_document_ner_v2_train_df"]], "visual_qa_df() (in module sparkocr.tests.conftest)": [[16, "sparkocr.tests.conftest.visual_qa_df"]], "sparkocr.tests": [[17, "module-sparkocr.tests"]], "icdartableextractor (class in sparkocr.tests.ocr.eval.icdar.icdar_table_extractor)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor"]], "clear() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.clear"]], "copy() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.copy"]], "explainparam() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.explainParam"]], "explainparams() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.explainParams"]], "extractparammap() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.extractParamMap"]], "getinputcol() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.getInputCol"]], "getordefault() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.getOrDefault"]], "getoutputcol() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.getOutputCol"]], "getparam() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.getParam"]], "groundtruthpath (icdartableextractor attribute)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.groundTruthPath"]], "hasdefault() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.hasDefault"]], "hasparam() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.hasParam"]], "inputcol (icdartableextractor attribute)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.inputCol"]], "isdefined() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.isDefined"]], "isset() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.isSet"]], "name (icdartableextractor attribute)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.name"]], "outputcol (icdartableextractor attribute)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.outputCol"]], "set() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.set"]], "setgroundtruthpath() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.setGroundTruthPath"]], "setinputcol() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.setInputCol"]], "setoutputcol() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.setOutputCol"]], "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor": [[18, "module-sparkocr.tests.ocr.eval.icdar.icdar_table_extractor"]], "transform() (icdartableextractor method)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.transform"]], "uid (icdartableextractor attribute)": [[18, "sparkocr.tests.ocr.eval.icdar.icdar_table_extractor.IcdarTableExtractor.uid"]], "sparkocr.tests.ocr.eval.icdar": [[19, "module-sparkocr.tests.ocr.eval.icdar"]], "sparkocr.tests.ocr.eval": [[20, "module-sparkocr.tests.ocr.eval"]], "sparkocr.tests.ocr": [[21, "module-sparkocr.tests.ocr"]], "sparkocr.tests.ocr.pipelines": [[22, "module-sparkocr.tests.ocr.pipelines"]], "pipeline_path (testpdfocrpipeline attribute)": [[23, "sparkocr.tests.ocr.pipelines.test_pdf.TestPdfOcrPipeline.PIPELINE_PATH"]], "testpdfocrpipeline (class in sparkocr.tests.ocr.pipelines.test_pdf)": [[23, "sparkocr.tests.ocr.pipelines.test_pdf.TestPdfOcrPipeline"]], "get_pipeline() (testpdfocrpipeline method)": [[23, "sparkocr.tests.ocr.pipelines.test_pdf.TestPdfOcrPipeline.get_pipeline"]], "sparkocr.tests.ocr.pipelines.test_pdf": [[23, "module-sparkocr.tests.ocr.pipelines.test_pdf"]], "teardown_method() (testpdfocrpipeline method)": [[23, "sparkocr.tests.ocr.pipelines.test_pdf.TestPdfOcrPipeline.teardown_method"]], "test_ocr_with_skew_correction() (testpdfocrpipeline method)": [[23, "sparkocr.tests.ocr.pipelines.test_pdf.TestPdfOcrPipeline.test_ocr_with_skew_correction"]], "test_saving_and_loading_pipeline() (testpdfocrpipeline method)": [[23, "sparkocr.tests.ocr.pipelines.test_pdf.TestPdfOcrPipeline.test_saving_and_loading_pipeline"]], "lib_path (teststart attribute)": [[24, "sparkocr.tests.ocr.test_start.TestStart.LIB_PATH"]], "teststart (class in sparkocr.tests.ocr.test_start)": [[24, "sparkocr.tests.ocr.test_start.TestStart"]], "sparkocr.tests.ocr.test_start": [[24, "module-sparkocr.tests.ocr.test_start"]], "test_start() (teststart method)": [[24, "sparkocr.tests.ocr.test_start.TestStart.test_start"]], "sparkocr.tests.ocr.transformers.annotators": [[25, "module-sparkocr.tests.ocr.transformers.annotators"]], "testformrelationextraction (class in sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor)": [[26, "sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor.TestFormRelationExtraction"]], "distancethreshold (testformrelationextraction attribute)": [[26, "sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor.TestFormRelationExtraction.distanceThreshold"]], "sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor": [[26, "module-sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor"]], "test_new_form_relation_logic() (testformrelationextraction method)": [[26, "sparkocr.tests.ocr.transformers.annotators.test_form_relation_extractor.TestFormRelationExtraction.test_new_form_relation_logic"]], "testvisualdocumentnergeo (class in sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor)": [[27, "sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor.TestVisualDocumentNerGeo"]], "sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor": [[27, "module-sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor"]], "test_inference() (testvisualdocumentnergeo method)": [[27, "sparkocr.tests.ocr.transformers.annotators.test_geo_relation_extractor.TestVisualDocumentNerGeo.test_inference"], [53, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo.TestVisualDocumentNerGeo.test_inference"]], "sparkocr.tests.ocr.transformers.detectors": [[28, "module-sparkocr.tests.ocr.transformers.detectors"]], "testimagecheckboxdetector (class in sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector)": [[29, "sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector.TestImageCheckboxDetector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector": [[29, "module-sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector"]], "test_image_checkbox_detector_pretrained() (testimagecheckboxdetector method)": [[29, "sparkocr.tests.ocr.transformers.detectors.test_image_checkbox_detector.TestImageCheckboxDetector.test_image_checkbox_detector_pretrained"]], "testimagedocumentregiondetector (class in sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector)": [[30, "sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector.TestImageDocumentRegionDetector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector": [[30, "module-sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector"]], "test_image_region_detector_pretrained() (testimagedocumentregiondetector method)": [[30, "sparkocr.tests.ocr.transformers.detectors.test_image_document_region_detector.TestImageDocumentRegionDetector.test_image_region_detector_pretrained"]], "testdocumentlayoutanalyzer (class in sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit)": [[31, "sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit.TestDocumentLayoutAnalyzer"]], "sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit": [[31, "module-sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit"]], "test_image_layout_analyzer() (testdocumentlayoutanalyzer method)": [[31, "sparkocr.tests.ocr.transformers.detectors.test_image_layout_analyzer_dit.TestDocumentLayoutAnalyzer.test_image_layout_analyzer"]], "testimagetextdetector (class in sparkocr.tests.ocr.transformers.detectors.test_image_text_detector)": [[32, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector.TestImageTextDetector"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector": [[32, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector"]], "test_image_text_detector_craft() (testimagetextdetector method)": [[32, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector.TestImageTextDetector.test_image_text_detector_craft"]], "test_image_text_detector_dit() (testimagetextdetector method)": [[32, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector.TestImageTextDetector.test_image_text_detector_dit"]], "testimagetextdetectorcraft (class in sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft)": [[33, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft.TestImageTextDetectorCraft"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft": [[33, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft"]], "test_image_text_detector() (testimagetextdetectorcraft method)": [[33, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft.TestImageTextDetectorCraft.test_image_text_detector"]], "test_loading_from_disk() (testimagetextdetectorcraft method)": [[33, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft.TestImageTextDetectorCraft.test_loading_from_disk"]], "tmpmodelfolder (in module sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft)": [[33, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_craft.tmpModelFolder"]], "testimagetextdetectorv2 (class in sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2)": [[34, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2.TestImageTextDetectorV2"]], "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2": [[34, "module-sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2"]], "test_image_text_detector() (testimagetextdetectorv2 method)": [[34, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2.TestImageTextDetectorV2.test_image_text_detector"]], "test_image_text_detector_pandas() (testimagetextdetectorv2 method)": [[34, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2.TestImageTextDetectorV2.test_image_text_detector_pandas"]], "test_load_model() (testimagetextdetectorv2 method)": [[34, "sparkocr.tests.ocr.transformers.detectors.test_image_text_detector_v2.TestImageTextDetectorV2.test_load_model"]], "sparkocr.tests.ocr.transformers.dicom": [[35, "module-sparkocr.tests.ocr.transformers.dicom"]], "testdicomdeidentifier (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier)": [[36, "sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier.TestDicomDeidentifier"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier": [[36, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier"]], "test_dicom_deidentifier() (testdicomdeidentifier method)": [[36, "sparkocr.tests.ocr.transformers.dicom.test_dicom_deidentifier.TestDicomDeidentifier.test_dicom_deidentifier"]], "testdicomdrawregions (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions"]], "get_draw_regions() (in module sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.get_draw_regions"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions": [[37, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions"]], "test_drawregions() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_DrawRegions"]], "test_format_exception_from_traceback() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_format_exception_from_traceback"]], "test_jpeg_12_bit_compression() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_jpeg_12_bit_compression"]], "test_reject_badvr() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_reject_badVR"]], "test_reject_dicom_with_no_pixel_data() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_reject_dicom_with_no_pixel_data"]], "test_rle_reject_ybr_full_422() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_rle_reject_ybr_full_422"]], "test_ybr_full_422_8bit_compression() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_ybr_full_422_8Bit_compression"]], "test_ybr_full_422_no_compression() (testdicomdrawregions method)": [[37, "sparkocr.tests.ocr.transformers.dicom.test_dicom_draw_regions.TestDicomDrawRegions.test_ybr_full_422_no_compression"]], "testdicommetadatadeidentifier (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier"]], "last_names_file (testdicommetadatadeidentifier attribute)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier.last_names_file"]], "names_file (testdicommetadatadeidentifier attribute)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier.names_file"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier": [[38, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier"]], "test_customcsvfile() (testdicommetadatadeidentifier method)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier.test_CustomCsvFile"]], "test_metadatadeidentifier() (testdicommetadatadeidentifier method)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier.test_MetadataDeidentifier"]], "test_uid_obfuscator() (testdicommetadatadeidentifier method)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier.test_UID_Obfuscator"]], "test_dicom_basic_obfuscator() (testdicommetadatadeidentifier method)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier.test_dicom_basic_obfuscator"]], "test_remove_all_private_tags() (testdicommetadatadeidentifier method)": [[38, "sparkocr.tests.ocr.transformers.dicom.test_dicom_metadata_deidentifier.TestDicomMetadataDeidentifier.test_remove_all_private_tags"]], "testdicomsplitter (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter)": [[39, "sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter.TestDicomSplitter"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter": [[39, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter"]], "test_fixed_number_partition() (testdicomsplitter method)": [[39, "sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter.TestDicomSplitter.test_fixed_number_partition"]], "test_fixed_size_partition() (testdicomsplitter method)": [[39, "sparkocr.tests.ocr.transformers.dicom.test_dicom_splitter.TestDicomSplitter.test_fixed_size_partition"]], "testdicomtoimagev2 (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2)": [[40, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2.TestDicomToImageV2"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2": [[40, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2"]], "test_dicom_to_image() (testdicomtoimagev2 method)": [[40, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2.TestDicomToImageV2.test_dicom_to_image"]], "test_dicom_to_image_with_splitter() (testdicomtoimagev2 method)": [[40, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v2.TestDicomToImageV2.test_dicom_to_image_with_splitter"]], "testdicomtoimagev3 (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3)": [[41, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3.TestDicomToImageV3"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3": [[41, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3"]], "test_dicom_to_image() (testdicomtoimagev3 method)": [[41, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_image_v3.TestDicomToImageV3.test_dicom_to_image"]], "testdicomtometadata (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata)": [[42, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata.TestDicomToMetadata"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata": [[42, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata"]], "test_dicom_to_metadata() (testdicomtometadata method)": [[42, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata.TestDicomToMetadata.test_dicom_to_metadata"]], "test_dicom_to_metadata_s3() (testdicomtometadata method)": [[42, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_metadata.TestDicomToMetadata.test_dicom_to_metadata_s3"]], "testdicomtopdf (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf)": [[43, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf.TestDicomToPdf"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf": [[43, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf"]], "test_dicom_to_pdf() (testdicomtopdf method)": [[43, "sparkocr.tests.ocr.transformers.dicom.test_dicom_to_pdf.TestDicomToPdf.test_dicom_to_pdf"]], "testdicomupdatepdf (class in sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf)": [[44, "sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf.TestDicomUpdatePdf"]], "sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf": [[44, "module-sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf"]], "test_dicom_update_pdf() (testdicomupdatepdf method)": [[44, "sparkocr.tests.ocr.transformers.dicom.test_dicom_update_pdf.TestDicomUpdatePdf.test_dicom_update_pdf"]], "sparkocr.tests.ocr.transformers.embeddings": [[45, "module-sparkocr.tests.ocr.transformers.embeddings"]], "testvitimageembeddings (class in sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings)": [[46, "sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings.TestVitImageEmbeddings"]], "sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings": [[46, "module-sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings"]], "test_vit_image_embeddings() (testvitimageembeddings method)": [[46, "sparkocr.tests.ocr.transformers.embeddings.test_vit_image_embeddings.TestVitImageEmbeddings.test_vit_image_embeddings"]], "sparkocr.tests.ocr.transformers": [[47, "module-sparkocr.tests.ocr.transformers"]], "sparkocr.tests.ocr.transformers.inpainting": [[48, "module-sparkocr.tests.ocr.transformers.inpainting"]], "testimageinpainting (class in sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting)": [[49, "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting.TestImageInpainting"]], "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting": [[49, "module-sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting"]], "test_model_io_operation() (testimageinpainting method)": [[49, "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting.TestImageInpainting.test_model_io_operation"]], "test_pretrained_io_operation() (testimageinpainting method)": [[49, "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting.TestImageInpainting.test_pretrained_io_operation"]], "test_with_regions() (testimageinpainting method)": [[49, "sparkocr.tests.ocr.transformers.inpainting.test_image_inpainting.TestImageInpainting.test_with_regions"]], "sparkocr.tests.ocr.transformers.ner": [[50, "module-sparkocr.tests.ocr.transformers.ner"]], "testhocrtofeatures (class in sparkocr.tests.ocr.transformers.ner.test_hocr_to_features)": [[51, "sparkocr.tests.ocr.transformers.ner.test_hocr_to_features.TestHocrToFeatures"]], "sparkocr.tests.ocr.transformers.ner.test_hocr_to_features": [[51, "module-sparkocr.tests.ocr.transformers.ner.test_hocr_to_features"]], "test_inference() (testhocrtofeatures method)": [[51, "sparkocr.tests.ocr.transformers.ner.test_hocr_to_features.TestHocrToFeatures.test_inference"]], "testvisualdocumentner (class in sparkocr.tests.ocr.transformers.ner.test_visual_document_ner)": [[52, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner.TestVisualDocumentNer"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner": [[52, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner"]], "test_visual_document_ner() (testvisualdocumentner method)": [[52, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner.TestVisualDocumentNer.test_visual_document_ner"], [54, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1.TestVisualDocumentNer.test_visual_document_ner"]], "testvisualdocumentnergeo (class in sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo)": [[53, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo.TestVisualDocumentNerGeo"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo": [[53, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_geo"]], "testvisualdocumentner (class in sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1)": [[54, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1.TestVisualDocumentNer"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1": [[54, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_layoutlm_v1"]], "testvisualdocumentnerlilt (class in sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt)": [[55, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt.TestVisualDocumentNerLilt"]], "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt": [[55, "module-sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt"]], "test_visual_document_ner_lilt_inference() (testvisualdocumentnerlilt method)": [[55, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt.TestVisualDocumentNerLilt.test_visual_document_ner_lilt_inference"]], "test_visual_document_ner_lilt_train() (testvisualdocumentnerlilt method)": [[55, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt.TestVisualDocumentNerLilt.test_visual_document_ner_lilt_train"]], "visual_document_ner_lilt_from_datasets() (testvisualdocumentnerlilt method)": [[55, "sparkocr.tests.ocr.transformers.ner.test_visual_document_ner_lilt.TestVisualDocumentNerLilt.visual_document_ner_lilt_from_datasets"]], "sparkocr.tests.ocr.transformers.readers": [[56, "module-sparkocr.tests.ocr.transformers.readers"]], "testalabreaders (class in sparkocr.tests.ocr.transformers.readers.test_alab_readers)": [[57, "sparkocr.tests.ocr.transformers.readers.test_alab_readers.TestAlabReaders"]], "sparkocr.tests.ocr.transformers.readers.test_alab_readers": [[57, "module-sparkocr.tests.ocr.transformers.readers.test_alab_readers"]], "test_json_reader_v1() (testalabreaders method)": [[57, "sparkocr.tests.ocr.transformers.readers.test_alab_readers.TestAlabReaders.test_json_reader_v1"]], "sparkocr.tests.ocr.transformers.recognizers": [[58, "module-sparkocr.tests.ocr.transformers.recognizers"]], "testimagetotextv2 (class in sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2)": [[59, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2.TestImageToTextV2"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2": [[59, "module-sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2"]], "test_batch_image_to_formatted_text() (testimagetotextv2 method)": [[59, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2.TestImageToTextV2.test_batch_image_to_formatted_text"]], "test_batch_image_to_hocr() (testimagetotextv2 method)": [[59, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2.TestImageToTextV2.test_batch_image_to_hocr"]], "test_image_to_text() (testimagetotextv2 method)": [[59, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2.TestImageToTextV2.test_image_to_text"]], "test_load_models() (testimagetotextv2 method)": [[59, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2.TestImageToTextV2.test_load_models"]], "test_regions_with_confidence() (testimagetotextv2 method)": [[59, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v2.TestImageToTextV2.test_regions_with_confidence"]], "testimagetotextv3 (class in sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3)": [[60, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3.TestImageToTextV3"]], "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3": [[60, "module-sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3"]], "test_image_text_detector() (testimagetotextv3 method)": [[60, "sparkocr.tests.ocr.transformers.recognizers.test_image_to_text_v3.TestImageToTextV3.test_image_text_detector"]], "testbinarytoimage (class in sparkocr.tests.ocr.transformers.test_binary_to_image)": [[61, "sparkocr.tests.ocr.transformers.test_binary_to_image.TestBinaryToImage"]], "sparkocr.tests.ocr.transformers.test_binary_to_image": [[61, "module-sparkocr.tests.ocr.transformers.test_binary_to_image"]], "test_binary_to_image() (testbinarytoimage method)": [[61, "sparkocr.tests.ocr.transformers.test_binary_to_image.TestBinaryToImage.test_binary_to_image"]], "test_binary_to_jpeg2k_image() (testbinarytoimage method)": [[61, "sparkocr.tests.ocr.transformers.test_binary_to_image.TestBinaryToImage.test_binary_to_jpeg2k_image"]], "test_binary_to_tiff_image() (testbinarytoimage method)": [[61, "sparkocr.tests.ocr.transformers.test_binary_to_image.TestBinaryToImage.test_binary_to_tiff_image"]], "testdatasetreader (class in sparkocr.tests.ocr.transformers.test_datasetreader)": [[62, "sparkocr.tests.ocr.transformers.test_datasetreader.TestDatasetReader"]], "sparkocr.tests.ocr.transformers.test_datasetreader": [[62, "module-sparkocr.tests.ocr.transformers.test_datasetreader"]], "test_load_dataset() (testdatasetreader method)": [[62, "sparkocr.tests.ocr.transformers.test_datasetreader.TestDatasetReader.test_load_dataset"]], "test_load_preprocessed_dataset() (testdatasetreader method)": [[62, "sparkocr.tests.ocr.transformers.test_datasetreader.TestDatasetReader.test_load_preprocessed_dataset"]], "testdicommetadataobfuscator (class in sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator)": [[63, "sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator.TestDicomMetadataObfuscator"]], "sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator": [[63, "module-sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator"]], "test_dicom_basic_obfuscator() (testdicommetadataobfuscator method)": [[63, "sparkocr.tests.ocr.transformers.test_dicom_metadata_obfuscator.TestDicomMetadataObfuscator.test_dicom_basic_obfuscator"]], "testdicomtoimage (class in sparkocr.tests.ocr.transformers.test_dicom_to_image)": [[64, "sparkocr.tests.ocr.transformers.test_dicom_to_image.TestDicomToImage"]], "sparkocr.tests.ocr.transformers.test_dicom_to_image": [[64, "module-sparkocr.tests.ocr.transformers.test_dicom_to_image"]], "test_deidentified_metadata_dicom_to_image() (testdicomtoimage method)": [[64, "sparkocr.tests.ocr.transformers.test_dicom_to_image.TestDicomToImage.test_deidentified_metadata_dicom_to_image"]], "test_dicom_to_image() (testdicomtoimage method)": [[64, "sparkocr.tests.ocr.transformers.test_dicom_to_image.TestDicomToImage.test_dicom_to_image"]], "test_metadata_dicom_to_image() (testdicomtoimage method)": [[64, "sparkocr.tests.ocr.transformers.test_dicom_to_image.TestDicomToImage.test_metadata_dicom_to_image"]], "testdisplaytables (class in sparkocr.tests.ocr.transformers.test_display_table)": [[65, "sparkocr.tests.ocr.transformers.test_display_table.TestDisplayTables"]], "sparkocr.tests.ocr.transformers.test_display_table": [[65, "module-sparkocr.tests.ocr.transformers.test_display_table"]], "test_display() (testdisplaytables method)": [[65, "sparkocr.tests.ocr.transformers.test_display_table.TestDisplayTables.test_display"]], "test_display_empty() (testdisplaytables method)": [[65, "sparkocr.tests.ocr.transformers.test_display_table.TestDisplayTables.test_display_empty"]], "testdoctopdf (class in sparkocr.tests.ocr.transformers.test_doc_to_pdf)": [[66, "sparkocr.tests.ocr.transformers.test_doc_to_pdf.TestDocToPdf"]], "sparkocr.tests.ocr.transformers.test_doc_to_pdf": [[66, "module-sparkocr.tests.ocr.transformers.test_doc_to_pdf"]], "test_without_split_by_page() (testdoctopdf method)": [[66, "sparkocr.tests.ocr.transformers.test_doc_to_pdf.TestDocToPdf.test_without_split_by_page"]], "testdoctotext (class in sparkocr.tests.ocr.transformers.test_doc_to_text)": [[67, "sparkocr.tests.ocr.transformers.test_doc_to_text.TestDocToText"]], "sparkocr.tests.ocr.transformers.test_doc_to_text": [[67, "module-sparkocr.tests.ocr.transformers.test_doc_to_text"]], "test_without_split_by_page() (testdoctotext method)": [[67, "sparkocr.tests.ocr.transformers.test_doc_to_text.TestDocToText.test_without_split_by_page"]], "testdoctotexttable (class in sparkocr.tests.ocr.transformers.test_doc_to_text_table)": [[68, "sparkocr.tests.ocr.transformers.test_doc_to_text_table.TestDocToTextTable"]], "sparkocr.tests.ocr.transformers.test_doc_to_text_table": [[68, "module-sparkocr.tests.ocr.transformers.test_doc_to_text_table"]], "test_should_save_and_load() (testdoctotexttable method)": [[68, "sparkocr.tests.ocr.transformers.test_doc_to_text_table.TestDocToTextTable.test_should_save_and_load"]], "test_without_split_by_page() (testdoctotexttable method)": [[68, "sparkocr.tests.ocr.transformers.test_doc_to_text_table.TestDocToTextTable.test_without_split_by_page"]], "testfindingsparser (class in sparkocr.tests.ocr.transformers.test_foundationone_parser)": [[69, "sparkocr.tests.ocr.transformers.test_foundationone_parser.TestFindingsParser"]], "sparkocr.tests.ocr.transformers.test_foundationone_parser": [[69, "module-sparkocr.tests.ocr.transformers.test_foundationone_parser"]], "test_split_by_page() (testfindingsparser method)": [[69, "sparkocr.tests.ocr.transformers.test_foundationone_parser.TestFindingsParser.test_split_by_page"]], "testhocrmerger (class in sparkocr.tests.ocr.transformers.test_hocr_merger)": [[70, "sparkocr.tests.ocr.transformers.test_hocr_merger.TestHocrMerger"]], "sparkocr.tests.ocr.transformers.test_hocr_merger": [[70, "module-sparkocr.tests.ocr.transformers.test_hocr_merger"]], "test_hocr_merger() (testhocrmerger method)": [[70, "sparkocr.tests.ocr.transformers.test_hocr_merger.TestHocrMerger.test_hocr_merger"]], "testhocrtoimage (class in sparkocr.tests.ocr.transformers.test_hocr_to_image)": [[71, "sparkocr.tests.ocr.transformers.test_hocr_to_image.TestHocrToImage"]], "sparkocr.tests.ocr.transformers.test_hocr_to_image": [[71, "module-sparkocr.tests.ocr.transformers.test_hocr_to_image"]], "test_hocr_to_image() (testhocrtoimage method)": [[71, "sparkocr.tests.ocr.transformers.test_hocr_to_image.TestHocrToImage.test_hocr_to_image"]], "testhocrtotexttable (class in sparkocr.tests.ocr.transformers.test_hocr_to_text_table)": [[72, "sparkocr.tests.ocr.transformers.test_hocr_to_text_table.TestHocrToTextTable"]], "sparkocr.tests.ocr.transformers.test_hocr_to_text_table": [[72, "module-sparkocr.tests.ocr.transformers.test_hocr_to_text_table"]], "test_hocr_to_text_table_using_cells() (testhocrtotexttable method)": [[72, "sparkocr.tests.ocr.transformers.test_hocr_to_text_table.TestHocrToTextTable.test_hocr_to_text_table_using_cells"]], "test_hocr_to_text_table_using_cells_regions() (testhocrtotexttable method)": [[72, "sparkocr.tests.ocr.transformers.test_hocr_to_text_table.TestHocrToTextTable.test_hocr_to_text_table_using_cells_regions"]], "testimageadaptivebinarizer (class in sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer)": [[73, "sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer.TestImageAdaptiveBinarizer"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer": [[73, "module-sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer"]], "test_image_adaptive_thresholding() (testimageadaptivebinarizer method)": [[73, "sparkocr.tests.ocr.transformers.test_image_adaptive_binarizer.TestImageAdaptiveBinarizer.test_image_adaptive_thresholding"]], "testimageadaptivethresholding (class in sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding)": [[74, "sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding.TestImageAdaptiveThresholding"]], "sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding": [[74, "module-sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding"]], "test_image_adaptive_thresholding() (testimageadaptivethresholding method)": [[74, "sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding.TestImageAdaptiveThresholding.test_image_adaptive_thresholding"]], "test_image_adaptive_thresholding_wolf() (testimageadaptivethresholding method)": [[74, "sparkocr.tests.ocr.transformers.test_image_adaptive_thresholding.TestImageAdaptiveThresholding.test_image_adaptive_thresholding_wolf"]], "testimagebinarizer (class in sparkocr.tests.ocr.transformers.test_image_binarizer)": [[75, "sparkocr.tests.ocr.transformers.test_image_binarizer.TestImageBinarizer"]], "sparkocr.tests.ocr.transformers.test_image_binarizer": [[75, "module-sparkocr.tests.ocr.transformers.test_image_binarizer"]], "test_image_binarazer() (testimagebinarizer method)": [[75, "sparkocr.tests.ocr.transformers.test_image_binarizer.TestImageBinarizer.test_image_binarazer"]], "testimagebrandsocr (class in sparkocr.tests.ocr.transformers.test_image_brands_ocr)": [[76, "sparkocr.tests.ocr.transformers.test_image_brands_ocr.TestImageBrandsOcr"]], "sparkocr.tests.ocr.transformers.test_image_brands_ocr": [[76, "module-sparkocr.tests.ocr.transformers.test_image_brands_ocr"]], "test_tesseract_ocr_with_brands() (testimagebrandsocr method)": [[76, "sparkocr.tests.ocr.transformers.test_image_brands_ocr.TestImageBrandsOcr.test_tesseract_ocr_with_brands"]], "test_whole_image_ocr() (testimagebrandsocr method)": [[76, "sparkocr.tests.ocr.transformers.test_image_brands_ocr.TestImageBrandsOcr.test_whole_image_ocr"]], "testimagecellstotexttable (class in sparkocr.tests.ocr.transformers.test_image_cells_to_text_table)": [[77, "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table.TestImageCellsToTextTable"]], "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table": [[77, "module-sparkocr.tests.ocr.transformers.test_image_cells_to_text_table"]], "test_image_table_to_text_contours() (testimagecellstotexttable method)": [[77, "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table.TestImageCellsToTextTable.test_image_table_to_text_contours"]], "test_image_table_to_text_csv_output() (testimagecellstotexttable method)": [[77, "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table.TestImageCellsToTextTable.test_image_table_to_text_csv_output"]], "test_image_table_to_text_morphops() (testimagecellstotexttable method)": [[77, "sparkocr.tests.ocr.transformers.test_image_cells_to_text_table.TestImageCellsToTextTable.test_image_table_to_text_morphops"]], "testimagecropper (class in sparkocr.tests.ocr.transformers.test_image_cropper)": [[78, "sparkocr.tests.ocr.transformers.test_image_cropper.TestImageCropper"]], "sparkocr.tests.ocr.transformers.test_image_cropper": [[78, "module-sparkocr.tests.ocr.transformers.test_image_cropper"]], "test_image_cropper() (testimagecropper method)": [[78, "sparkocr.tests.ocr.transformers.test_image_cropper.TestImageCropper.test_image_cropper"]], "test_image_cropper_with_provide_square() (testimagecropper method)": [[78, "sparkocr.tests.ocr.transformers.test_image_cropper.TestImageCropper.test_image_cropper_with_provide_square"]], "testimagedrawannotations (class in sparkocr.tests.ocr.transformers.test_image_draw_annotations)": [[79, "sparkocr.tests.ocr.transformers.test_image_draw_annotations.TestImageDrawAnnotations"]], "imagepath (testimagedrawannotations attribute)": [[79, "sparkocr.tests.ocr.transformers.test_image_draw_annotations.TestImageDrawAnnotations.imagePath"]], "returnpipeline() (testimagedrawannotations method)": [[79, "sparkocr.tests.ocr.transformers.test_image_draw_annotations.TestImageDrawAnnotations.returnPipeline"]], "sparkocr.tests.ocr.transformers.test_image_draw_annotations": [[79, "module-sparkocr.tests.ocr.transformers.test_image_draw_annotations"]], "test_using_wildcard_in_colormap() (testimagedrawannotations method)": [[79, "sparkocr.tests.ocr.transformers.test_image_draw_annotations.TestImageDrawAnnotations.test_using_wildcard_in_colorMap"]], "test_with_missing_label_in_colormap() (testimagedrawannotations method)": [[79, "sparkocr.tests.ocr.transformers.test_image_draw_annotations.TestImageDrawAnnotations.test_with_missing_label_in_colorMap"]], "testimagedrawregions (class in sparkocr.tests.ocr.transformers.test_image_draw_regions)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions"]], "sparkocr.tests.ocr.transformers.test_image_draw_regions": [[80, "module-sparkocr.tests.ocr.transformers.test_image_draw_regions"]], "test_exception_thrown_empty_annotation() (testimagedrawregions method)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions.test_exception_thrown_empty_annotation"]], "test_exception_thrown_empty_coordinates() (testimagedrawregions method)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions.test_exception_thrown_empty_coordinates"]], "test_for_display() (testimagedrawregions method)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions.test_for_display"]], "test_no_color_serialization() (testimagedrawregions method)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions.test_no_color_serialization"]], "test_redaction_mixed_obfuscation() (testimagedrawregions method)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions.test_redaction_mixed_obfuscation"]], "test_split_by_region() (testimagedrawregions method)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions.test_split_by_region"]], "test_with_color_serialization() (testimagedrawregions method)": [[80, "sparkocr.tests.ocr.transformers.test_image_draw_regions.TestImageDrawRegions.test_with_color_serialization"]], "testimageerosion (class in sparkocr.tests.ocr.transformers.test_image_erosion)": [[81, "sparkocr.tests.ocr.transformers.test_image_erosion.TestImageErosion"]], "sparkocr.tests.ocr.transformers.test_image_erosion": [[81, "module-sparkocr.tests.ocr.transformers.test_image_erosion"]], "test_image_erosion() (testimageerosion method)": [[81, "sparkocr.tests.ocr.transformers.test_image_erosion.TestImageErosion.test_image_erosion"]], "testimagegpuoperation (class in sparkocr.tests.ocr.transformers.test_image_gpu_transform)": [[82, "sparkocr.tests.ocr.transformers.test_image_gpu_transform.TestImageGpuOperation"]], "sparkocr.tests.ocr.transformers.test_image_gpu_transform": [[82, "module-sparkocr.tests.ocr.transformers.test_image_gpu_transform"]], "test_image_gpu_transform() (testimagegpuoperation method)": [[82, "sparkocr.tests.ocr.transformers.test_image_gpu_transform.TestImageGpuOperation.test_image_gpu_transform"]], "testimagehandwrittentextrecognizer (class in sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer)": [[83, "sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer.TestImageHandwrittenTextRecognizer"]], "sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer": [[83, "module-sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer"]], "test_image_handwritten_text_recognizer() (testimagehandwrittentextrecognizer method)": [[83, "sparkocr.tests.ocr.transformers.test_image_handwritten_text_recognizer.TestImageHandwrittenTextRecognizer.test_image_handwritten_text_recognizer"]], "testimagelayoutanalyzer (class in sparkocr.tests.ocr.transformers.test_image_layout_analyzer)": [[84, "sparkocr.tests.ocr.transformers.test_image_layout_analyzer.TestImageLayoutAnalyzer"]], "sparkocr.tests.ocr.transformers.test_image_layout_analyzer": [[84, "module-sparkocr.tests.ocr.transformers.test_image_layout_analyzer"]], "test_split_by_region() (testimagelayoutanalyzer method)": [[84, "sparkocr.tests.ocr.transformers.test_image_layout_analyzer.TestImageLayoutAnalyzer.test_split_by_region"]], "testimagemorphologyoperation (class in sparkocr.tests.ocr.transformers.test_image_morphology_operation)": [[85, "sparkocr.tests.ocr.transformers.test_image_morphology_operation.TestImageMorphologyOperation"]], "sparkocr.tests.ocr.transformers.test_image_morphology_operation": [[85, "module-sparkocr.tests.ocr.transformers.test_image_morphology_operation"]], "test_image_morphology_opening() (testimagemorphologyoperation method)": [[85, "sparkocr.tests.ocr.transformers.test_image_morphology_operation.TestImageMorphologyOperation.test_image_morphology_opening"]], "testimagenoisescorer (class in sparkocr.tests.ocr.transformers.test_image_noise_scorer)": [[86, "sparkocr.tests.ocr.transformers.test_image_noise_scorer.TestImageNoiseScorer"]], "sparkocr.tests.ocr.transformers.test_image_noise_scorer": [[86, "module-sparkocr.tests.ocr.transformers.test_image_noise_scorer"]], "test_image_noise_scorer() (testimagenoisescorer method)": [[86, "sparkocr.tests.ocr.transformers.test_image_noise_scorer.TestImageNoiseScorer.test_image_noise_scorer"]], "testimageregionsmerger (class in sparkocr.tests.ocr.transformers.test_image_regions_merger)": [[87, "sparkocr.tests.ocr.transformers.test_image_regions_merger.TestImageRegionsMerger"]], "sparkocr.tests.ocr.transformers.test_image_regions_merger": [[87, "module-sparkocr.tests.ocr.transformers.test_image_regions_merger"]], "test_merge_regions_keeptxt() (testimageregionsmerger method)": [[87, "sparkocr.tests.ocr.transformers.test_image_regions_merger.TestImageRegionsMerger.test_merge_regions_keeptxt"]], "test_merge_regions_mergetocells() (testimageregionsmerger method)": [[87, "sparkocr.tests.ocr.transformers.test_image_regions_merger.TestImageRegionsMerger.test_merge_regions_mergetocells"]], "testimageremoveobjects (class in sparkocr.tests.ocr.transformers.test_image_remove_objects)": [[88, "sparkocr.tests.ocr.transformers.test_image_remove_objects.TestImageRemoveObjects"]], "sparkocr.tests.ocr.transformers.test_image_remove_objects": [[88, "module-sparkocr.tests.ocr.transformers.test_image_remove_objects"]], "test_image_remove_objects() (testimageremoveobjects method)": [[88, "sparkocr.tests.ocr.transformers.test_image_remove_objects.TestImageRemoveObjects.test_image_remove_objects"]], "test_image_remove_objects_with_min_font_size() (testimageremoveobjects method)": [[88, "sparkocr.tests.ocr.transformers.test_image_remove_objects.TestImageRemoveObjects.test_image_remove_objects_with_min_font_size"]], "testimagesignaturedetector (class in sparkocr.tests.ocr.transformers.test_image_signature_detector)": [[89, "sparkocr.tests.ocr.transformers.test_image_signature_detector.TestImageSignatureDetector"]], "sparkocr.tests.ocr.transformers.test_image_signature_detector": [[89, "module-sparkocr.tests.ocr.transformers.test_image_signature_detector"]], "test_image_signature_detector() (testimagesignaturedetector method)": [[89, "sparkocr.tests.ocr.transformers.test_image_signature_detector.TestImageSignatureDetector.test_image_signature_detector"]], "testimageskewcorrector (class in sparkocr.tests.ocr.transformers.test_image_skew_corrector)": [[90, "sparkocr.tests.ocr.transformers.test_image_skew_corrector.TestImageSkewCorrector"]], "sparkocr.tests.ocr.transformers.test_image_skew_corrector": [[90, "module-sparkocr.tests.ocr.transformers.test_image_skew_corrector"]], "test_base_skew_corrector() (testimageskewcorrector method)": [[90, "sparkocr.tests.ocr.transformers.test_image_skew_corrector.TestImageSkewCorrector.test_base_skew_corrector"]], "testimagesplitregions (class in sparkocr.tests.ocr.transformers.test_image_split_regions)": [[91, "sparkocr.tests.ocr.transformers.test_image_split_regions.TestImageSplitRegions"]], "sparkocr.tests.ocr.transformers.test_image_split_regions": [[91, "module-sparkocr.tests.ocr.transformers.test_image_split_regions"]], "test_split_by_region_after_layout_analyzer() (testimagesplitregions method)": [[91, "sparkocr.tests.ocr.transformers.test_image_split_regions.TestImageSplitRegions.test_split_by_region_after_layout_analyzer"]], "test_split_by_region_after_table_detector() (testimagesplitregions method)": [[91, "sparkocr.tests.ocr.transformers.test_image_split_regions.TestImageSplitRegions.test_split_by_region_after_table_detector"]], "testimagetablecelldetector (class in sparkocr.tests.ocr.transformers.test_image_table_cells_detector)": [[92, "sparkocr.tests.ocr.transformers.test_image_table_cells_detector.TestImageTableCellDetector"]], "sparkocr.tests.ocr.transformers.test_image_table_cells_detector": [[92, "module-sparkocr.tests.ocr.transformers.test_image_table_cells_detector"]], "test_cell_detector_contours() (testimagetablecelldetector method)": [[92, "sparkocr.tests.ocr.transformers.test_image_table_cells_detector.TestImageTableCellDetector.test_cell_detector_contours"]], "test_cell_detector_cut_header() (testimagetablecelldetector method)": [[92, "sparkocr.tests.ocr.transformers.test_image_table_cells_detector.TestImageTableCellDetector.test_cell_detector_cut_header"]], "test_cell_detector_morphops_default_params() (testimagetablecelldetector method)": [[92, "sparkocr.tests.ocr.transformers.test_image_table_cells_detector.TestImageTableCellDetector.test_cell_detector_morphops_default_params"]], "test_cell_detector_morphops_params_dict() (testimagetablecelldetector method)": [[92, "sparkocr.tests.ocr.transformers.test_image_table_cells_detector.TestImageTableCellDetector.test_cell_detector_morphops_params_dict"]], "test_cell_detector_morphops_params_str() (testimagetablecelldetector method)": [[92, "sparkocr.tests.ocr.transformers.test_image_table_cells_detector.TestImageTableCellDetector.test_cell_detector_morphops_params_str"]], "testimagetabledetector (class in sparkocr.tests.ocr.transformers.test_image_table_detector)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector"]], "sparkocr.tests.ocr.transformers.test_image_table_detector": [[93, "module-sparkocr.tests.ocr.transformers.test_image_table_detector"]], "test_image_table_detector_apply_correction() (testimagetabledetector method)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector.test_image_table_detector_apply_correction"]], "test_image_table_detector_apply_scaling() (testimagetabledetector method)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector.test_image_table_detector_apply_scaling"]], "test_image_table_detector_load() (testimagetabledetector method)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector.test_image_table_detector_load"]], "test_image_table_detector_loadonnx() (testimagetabledetector method)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector.test_image_table_detector_loadonnx"]], "test_image_table_detector_pretrained() (testimagetabledetector method)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector.test_image_table_detector_pretrained"]], "test_image_table_detector_save() (testimagetabledetector method)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector.test_image_table_detector_save"]], "test_image_table_detector_savepipeline() (testimagetabledetector method)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.TestImageTableDetector.test_image_table_detector_savepipeline"]], "tmpmodelfolder (in module sparkocr.tests.ocr.transformers.test_image_table_detector)": [[93, "sparkocr.tests.ocr.transformers.test_image_table_detector.tmpModelFolder"]], "testimagetextcleaner (class in sparkocr.tests.ocr.transformers.test_image_text_cleaner)": [[94, "sparkocr.tests.ocr.transformers.test_image_text_cleaner.TestImageTextCleaner"]], "sparkocr.tests.ocr.transformers.test_image_text_cleaner": [[94, "module-sparkocr.tests.ocr.transformers.test_image_text_cleaner"]], "test_image_text_detector() (testimagetextcleaner method)": [[94, "sparkocr.tests.ocr.transformers.test_image_text_cleaner.TestImageTextCleaner.test_image_text_detector"]], "tmpmodelfolder (in module sparkocr.tests.ocr.transformers.test_image_text_cleaner)": [[94, "sparkocr.tests.ocr.transformers.test_image_text_cleaner.tmpModelFolder"]], "testimagetodicom (class in sparkocr.tests.ocr.transformers.test_image_to_dicom)": [[95, "sparkocr.tests.ocr.transformers.test_image_to_dicom.TestImageToDicom"]], "get_pipeline() (testimagetodicom method)": [[95, "sparkocr.tests.ocr.transformers.test_image_to_dicom.TestImageToDicom.get_pipeline"]], "sparkocr.tests.ocr.transformers.test_image_to_dicom": [[95, "module-sparkocr.tests.ocr.transformers.test_image_to_dicom"]], "test_metadata_image_to_dicom() (testimagetodicom method)": [[95, "sparkocr.tests.ocr.transformers.test_image_to_dicom.TestImageToDicom.test_metadata_image_to_dicom"]], "testimagetohocr (class in sparkocr.tests.ocr.transformers.test_image_to_hocr)": [[96, "sparkocr.tests.ocr.transformers.test_image_to_hocr.TestImageToHocr"]], "sparkocr.tests.ocr.transformers.test_image_to_hocr": [[96, "module-sparkocr.tests.ocr.transformers.test_image_to_hocr"]], "test_image_to_text() (testimagetohocr method)": [[96, "sparkocr.tests.ocr.transformers.test_image_to_hocr.TestImageToHocr.test_image_to_text"]], "testimagetopdf (class in sparkocr.tests.ocr.transformers.test_image_to_pdf)": [[97, "sparkocr.tests.ocr.transformers.test_image_to_pdf.TestImageToPdf"]], "sparkocr.tests.ocr.transformers.test_image_to_pdf": [[97, "module-sparkocr.tests.ocr.transformers.test_image_to_pdf"]], "test_with_split_by_page() (testimagetopdf method)": [[97, "sparkocr.tests.ocr.transformers.test_image_to_pdf.TestImageToPdf.test_with_split_by_page"]], "testimagetotext (class in sparkocr.tests.ocr.transformers.test_image_to_text)": [[98, "sparkocr.tests.ocr.transformers.test_image_to_text.TestImageToText"]], "sparkocr.tests.ocr.transformers.test_image_to_text": [[98, "module-sparkocr.tests.ocr.transformers.test_image_to_text"]], "test_image_to_text() (testimagetotext method)": [[98, "sparkocr.tests.ocr.transformers.test_image_to_text.TestImageToText.test_image_to_text"]], "test_image_to_text_keep_layout() (testimagetotext method)": [[98, "sparkocr.tests.ocr.transformers.test_image_to_text.TestImageToText.test_image_to_text_keep_layout"]], "test_image_to_text_kor() (testimagetotext method)": [[98, "sparkocr.tests.ocr.transformers.test_image_to_text.TestImageToText.test_image_to_text_kor"]], "testimageoperation (class in sparkocr.tests.ocr.transformers.test_image_transformer)": [[99, "sparkocr.tests.ocr.transformers.test_image_transformer.TestImageOperation"]], "sparkocr.tests.ocr.transformers.test_image_transformer": [[99, "module-sparkocr.tests.ocr.transformers.test_image_transformer"]], "test_image_transform() (testimageoperation method)": [[99, "sparkocr.tests.ocr.transformers.test_image_transformer.TestImageOperation.test_image_transform"]], "testneroutputcleaner (class in sparkocr.tests.ocr.transformers.test_ner_output_cleaner)": [[100, "sparkocr.tests.ocr.transformers.test_ner_output_cleaner.TestNerOutputCleaner"]], "sparkocr.tests.ocr.transformers.test_ner_output_cleaner": [[100, "module-sparkocr.tests.ocr.transformers.test_ner_output_cleaner"]], "test_stage_serializes() (testneroutputcleaner method)": [[100, "sparkocr.tests.ocr.transformers.test_ner_output_cleaner.TestNerOutputCleaner.test_stage_serializes"]], "levenshtein_distance_threshold (testocrresourcedownloader attribute)": [[101, "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader.TestOcrResourceDownloader.LEVENSHTEIN_DISTANCE_THRESHOLD"]], "testocrresourcedownloader (class in sparkocr.tests.ocr.transformers.test_ocr_resource_downloader)": [[101, "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader.TestOcrResourceDownloader"]], "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader": [[101, "module-sparkocr.tests.ocr.transformers.test_ocr_resource_downloader"]], "test_download_model() (testocrresourcedownloader method)": [[101, "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader.TestOcrResourceDownloader.test_download_model"]], "test_handling_non_existent_model() (testocrresourcedownloader method)": [[101, "sparkocr.tests.ocr.transformers.test_ocr_resource_downloader.TestOcrResourceDownloader.test_handling_non_existent_model"]], "testpdfassembler (class in sparkocr.tests.ocr.transformers.test_pdf_assembler)": [[102, "sparkocr.tests.ocr.transformers.test_pdf_assembler.TestPdfAssembler"]], "get_pipeline() (testpdfassembler method)": [[102, "sparkocr.tests.ocr.transformers.test_pdf_assembler.TestPdfAssembler.get_pipeline"]], "sparkocr.tests.ocr.transformers.test_pdf_assembler": [[102, "module-sparkocr.tests.ocr.transformers.test_pdf_assembler"]], "test_pdf_assembler() (testpdfassembler method)": [[102, "sparkocr.tests.ocr.transformers.test_pdf_assembler.TestPdfAssembler.test_pdf_assembler"]], "testpdfdrawregions (class in sparkocr.tests.ocr.transformers.test_pdf_draw_regions)": [[103, "sparkocr.tests.ocr.transformers.test_pdf_draw_regions.TestPdfDrawRegions"]], "get_pipeline() (testpdfdrawregions method)": [[103, "sparkocr.tests.ocr.transformers.test_pdf_draw_regions.TestPdfDrawRegions.get_pipeline"]], "sparkocr.tests.ocr.transformers.test_pdf_draw_regions": [[103, "module-sparkocr.tests.ocr.transformers.test_pdf_draw_regions"]], "test_draw_regions() (testpdfdrawregions method)": [[103, "sparkocr.tests.ocr.transformers.test_pdf_draw_regions.TestPdfDrawRegions.test_draw_regions"]], "testpdftoform (class in sparkocr.tests.ocr.transformers.test_pdf_to_form)": [[104, "sparkocr.tests.ocr.transformers.test_pdf_to_form.TestPdfToForm"]], "sparkocr.tests.ocr.transformers.test_pdf_to_form": [[104, "module-sparkocr.tests.ocr.transformers.test_pdf_to_form"]], "test_extract_acro_form() (testpdftoform method)": [[104, "sparkocr.tests.ocr.transformers.test_pdf_to_form.TestPdfToForm.test_extract_acro_form"]], "testpdftohocr (class in sparkocr.tests.ocr.transformers.test_pdf_to_hocr)": [[105, "sparkocr.tests.ocr.transformers.test_pdf_to_hocr.TestPdfToHocr"]], "sparkocr.tests.ocr.transformers.test_pdf_to_hocr": [[105, "module-sparkocr.tests.ocr.transformers.test_pdf_to_hocr"]], "test_pdf_to_hocr() (testpdftohocr method)": [[105, "sparkocr.tests.ocr.transformers.test_pdf_to_hocr.TestPdfToHocr.test_pdf_to_hocr"]], "test_pdf_to_hocr_nonascii() (testpdftohocr method)": [[105, "sparkocr.tests.ocr.transformers.test_pdf_to_hocr.TestPdfToHocr.test_pdf_to_hocr_nonascii"]], "test_pdf_to_hocr_nonascii_keepencoding() (testpdftohocr method)": [[105, "sparkocr.tests.ocr.transformers.test_pdf_to_hocr.TestPdfToHocr.test_pdf_to_hocr_nonascii_keepencoding"]], "testpdftoimage (class in sparkocr.tests.ocr.transformers.test_pdf_to_image)": [[106, "sparkocr.tests.ocr.transformers.test_pdf_to_image.TestPdfToImage"]], "sparkocr.tests.ocr.transformers.test_pdf_to_image": [[106, "module-sparkocr.tests.ocr.transformers.test_pdf_to_image"]], "test_split_by_page() (testpdftoimage method)": [[106, "sparkocr.tests.ocr.transformers.test_pdf_to_image.TestPdfToImage.test_split_by_page"], [107, "sparkocr.tests.ocr.transformers.test_pdf_to_text.TestPdfToImage.test_split_by_page"]], "test_without_split_by_page() (testpdftoimage method)": [[106, "sparkocr.tests.ocr.transformers.test_pdf_to_image.TestPdfToImage.test_without_split_by_page"], [107, "sparkocr.tests.ocr.transformers.test_pdf_to_text.TestPdfToImage.test_without_split_by_page"]], "testpdftoimage (class in sparkocr.tests.ocr.transformers.test_pdf_to_text)": [[107, "sparkocr.tests.ocr.transformers.test_pdf_to_text.TestPdfToImage"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text": [[107, "module-sparkocr.tests.ocr.transformers.test_pdf_to_text"]], "test_pipeline_serialization() (testpdftoimage method)": [[107, "sparkocr.tests.ocr.transformers.test_pdf_to_text.TestPdfToImage.test_pipeline_serialization"]], "testpdftotexttable (class in sparkocr.tests.ocr.transformers.test_pdf_to_text_table)": [[108, "sparkocr.tests.ocr.transformers.test_pdf_to_text_table.TestPdfToTextTable"]], "sparkocr.tests.ocr.transformers.test_pdf_to_text_table": [[108, "module-sparkocr.tests.ocr.transformers.test_pdf_to_text_table"]], "test_should_save_and_load() (testpdftotexttable method)": [[108, "sparkocr.tests.ocr.transformers.test_pdf_to_text_table.TestPdfToTextTable.test_should_save_and_load"]], "test_split_by_page() (testpdftotexttable method)": [[108, "sparkocr.tests.ocr.transformers.test_pdf_to_text_table.TestPdfToTextTable.test_split_by_page"]], "testpositionfinder (class in sparkocr.tests.ocr.transformers.test_position_finder)": [[109, "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder"]], "entityschema (testpositionfinder attribute)": [[109, "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder.entitySchema"]], "get_pipeline() (testpositionfinder method)": [[109, "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder.get_pipeline"]], "postionschema (testpositionfinder attribute)": [[109, "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder.postionSchema"]], "sparkocr.tests.ocr.transformers.test_position_finder": [[109, "module-sparkocr.tests.ocr.transformers.test_position_finder"]], "test_position_finder_serializes_well() (testpositionfinder method)": [[109, "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder.test_position_finder_serializes_well"]], "test_position_finder_throws_exceptions() (testpositionfinder method)": [[109, "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder.test_position_finder_throws_exceptions"]], "test_without_split_by_page() (testpositionfinder method)": [[109, "sparkocr.tests.ocr.transformers.test_position_finder.TestPositionFinder.test_without_split_by_page"]], "testppttopdf (class in sparkocr.tests.ocr.transformers.test_ppt_to_pdf)": [[110, "sparkocr.tests.ocr.transformers.test_ppt_to_pdf.TestPptToPdf"]], "sparkocr.tests.ocr.transformers.test_ppt_to_pdf": [[110, "module-sparkocr.tests.ocr.transformers.test_ppt_to_pdf"]], "test_ppt_without_split_by_page() (testppttopdf method)": [[110, "sparkocr.tests.ocr.transformers.test_ppt_to_pdf.TestPptToPdf.test_ppt_without_split_by_page"]], "test_pptx_without_split_by_page() (testppttopdf method)": [[110, "sparkocr.tests.ocr.transformers.test_ppt_to_pdf.TestPptToPdf.test_pptx_without_split_by_page"]], "testppttotexttable (class in sparkocr.tests.ocr.transformers.test_ppt_to_text_table)": [[111, "sparkocr.tests.ocr.transformers.test_ppt_to_text_table.TestPptToTextTable"]], "sparkocr.tests.ocr.transformers.test_ppt_to_text_table": [[111, "module-sparkocr.tests.ocr.transformers.test_ppt_to_text_table"]], "test_ppt_without_split_by_page() (testppttotexttable method)": [[111, "sparkocr.tests.ocr.transformers.test_ppt_to_text_table.TestPptToTextTable.test_ppt_without_split_by_page"]], "test_pptx_without_split_by_page() (testppttotexttable method)": [[111, "sparkocr.tests.ocr.transformers.test_ppt_to_text_table.TestPptToTextTable.test_pptx_without_split_by_page"]], "test_should_save_and_load() (testppttotexttable method)": [[111, "sparkocr.tests.ocr.transformers.test_ppt_to_text_table.TestPptToTextTable.test_should_save_and_load"]], "testtexttopdf (class in sparkocr.tests.ocr.transformers.test_text_to_pdf)": [[112, "sparkocr.tests.ocr.transformers.test_text_to_pdf.TestTextToPdf"]], "get_pipeline() (testtexttopdf method)": [[112, "sparkocr.tests.ocr.transformers.test_text_to_pdf.TestTextToPdf.get_pipeline"]], "sparkocr.tests.ocr.transformers.test_text_to_pdf": [[112, "module-sparkocr.tests.ocr.transformers.test_text_to_pdf"]], "test_render_to_pdf() (testtexttopdf method)": [[112, "sparkocr.tests.ocr.transformers.test_text_to_pdf.TestTextToPdf.test_render_to_pdf"]], "testupdatetextposition (class in sparkocr.tests.ocr.transformers.test_update_text_position)": [[113, "sparkocr.tests.ocr.transformers.test_update_text_position.TestUpdateTextPosition"]], "get_pipeline() (testupdatetextposition method)": [[113, "sparkocr.tests.ocr.transformers.test_update_text_position.TestUpdateTextPosition.get_pipeline"]], "sparkocr.tests.ocr.transformers.test_update_text_position": [[113, "module-sparkocr.tests.ocr.transformers.test_update_text_position"]], "test_update_position_render_to_pdf() (testupdatetextposition method)": [[113, "sparkocr.tests.ocr.transformers.test_update_text_position.TestUpdateTextPosition.test_update_position_render_to_pdf"]], "testvisualdocumentclassifier (class in sparkocr.tests.ocr.transformers.test_visual_document_classifier)": [[114, "sparkocr.tests.ocr.transformers.test_visual_document_classifier.TestVisualDocumentClassifier"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier": [[114, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier"]], "test_classify_document() (testvisualdocumentclassifier method)": [[114, "sparkocr.tests.ocr.transformers.test_visual_document_classifier.TestVisualDocumentClassifier.test_classify_document"]], "delimiter (in module sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt)": [[115, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.DELIMITER"]], "testvisualdocumentclassifierlilt (class in sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt)": [[115, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.TestVisualDocumentClassifierLilt"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt": [[115, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt"]], "test_preprocessing() (testvisualdocumentclassifierlilt method)": [[115, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.TestVisualDocumentClassifierLilt.test_preprocessing"]], "test_pretrained() (testvisualdocumentclassifierlilt method)": [[115, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.TestVisualDocumentClassifierLilt.test_pretrained"]], "tmp_dataset_dir (in module sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt)": [[115, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.tmp_dataset_dir"]], "vocab (in module sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt)": [[115, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.vocab"]], "vocab_file (in module sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt)": [[115, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_lilt.vocab_file"]], "testvisualdocumentclassifierv3 (class in sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3)": [[116, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3.TestVisualDocumentClassifierV3"]], "sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3": [[116, "module-sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3"]], "test_pretrained() (testvisualdocumentclassifierv3 method)": [[116, "sparkocr.tests.ocr.transformers.test_visual_document_classifier_v3.TestVisualDocumentClassifierV3.test_pretrained"]], "testvisualdocumentprocessor (class in sparkocr.tests.ocr.transformers.test_visual_document_processor)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor"]], "sparkocr.tests.ocr.transformers.test_visual_document_processor": [[117, "module-sparkocr.tests.ocr.transformers.test_visual_document_processor"]], "test_visual_document_processor() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor"]], "test_visual_document_processor_docx() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_docx"]], "test_visual_document_processor_freetextonly() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_freeTextOnly"]], "test_visual_document_processor_html() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_html"]], "test_visual_document_processor_json() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_json"]], "test_visual_document_processor_notformattedtext() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_notformattedtext"]], "test_visual_document_processor_pdf() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_pdf"]], "test_visual_document_processor_pptx() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_pptx"]], "test_visual_document_processor_table() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_table"]], "test_visual_document_processor_tablecvs() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_tablecvs"]], "test_visual_document_processor_userapidocr() (testvisualdocumentprocessor method)": [[117, "sparkocr.tests.ocr.transformers.test_visual_document_processor.TestVisualDocumentProcessor.test_visual_document_processor_userapidocr"]], "testvisualquestionanswering (class in sparkocr.tests.ocr.transformers.test_visual_question_answering)": [[118, "sparkocr.tests.ocr.transformers.test_visual_question_answering.TestVisualQuestionAnswering"]], "cachedir (in module sparkocr.tests.ocr.transformers.test_visual_question_answering)": [[118, "sparkocr.tests.ocr.transformers.test_visual_question_answering.cachedir"]], "sparkocr.tests.ocr.transformers.test_visual_question_answering": [[118, "module-sparkocr.tests.ocr.transformers.test_visual_question_answering"]], "test_question_answering_donut() (testvisualquestionanswering method)": [[118, "sparkocr.tests.ocr.transformers.test_visual_question_answering.TestVisualQuestionAnswering.test_question_answering_donut"]], "test_question_answering_donut_loadable() (testvisualquestionanswering method)": [[118, "sparkocr.tests.ocr.transformers.test_visual_question_answering.TestVisualQuestionAnswering.test_question_answering_donut_loadable"]], "test_question_answering_pix2struct() (testvisualquestionanswering method)": [[118, "sparkocr.tests.ocr.transformers.test_visual_question_answering.TestVisualQuestionAnswering.test_question_answering_pix2struct"]], "test_question_answering_pix2struct_from_pieces() (testvisualquestionanswering method)": [[118, "sparkocr.tests.ocr.transformers.test_visual_question_answering.TestVisualQuestionAnswering.test_question_answering_pix2struct_from_pieces"]], "test_question_answering_pix2struct_loadable() (testvisualquestionanswering method)": [[118, "sparkocr.tests.ocr.transformers.test_visual_question_answering.TestVisualQuestionAnswering.test_question_answering_pix2struct_loadable"]], "sparkocr.tests.ocr.transformers.tokenizer": [[119, "module-sparkocr.tests.ocr.transformers.tokenizer"]], "testhocrtokenizer (class in sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer)": [[120, "sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer.TestHocrTokenizer"]], "get_pipeline() (testhocrtokenizer method)": [[120, "sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer.TestHocrTokenizer.get_pipeline"]], "sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer": [[120, "module-sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer"]], "test_hoct_tokenizzer() (testhocrtokenizer method)": [[120, "sparkocr.tests.ocr.transformers.tokenizer.test_hocr_tokenizer.TestHocrTokenizer.test_hoct_tokenizzer"]], "intersection_over_union() (in module sparkocr.tests.ocr.utils)": [[121, "sparkocr.tests.ocr.utils.intersection_over_union"]], "matchcoordinates() (in module sparkocr.tests.ocr.utils)": [[121, "sparkocr.tests.ocr.utils.matchCoordinates"]], "sparkocr.tests.ocr.utils": [[121, "module-sparkocr.tests.ocr.utils"]], "formrelationextractor (class in sparkocr.transformers.annotators.form_relation_extractor)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor"]], "clear() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.clear"]], "copy() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.copy"]], "explainparam() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.explainParam"]], "explainparams() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.explainParams"]], "extractparammap() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.extractParamMap"]], "getinputcol() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.getInputCol"]], "getordefault() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.getOrDefault"]], "getoutputcol() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.getOutputCol"]], "getparam() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.getParam"]], "hasdefault() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.hasDefault"]], "hasparam() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.hasParam"]], "inputcol (formrelationextractor attribute)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.inputCol"]], "isdefined() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.isDefined"]], "isset() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.isSet"]], "keypattern (formrelationextractor attribute)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.keyPattern"]], "linetolerance (formrelationextractor attribute)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.lineTolerance"]], "name (formrelationextractor attribute)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.name"]], "outputcol (formrelationextractor attribute)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.outputCol"]], "set() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.set"]], "setinputcol() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.setInputCol"]], "setkeypattern() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.setKeyPattern"]], "setlinetolerance() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.setLineTolerance"]], "setoutputcol() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.setOutputCol"]], "setvaluepattern() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.setValuePattern"]], "sparkocr.transformers.annotators.form_relation_extractor": [[122, "module-sparkocr.transformers.annotators.form_relation_extractor"]], "transform() (formrelationextractor method)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.transform"]], "uid (formrelationextractor attribute)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.uid"]], "valuepattern (formrelationextractor attribute)": [[122, "sparkocr.transformers.annotators.form_relation_extractor.FormRelationExtractor.valuePattern"]], "georelationextractor (class in sparkocr.transformers.annotators.geo_relation_extractor)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor"]], "clear() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.clear"]], "copy() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.copy"]], "explainparam() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.explainParam"]], "explainparams() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.explainParams"]], "extractparammap() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.extractParamMap"]], "getinputcols() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.getInputCols"]], "getordefault() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.getOrDefault"]], "getoutputcol() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.getOutputCol"]], "getparam() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.getParam"]], "hasdefault() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.hasDefault"]], "hasparam() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.hasParam"]], "inputcols (georelationextractor attribute)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.inputCols"]], "isdefined() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.isDefined"]], "isset() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.isSet"]], "labels (georelationextractor attribute)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.labels"]], "load() (georelationextractor static method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.load"]], "loadonnxmodel() (georelationextractor static method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.loadOnnxModel"]], "name (georelationextractor attribute)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.name"]], "outputcol (georelationextractor attribute)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.outputCol"]], "outputformat (georelationextractor attribute)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.outputFormat"]], "pretrained() (georelationextractor static method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.pretrained"]], "read() (georelationextractor class method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.read"]], "save() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.save"]], "savemodel() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.saveModel"]], "set() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.set"]], "setinputcols() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.setInputCols"]], "setlabels() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.setLabels"]], "setmaxsentencelength() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.setMaxSentenceLength"]], "setoutputcol() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.setOutputCol"]], "setoutputformat() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.setOutputFormat"]], "sparkocr.transformers.annotators.geo_relation_extractor": [[123, "module-sparkocr.transformers.annotators.geo_relation_extractor"]], "transform() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.transform"]], "uid (georelationextractor attribute)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.uid"]], "write() (georelationextractor method)": [[123, "sparkocr.transformers.annotators.geo_relation_extractor.GeoRelationExtractor.write"]], "sparkocr.transformers.annotators": [[124, "module-sparkocr.transformers.annotators"]], "base64tobinary (class in sparkocr.transformers.base64_to_binary)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary"]], "clear() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.clear"]], "copy() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.copy"]], "explainparam() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.explainParam"]], "explainparams() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.explainParams"]], "extractparammap() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.extractParamMap"]], "filenamecol (base64tobinary attribute)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.fileNameCol"]], "getinputcol() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.getInputCol"]], "getordefault() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.getOrDefault"]], "getoutputcol() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.getOutputCol"]], "getparam() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.getParam"]], "hasdefault() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.hasDefault"]], "hasparam() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.hasParam"]], "inputcol (base64tobinary attribute)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.inputCol"]], "isdefined() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.isDefined"]], "isset() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.isSet"]], "keepinput (base64tobinary attribute)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.keepInput"]], "load() (base64tobinary class method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.load"]], "outputcol (base64tobinary attribute)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.outputCol"]], "read() (base64tobinary class method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.read"]], "save() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.save"]], "set() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.set"]], "setfilenamecol() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.setFileNameCol"]], "setinputcol() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.setInputCol"]], "setkeepinput() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.setKeepInput"]], "setoutputcol() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.setOutputCol"]], "settruncateinput() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.setTruncateInput"]], "sparkocr.transformers.base64_to_binary": [[125, "module-sparkocr.transformers.base64_to_binary"]], "transform() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.transform"]], "truncateinput (base64tobinary attribute)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.truncateInput"]], "uid (base64tobinary attribute)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.uid"]], "write() (base64tobinary method)": [[125, "sparkocr.transformers.base64_to_binary.Base64ToBinary.write"]], "base64toimage (class in sparkocr.transformers.base64_to_image)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage"]], "clear() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.clear"]], "copy() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.copy"]], "explainparam() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.explainParam"]], "explainparams() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.explainParams"]], "extractparammap() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.extractParamMap"]], "getinputcol() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.getInputCol"]], "getordefault() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.getOrDefault"]], "getoutputcol() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.getOutputCol"]], "getparam() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.getParam"]], "hasdefault() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.hasDefault"]], "hasparam() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.hasParam"]], "imagetype (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.imageType"]], "inputcol (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.inputCol"]], "isdefined() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.isDefined"]], "isset() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.isSet"]], "keepinput (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.keepInput"]], "load() (base64toimage class method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.load"]], "origincol (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.originCol"]], "outputcol (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.outputCol"]], "pagenumcol (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.pageNumCol"]], "read() (base64toimage class method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.read"]], "save() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.save"]], "set() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.set"]], "setimagetype() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.setImageType"]], "setinputcol() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.setInputCol"]], "setkeepinput() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.setKeepInput"]], "setorigincol() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.setOriginCol"]], "setoutputcol() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.setOutputCol"]], "setpagenumcol() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.setPageNumCol"]], "settruncateinput() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.setTruncateInput"]], "sparkocr.transformers.base64_to_image": [[126, "module-sparkocr.transformers.base64_to_image"]], "transform() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.transform"]], "truncateinput (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.truncateInput"]], "uid (base64toimage attribute)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.uid"]], "write() (base64toimage method)": [[126, "sparkocr.transformers.base64_to_image.Base64ToImage.write"]], "binarytoimage (class in sparkocr.transformers.binary_to_image)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage"]], "clear() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.clear"]], "copy() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.copy"]], "explainparam() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.explainParam"]], "explainparams() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.explainParams"]], "extractparammap() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.extractParamMap"]], "getinputcol() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.getInputCol"]], "getordefault() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.getOrDefault"]], "getoutputcol() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.getOutputCol"]], "getparam() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.getParam"]], "hasdefault() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.hasDefault"]], "hasparam() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.hasParam"]], "imagetype (binarytoimage attribute)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.imageType"]], "inputcol (binarytoimage attribute)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.inputCol"]], "isdefined() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.isDefined"]], "isset() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.isSet"]], "keepinput (binarytoimage attribute)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.keepInput"]], "load() (binarytoimage class method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.load"]], "origincol (binarytoimage attribute)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.originCol"]], "outputcol (binarytoimage attribute)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.outputCol"]], "pagenumcol (binarytoimage attribute)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.pageNumCol"]], "read() (binarytoimage class method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.read"]], "save() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.save"]], "set() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.set"]], "setimagetype() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.setImageType"]], "setinputcol() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.setInputCol"]], "setkeepinput() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.setKeepInput"]], "setorigincol() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.setOriginCol"]], "setoutputcol() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.setOutputCol"]], "setpagenumcol() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.setPageNumCol"]], "sparkocr.transformers.binary_to_image": [[127, "module-sparkocr.transformers.binary_to_image"]], "transform() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.transform"]], "uid (binarytoimage attribute)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.uid"]], "write() (binarytoimage method)": [[127, "sparkocr.transformers.binary_to_image.BinaryToImage.write"]], "charttotexttable (class in sparkocr.transformers.chart_to_text_table)": [[128, "sparkocr.transformers.chart_to_text_table.ChartToTextTable"]], "load() (charttotexttable static method)": [[128, "sparkocr.transformers.chart_to_text_table.ChartToTextTable.load"]], "pretrained() (charttotexttable static method)": [[128, "sparkocr.transformers.chart_to_text_table.ChartToTextTable.pretrained"]], "sparkocr.transformers.chart_to_text_table": [[128, "module-sparkocr.transformers.chart_to_text_table"]], "datasetreader (class in sparkocr.transformers.dataset_reader)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader"]], "clear() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.clear"]], "copy() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.copy"]], "explainparam() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.explainParam"]], "explainparams() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.explainParams"]], "extractparammap() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.extractParamMap"]], "getordefault() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.getOrDefault"]], "getparam() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.getParam"]], "hasdefault() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.hasDefault"]], "hasparam() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.hasParam"]], "isdefined() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.isDefined"]], "isset() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.isSet"]], "name (datasetreader attribute)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.name"]], "readdataset() (datasetreader static method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.readDataset"]], "readpreprocesseddataset() (datasetreader static method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.readPreprocessedDataset"]], "set() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.set"]], "sparkocr.transformers.dataset_reader": [[129, "module-sparkocr.transformers.dataset_reader"]], "transform() (datasetreader method)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.transform"]], "uid (datasetreader attribute)": [[129, "sparkocr.transformers.dataset_reader.DatasetReader.uid"]], "documentlayoutanalyzer (class in sparkocr.transformers.detectors.document_layout_analyzer)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer"]], "clear() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.clear"]], "copy() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.copy"]], "explainparam() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.explainParam"]], "explainparams() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.explainParams"]], "extractparammap() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.extractParamMap"]], "getinputcol() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.getInputCol"]], "getordefault() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.getOrDefault"]], "getoutputcol() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.getOutputCol"]], "getparam() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.getParam"]], "hasdefault() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.hasDefault"]], "hasparam() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.hasParam"]], "inputcol (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.inputCol"]], "isdefined() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.isDefined"]], "isset() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.isSet"]], "labels (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.labels"]], "load() (documentlayoutanalyzer static method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.load"]], "loadonnxmodel() (documentlayoutanalyzer static method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.loadONNXModel"]], "mergeintersects (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.mergeIntersects"]], "name (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.name"]], "nmsthreshold (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.nmsThreshold"]], "outputcol (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.outputCol"]], "outputlabels (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.outputLabels"]], "pretrained() (documentlayoutanalyzer static method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.pretrained"]], "read() (documentlayoutanalyzer class method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.read"]], "save() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.save"]], "scalefactor (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.scaleFactor"]], "scorethreshold (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.scoreThreshold"]], "set() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.set"]], "setinputcol() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setInputCol"]], "setlabels() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setLabels"]], "setmergeintersects() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setMergeIntersects"]], "setnmsthreshold() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setNmsThreshold"]], "setoutputcol() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setOutputCol"]], "setoutputlabels() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setOutputLabels"]], "setscalefactor() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setScaleFactor"]], "setscorethreshold() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.setScoreThreshold"]], "sparkocr.transformers.detectors.document_layout_analyzer": [[130, "module-sparkocr.transformers.detectors.document_layout_analyzer"]], "transform() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.transform"]], "uid (documentlayoutanalyzer attribute)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.uid"]], "write() (documentlayoutanalyzer method)": [[130, "sparkocr.transformers.detectors.document_layout_analyzer.DocumentLayoutAnalyzer.write"]], "imagecheckboxdetector (class in sparkocr.transformers.detectors.image_checkbox_detector)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector"]], "clear() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.clear"]], "copy() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.copy"]], "explainparam() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.explainParam"]], "explainparams() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.explainParams"]], "extractparammap() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.extractParamMap"]], "getinputcol() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.getInputCol"]], "getordefault() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.getOrDefault"]], "getoutputcol() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.getOutputCol"]], "getparam() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.getParam"]], "hasdefault() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.hasDefault"]], "hasparam() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.hasParam"]], "inputcol (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.inputCol"]], "isdefined() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.isDefined"]], "isset() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.isSet"]], "labels (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.labels"]], "load() (imagecheckboxdetector static method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.load"]], "loadonnxmodel() (imagecheckboxdetector static method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.loadONNXModel"]], "margin (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.margin"]], "name (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.name"]], "outputcol (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.outputCol"]], "outputformat (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.outputFormat"]], "outputlabels (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.outputLabels"]], "pretrained() (imagecheckboxdetector static method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.pretrained"]], "read() (imagecheckboxdetector class method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.read"]], "save() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.save"]], "savemodel() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.saveModel"]], "scorethreshold (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.scoreThreshold"]], "set() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.set"]], "setinputcol() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.setInputCol"]], "setlabels() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.setLabels"]], "setmargin() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.setMargin"]], "setoutputcol() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.setOutputCol"]], "setoutputformat() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.setOutputFormat"]], "setoutputlabels() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.setOutputLabels"]], "setscorethreshold() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.setScoreThreshold"]], "sparkocr.transformers.detectors.image_checkbox_detector": [[131, "module-sparkocr.transformers.detectors.image_checkbox_detector"]], "transform() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.transform"]], "uid (imagecheckboxdetector attribute)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.uid"]], "write() (imagecheckboxdetector method)": [[131, "sparkocr.transformers.detectors.image_checkbox_detector.ImageCheckBoxDetector.write"]], "imagedocumentregiondetector (class in sparkocr.transformers.detectors.image_document_region_detector)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector"]], "applycorrection (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.applyCorrection"]], "clear() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.clear"]], "copy() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.copy"]], "explainparam() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.explainParam"]], "explainparams() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.explainParams"]], "extractparammap() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.extractParamMap"]], "getinputcol() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.getInputCol"]], "getordefault() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.getOrDefault"]], "getoutputcol() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.getOutputCol"]], "getparam() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.getParam"]], "hasdefault() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.hasDefault"]], "hasparam() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.hasParam"]], "inputcol (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.inputCol"]], "isdefined() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.isDefined"]], "isset() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.isSet"]], "labels (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.labels"]], "load() (imagedocumentregiondetector static method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.load"]], "loadonnxmodel() (imagedocumentregiondetector static method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.loadONNXModel"]], "name (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.name"]], "outputcol (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.outputCol"]], "outputlabels (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.outputLabels"]], "pretrained() (imagedocumentregiondetector static method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.pretrained"]], "read() (imagedocumentregiondetector class method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.read"]], "save() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.save"]], "savemodel() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.saveModel"]], "scaleheighttocol (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.scaleHeightToCol"]], "scalewidthtocol (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.scaleWidthToCol"]], "scorethreshold (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.scoreThreshold"]], "set() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.set"]], "setapplycorrection() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setApplyCorrection"]], "setinputcol() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setInputCol"]], "setlabels() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setLabels"]], "setoutputcol() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setOutputCol"]], "setoutputlabels() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setOutputLabels"]], "setscaleheighttocol() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setScaleHeightToCol"]], "setscalewidthtocol() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setScaleWidthToCol"]], "setscorethreshold() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.setScoreThreshold"]], "sparkocr.transformers.detectors.image_document_region_detector": [[132, "module-sparkocr.transformers.detectors.image_document_region_detector"]], "transform() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.transform"]], "uid (imagedocumentregiondetector attribute)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.uid"]], "write() (imagedocumentregiondetector method)": [[132, "sparkocr.transformers.detectors.image_document_region_detector.ImageDocumentRegionDetector.write"]], "imagetextdetector (class in sparkocr.transformers.detectors.image_text_detector)": [[133, "sparkocr.transformers.detectors.image_text_detector.ImageTextDetector"]], "pretrained() (imagetextdetector static method)": [[133, "sparkocr.transformers.detectors.image_text_detector.ImageTextDetector.pretrained"]], "sparkocr.transformers.detectors.image_text_detector": [[133, "module-sparkocr.transformers.detectors.image_text_detector"]], "imagetextdetectorcraft (class in sparkocr.transformers.detectors.image_text_detector_craft)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft"]], "clear() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.clear"]], "copy() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.copy"]], "explainparam() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.explainParam"]], "explainparams() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.explainParams"]], "extractparammap() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.extractParamMap"]], "getinputcol() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.getInputCol"]], "getordefault() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.getOrDefault"]], "getoutputcol() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.getOutputCol"]], "getparam() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.getParam"]], "hasdefault() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.hasDefault"]], "hasparam() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.hasParam"]], "height (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.height"]], "inputcol (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.inputCol"]], "isdefined() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.isDefined"]], "isset() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.isSet"]], "linkthreshold (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.linkThreshold"]], "load() (imagetextdetectorcraft static method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.load"]], "loadonnxmodel() (imagetextdetectorcraft static method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.loadONNXModel"]], "name (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.name"]], "outputcol (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.outputCol"]], "pretrained() (imagetextdetectorcraft static method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.pretrained"]], "read() (imagetextdetectorcraft class method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.read"]], "save() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.save"]], "savemodel() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.saveModel"]], "scorethreshold (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.scoreThreshold"]], "set() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.set"]], "setheight() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setHeight"]], "setinputcol() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setInputCol"]], "setlinkthreshold() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setLinkThreshold"]], "setoutputcol() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setOutputCol"]], "setscorethreshold() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setScoreThreshold"]], "setsizethreshold() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setSizeThreshold"]], "settextthreshold() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setTextThreshold"]], "setusegpu() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setUseGPU"]], "setuseinputimagedims() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setUseInputImageDims"]], "setwidth() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setWidth"]], "setwithrefiner() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.setWithRefiner"]], "sizethreshold (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.sizeThreshold"]], "sparkocr.transformers.detectors.image_text_detector_craft": [[134, "module-sparkocr.transformers.detectors.image_text_detector_craft"]], "textthreshold (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.textThreshold"]], "transform() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.transform"]], "uid (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.uid"]], "usegpu (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.useGPU"]], "width (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.width"]], "withrefiner (imagetextdetectorcraft attribute)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.withRefiner"]], "write() (imagetextdetectorcraft method)": [[134, "sparkocr.transformers.detectors.image_text_detector_craft.ImageTextDetectorCraft.write"]], "imagetextdetectordit (class in sparkocr.transformers.detectors.image_text_detector_dit)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit"]], "clear() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.clear"]], "copy() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.copy"]], "explainparam() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.explainParam"]], "explainparams() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.explainParams"]], "extractparammap() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.extractParamMap"]], "getinputcol() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.getInputCol"]], "getordefault() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.getOrDefault"]], "getoutputcol() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.getOutputCol"]], "getparam() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.getParam"]], "hasdefault() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.hasDefault"]], "hasparam() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.hasParam"]], "inputcol (imagetextdetectordit attribute)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.inputCol"]], "isdefined() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.isDefined"]], "isset() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.isSet"]], "load() (imagetextdetectordit static method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.load"]], "loadonnxmodel() (imagetextdetectordit static method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.loadONNXModel"]], "name (imagetextdetectordit attribute)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.name"]], "outputcol (imagetextdetectordit attribute)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.outputCol"]], "pretrained() (imagetextdetectordit static method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.pretrained"]], "read() (imagetextdetectordit class method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.read"]], "save() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.save"]], "scalefactor (imagetextdetectordit attribute)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.scaleFactor"]], "scorethreshold (imagetextdetectordit attribute)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.scoreThreshold"]], "set() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.set"]], "setinputcol() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.setInputCol"]], "setoutputcol() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.setOutputCol"]], "setscalefactor() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.setScaleFactor"]], "setscorethreshold() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.setScoreThreshold"]], "sparkocr.transformers.detectors.image_text_detector_dit": [[135, "module-sparkocr.transformers.detectors.image_text_detector_dit"]], "transform() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.transform"]], "uid (imagetextdetectordit attribute)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.uid"]], "write() (imagetextdetectordit method)": [[135, "sparkocr.transformers.detectors.image_text_detector_dit.ImageTextDetectorDit.write"]], "imagetextdetectorv2 (class in sparkocr.transformers.detectors.image_text_detector_v2)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2"]], "imagetextdetectorv2writer (class in sparkocr.transformers.detectors.image_text_detector_v2)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer"]], "clear() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.clear"]], "copy() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.copy"]], "explainparam() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.explainParam"]], "explainparams() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.explainParams"]], "exploding_wrap() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.exploding_wrap"]], "extractjsonparams() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.extractJsonParams"]], "extractjsonparams() (imagetextdetectorv2writer static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.extractJsonParams"]], "extractparammap() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.extractParamMap"]], "forceprocessing (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.forceProcessing"]], "getinputcol() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.getInputCol"]], "getmodelpath() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.getModelPath"]], "getordefault() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.getOrDefault"]], "getoutputcol() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.getOutputCol"]], "getparam() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.getParam"]], "get_prediction() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.get_prediction"]], "hasdefault() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.hasDefault"]], "hasparam() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.hasParam"]], "inputcol (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.inputCol"]], "instance (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.instance"]], "instance (imagetextdetectorv2writer attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.instance"]], "isdefined() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.isDefined"]], "isset() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.isSet"]], "keepinput (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.keepInput"]], "linkthreshold (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.linkThreshold"]], "load() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.load"]], "loadpytorchmodel() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.loadPytorchModel"]], "mergeintersects (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.mergeIntersects"]], "name (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.name"]], "option() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.option"]], "option() (imagetextdetectorv2writer method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.option"]], "optionmap (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.optionMap"]], "optionmap (imagetextdetectorv2writer attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.optionMap"]], "outputcol (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.outputCol"]], "overwrite() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.overwrite"]], "overwrite() (imagetextdetectorv2writer method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.overwrite"]], "pandas_udf() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.pandas_udf"]], "pretrained() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.pretrained"]], "read() (imagetextdetectorv2 class method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.read"]], "save() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.save"]], "save() (imagetextdetectorv2writer method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.save"]], "saveimpl() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.saveImpl"]], "saveimpl() (imagetextdetectorv2writer method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.saveImpl"]], "savemetadata() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.saveMetadata"]], "savemetadata() (imagetextdetectorv2writer static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.saveMetadata"]], "savemodel() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.saveModel"]], "scorethreshold (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.scoreThreshold"]], "session() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.session"]], "session() (imagetextdetectorv2writer method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.session"]], "set() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.set"]], "setforceprocessing() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setForceProcessing"]], "setinputcol() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setInputCol"]], "setkeepinput() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setKeepInput"]], "setlinkthreshold() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setLinkThreshold"]], "setmergeintersects() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setMergeIntersects"]], "setoutputcol() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setOutputCol"]], "setscorethreshold() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setScoreThreshold"]], "setsizethreshold() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setSizeThreshold"]], "settextthreshold() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setTextThreshold"]], "setusegpu() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setUseGPU"]], "setusepandasudf() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setUsePandasUdf"]], "setwidth() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setWidth"]], "setwithrefiner() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.setWithRefiner"]], "shouldoverwrite (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.shouldOverwrite"]], "shouldoverwrite (imagetextdetectorv2writer attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2Writer.shouldOverwrite"]], "sizethreshold (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.sizeThreshold"]], "sparkocr.transformers.detectors.image_text_detector_v2": [[136, "module-sparkocr.transformers.detectors.image_text_detector_v2"]], "textthreshold (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.textThreshold"]], "transform() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.transform"]], "udf() (imagetextdetectorv2 static method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.udf"]], "uid (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.uid"]], "usegpu (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.useGPU"]], "usepandasudf (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.usePandasUdf"]], "width (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.width"]], "withrefiner (imagetextdetectorv2 attribute)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.withRefiner"]], "write() (imagetextdetectorv2 method)": [[136, "sparkocr.transformers.detectors.image_text_detector_v2.ImageTextDetectorV2.write"]], "sparkocr.transformers.detectors": [[137, "module-sparkocr.transformers.detectors"]], "basedicom (class in sparkocr.transformers.dicom.base_dicom)": [[138, "sparkocr.transformers.dicom.base_dicom.BaseDicom"]], "get_s3_creds() (basedicom method)": [[138, "sparkocr.transformers.dicom.base_dicom.BaseDicom.get_s3_creds"]], "readmaxbytes (basedicom attribute)": [[138, "sparkocr.transformers.dicom.base_dicom.BaseDicom.readMaxBytes"]], "read_dicom() (basedicom static method)": [[138, "sparkocr.transformers.dicom.base_dicom.BaseDicom.read_dicom"]], "setreadmaxbytes() (basedicom method)": [[138, "sparkocr.transformers.dicom.base_dicom.BaseDicom.setReadMaxBytes"]], "sparkocr.transformers.dicom.base_dicom": [[138, "module-sparkocr.transformers.dicom.base_dicom"]], "dicomdeidentifier (class in sparkocr.transformers.dicom.dicom_deidentifier)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier"]], "blacklist (dicomdeidentifier attribute)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.blackList"]], "clear() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.clear"]], "copy() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.copy"]], "explainparam() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.explainParam"]], "explainparams() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.explainParams"]], "extractparammap() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.extractParamMap"]], "getinputcols() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.getInputCols"]], "getordefault() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.getOrDefault"]], "getoutputcol() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.getOutputCol"]], "getparam() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.getParam"]], "get_input_col() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.get_input_col"]], "get_tags() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.get_tags"]], "hasdefault() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.hasDefault"]], "hasparam() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.hasParam"]], "inputcols (dicomdeidentifier attribute)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.inputCols"]], "isdefined() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.isDefined"]], "isset() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.isSet"]], "keepinput (dicomdeidentifier attribute)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.keepInput"]], "load() (dicomdeidentifier class method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.load"]], "outputcol (dicomdeidentifier attribute)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.outputCol"]], "read() (dicomdeidentifier class method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.read"]], "save() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.save"]], "set() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.set"]], "setblacklist() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.setBlackList"]], "setblacklistfile() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.setBlackListFile"]], "setinputcols() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.setInputCols"]], "setkeepinput() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.setKeepInput"]], "setoutputcol() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.setOutputCol"]], "sparkocr.transformers.dicom.dicom_deidentifier": [[139, "module-sparkocr.transformers.dicom.dicom_deidentifier"]], "transform() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.transform"]], "transform_dicom() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.transform_dicom"]], "uid (dicomdeidentifier attribute)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.uid"]], "write() (dicomdeidentifier method)": [[139, "sparkocr.transformers.dicom.dicom_deidentifier.DicomDeidentifier.write"]], "dicomcleaner (class in sparkocr.transformers.dicom.dicom_draw_regions)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner"]], "dicomdrawregions (class in sparkocr.transformers.dicom.dicom_draw_regions)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions"]], "noimage": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.NoImage"]], "overlay_tag (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.OVERLAY_TAG"]], "add_compression_ratio() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.add_compression_ratio"]], "aggcols (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.aggCols"]], "clean() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.clean"]], "clean_frame() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.clean_frame"]], "cleaned_overlay_data (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.cleaned_overlay_data"]], "clear() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.clear"]], "compressionquality (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.compressionQuality"]], "copy() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.copy"]], "explainparam() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.explainParam"]], "explainparams() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.explainParams"]], "extractparammap() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.extractParamMap"]], "extract_pixel_using_handler() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.extract_pixel_using_handler"]], "forceoutput (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.forceOutput"]], "frame_numbers (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.frame_numbers"]], "getinputcol() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.getInputCol"]], "getordefault() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.getOrDefault"]], "getoutputcol() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.getOutputCol"]], "getparam() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.getParam"]], "get_s3_creds() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.get_s3_creds"]], "get_transfer_syntax_based_on_dicom_tags() (dicomcleaner class method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.get_transfer_syntax_based_on_dicom_tags"]], "hasdefault() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.hasDefault"]], "hasparam() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.hasParam"]], "htj2k_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.htj2k_color_space"]], "htj2k_lossless_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.htj2k_lossless_color_space"]], "htj2k_lossless_rpcl_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.htj2k_lossless_rpcl_color_space"]], "infer_reshape_size() (dicomcleaner static method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.infer_reshape_size"]], "inputcol (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.inputCol"]], "inputregionscol (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.inputRegionsCol"]], "isdefined() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.isDefined"]], "isset() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.isSet"]], "is_compressed (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.is_compressed"]], "jpeg_2000_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_2000_color_space"]], "jpeg_2000_lossless_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_2000_lossless_color_space"]], "jpeg_baseline_8bit_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_baseline_8bit_color_space"]], "jpeg_extended_12_bit_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_extended_12_bit_color_space"]], "jpeg_lossless_p14_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_lossless_p14_color_space"]], "jpeg_lossless_sv1_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_lossless_sv1_color_space"]], "jpeg_ls_lossless_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_ls_lossless_color_space"]], "jpeg_ls_near_lossless_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.jpeg_ls_near_lossless_color_space"]], "keepinput (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.keepInput"]], "load() (dicomdrawregions class method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.load"]], "memoryoptimized (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.memoryOptimized"]], "open() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.open"]], "origincol (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.originCol"]], "original (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.original"]], "outputcol (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.outputCol"]], "overlay_data (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.overlay_data"]], "read() (dicomdrawregions class method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.read"]], "readmaxbytes (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.readMaxBytes"]], "read_dicom() (dicomcleaner static method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.read_dicom"]], "resolve_compression_quality() (dicomcleaner class method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.resolve_compression_quality"]], "results (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.results"]], "rle_color_space (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.rle_color_space"]], "save() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.save"]], "save_dicom() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.save_dicom"]], "scalefactor (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.scaleFactor"]], "set() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.set"]], "setaggcols() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setAggCols"]], "setcompressionquality() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setCompressionQuality"]], "setforceoutput() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setForceOutput"]], "setinputcol() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setInputCol"]], "setinputregionscol() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setInputRegionsCol"]], "setkeepinput() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setKeepInput"]], "setmemoryoptimized() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setMemoryOptimized"]], "setorigincol() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setOriginCol"]], "setoutputcol() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setOutputCol"]], "setreadmaxbytes() (dicomcleaner method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.setReadMaxBytes"]], "setscalefactor() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.setScaleFactor"]], "sparkocr.transformers.dicom.dicom_draw_regions": [[140, "module-sparkocr.transformers.dicom.dicom_draw_regions"]], "transfer_syntaxes (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.transfer_syntaxes"]], "transform() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.transform"]], "transform_dicom() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.transform_dicom"]], "uid (dicomdrawregions attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.uid"]], "validate_input_dicom_tags() (dicomcleaner class method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.validate_input_dicom_tags"]], "version (dicomcleaner attribute)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomCleaner.version"]], "write() (dicomdrawregions method)": [[140, "sparkocr.transformers.dicom.dicom_draw_regions.DicomDrawRegions.write"]], "dicommetadatadeidentifier (class in sparkocr.transformers.dicom.dicom_metadata_deidentifier)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier"]], "obfuscator (class in sparkocr.transformers.dicom.dicom_metadata_deidentifier)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator"]], "clean_tag_name() (dicommetadatadeidentifier static method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.clean_tag_name"]], "clear() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.clear"]], "copy() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.copy"]], "delete_tag() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.delete_tag"]], "dummy_graphic_annotation_sequence() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.dummy_graphic_annotation_sequence"]], "dummy_person_identification_code_sequence() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.dummy_person_identification_code_sequence"]], "dummy_verifying_observer_identification_sequence() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.dummy_verifying_observer_identification_sequence"]], "explainparam() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.explainParam"]], "explainparams() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.explainParams"]], "extractparammap() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.extractParamMap"]], "generate_random_string() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.generate_random_string"]], "getinputcols() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.getInputCols"]], "getordefault() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.getOrDefault"]], "getoutputcol() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.getOutputCol"]], "getparam() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.getParam"]], "getrules() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.getRules"]], "get_input_col() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.get_input_col"]], "get_random_name() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.get_random_name"]], "get_random_name_with_seed() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.get_random_name_with_seed"]], "get_random_uid() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.get_random_uid"]], "hasdefault() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.hasDefault"]], "hasparam() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.hasParam"]], "hash_uid() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.hash_uid"]], "inputcols (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.inputCols"]], "isdefined() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.isDefined"]], "isset() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.isSet"]], "keepinput (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.keepInput"]], "literal() (obfuscator static method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.literal"]], "load() (dicommetadatadeidentifier class method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.load"]], "outputcol (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.outputCol"]], "placeholdertext (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.placeholderText"]], "read() (dicommetadatadeidentifier class method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.read"]], "read_newline_separated() (obfuscator static method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.read_newline_separated"]], "removeprivatetags (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.removePrivateTags"]], "remove_date() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.remove_date"]], "remove_sequence() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.remove_sequence"]], "remove_str() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.remove_str"]], "resolve_method() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.resolve_method"]], "return_empty_if_value_empty() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.return_empty_if_value_empty"]], "save() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.save"]], "set() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.set"]], "setinputcols() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.setInputCols"]], "setkeepinput() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.setKeepInput"]], "setoutputcol() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.setOutputCol"]], "setplaceholdertext() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.setPlaceholderText"]], "setremoveprivatetags() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.setRemovePrivateTags"]], "setstrategyfile() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.setStrategyFile"]], "setuserseed() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.setUserSeed"]], "shift_age_randomly() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.shift_age_randomly"]], "shift_date_fixed_days() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.shift_date_fixed_days"]], "shift_date_random_days() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.shift_date_random_days"]], "shift_date_time_days() (obfuscator static method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.shift_date_time_days"]], "shift_time_fixed_days() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.shift_time_fixed_days"]], "shift_time_random_days() (obfuscator method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.Obfuscator.shift_time_random_days"]], "sparkocr.transformers.dicom.dicom_metadata_deidentifier": [[141, "module-sparkocr.transformers.dicom.dicom_metadata_deidentifier"]], "strategyfilecontent (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.strategyFileContent"]], "transform() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.transform"]], "transform_dicom() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.transform_dicom"]], "uid (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.uid"]], "userseed (dicommetadatadeidentifier attribute)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.userSeed"]], "write() (dicommetadatadeidentifier method)": [[141, "sparkocr.transformers.dicom.dicom_metadata_deidentifier.DicomMetadataDeidentifier.write"]], "dicomsplitter (class in sparkocr.transformers.dicom.dicom_splitter)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter"]], "clear() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.clear"]], "copy() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.copy"]], "documentnumcol (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.documentNumCol"]], "explainparam() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.explainParam"]], "explainparams() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.explainParams"]], "extractparammap() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.extractParamMap"]], "getinputcol() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.getInputCol"]], "getordefault() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.getOrDefault"]], "getoutputcol() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.getOutputCol"]], "getparam() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.getParam"]], "hasdefault() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.hasDefault"]], "hasparam() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.hasParam"]], "inputcol (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.inputCol"]], "isdefined() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.isDefined"]], "isset() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.isSet"]], "keepinput (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.keepInput"]], "load() (dicomsplitter class method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.load"]], "origincol (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.originCol"]], "outputcol (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.outputCol"]], "partitionnum (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.partitionNum"]], "read() (dicomsplitter class method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.read"]], "save() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.save"]], "set() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.set"]], "setinputcol() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.setInputCol"]], "setkeepinput() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.setKeepInput"]], "setorigincol() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.setOriginCol"]], "setoutputcol() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.setOutputCol"]], "setpartitionnum() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.setPartitionNum"]], "setsplitnumbatch() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.setSplitNumBatch"]], "setsplittingstategy() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.setSplittingStategy"]], "sparkocr.transformers.dicom.dicom_splitter": [[142, "module-sparkocr.transformers.dicom.dicom_splitter"]], "splitnumbatch (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.splitNumBatch"]], "splittingstategy (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.splittingStategy"]], "transform() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.transform"]], "transform_dicom() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.transform_dicom"]], "uid (dicomsplitter attribute)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.uid"]], "write() (dicomsplitter method)": [[142, "sparkocr.transformers.dicom.dicom_splitter.DicomSplitter.write"]], "dicomtoimagev2 (class in sparkocr.transformers.dicom.dicom_to_image_v2)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2"]], "clear() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.clear"]], "copy() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.copy"]], "explainparam() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.explainParam"]], "explainparams() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.explainParams"]], "extractparammap() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.extractParamMap"]], "getinputcols() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.getInputCols"]], "getordefault() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.getOrDefault"]], "getoutputcol() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.getOutputCol"]], "getparam() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.getParam"]], "get_input_col() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.get_input_col"]], "hasdefault() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.hasDefault"]], "hasparam() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.hasParam"]], "inputcols (dicomtoimagev2 attribute)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.inputCols"]], "isdefined() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.isDefined"]], "isset() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.isSet"]], "keepinput (dicomtoimagev2 attribute)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.keepInput"]], "load() (dicomtoimagev2 class method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.load"]], "metadatacol (dicomtoimagev2 attribute)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.metadataCol"]], "origincol (dicomtoimagev2 attribute)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.originCol"]], "outputcol (dicomtoimagev2 attribute)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.outputCol"]], "pagenumcol (dicomtoimagev2 attribute)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.pageNumCol"]], "read() (dicomtoimagev2 class method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.read"]], "save() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.save"]], "set() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.set"]], "setinputcols() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.setInputCols"]], "setkeepinput() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.setKeepInput"]], "setmetadatacol() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.setMetadataCol"]], "setorigincol() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.setOriginCol"]], "setoutputcol() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.setOutputCol"]], "setpagenumcol() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.setPageNumCol"]], "sparkocr.transformers.dicom.dicom_to_image_v2": [[143, "module-sparkocr.transformers.dicom.dicom_to_image_v2"]], "transform() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.transform"]], "transform_dicom() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.transform_dicom"]], "uid (dicomtoimagev2 attribute)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.uid"]], "write() (dicomtoimagev2 method)": [[143, "sparkocr.transformers.dicom.dicom_to_image_v2.DicomToImageV2.write"]], "dicomtoimagev3 (class in sparkocr.transformers.dicom.dicom_to_image_v3)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3"]], "add_image() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.add_image"]], "clear() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.clear"]], "compressionmode (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.compressionMode"]], "compressionquality (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.compressionQuality"]], "compressionthreshold (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.compressionThreshold"]], "copy() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.copy"]], "explainparam() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.explainParam"]], "explainparams() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.explainParams"]], "extractparammap() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.extractParamMap"]], "framelimit (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.frameLimit"]], "getinputcols() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.getInputCols"]], "getordefault() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.getOrDefault"]], "getoutputcol() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.getOutputCol"]], "getparam() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.getParam"]], "get_input_col() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.get_input_col"]], "get_s3_creds() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.get_s3_creds"]], "hasdefault() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.hasDefault"]], "hasparam() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.hasParam"]], "inputcols (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.inputCols"]], "isdefined() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.isDefined"]], "isset() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.isSet"]], "keepinput (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.keepInput"]], "load() (dicomtoimagev3 class method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.load"]], "memoryoptimized (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.memoryOptimized"]], "metadatacol (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.metadataCol"]], "origincol (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.originCol"]], "outputcol (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.outputCol"]], "pagenumcol (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.pageNumCol"]], "read() (dicomtoimagev3 class method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.read"]], "readmaxbytes (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.readMaxBytes"]], "read_dicom() (dicomtoimagev3 static method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.read_dicom"]], "save() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.save"]], "scale (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.scale"]], "set() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.set"]], "setcompressionmode() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setCompressionMode"]], "setcompressionquality() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setCompressionQuality"]], "setcompressionthreshold() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setCompressionThreshold"]], "setframelimit() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setFrameLimit"]], "setinputcols() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setInputCols"]], "setkeepinput() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setKeepInput"]], "setmemoryoptimized() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setMemoryOptimized"]], "setmetadatacol() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setMetadataCol"]], "setorigincol() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setOriginCol"]], "setoutputcol() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setOutputCol"]], "setpagenumcol() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setPageNumCol"]], "setreadmaxbytes() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setReadMaxBytes"]], "setscale() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.setScale"]], "sparkocr.transformers.dicom.dicom_to_image_v3": [[144, "module-sparkocr.transformers.dicom.dicom_to_image_v3"]], "transform() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.transform"]], "transform_dicom() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.transform_dicom"]], "uid (dicomtoimagev3 attribute)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.uid"]], "write() (dicomtoimagev3 method)": [[144, "sparkocr.transformers.dicom.dicom_to_image_v3.DicomToImageV3.write"]], "dicomtometadata (class in sparkocr.transformers.dicom.dicom_to_metadata)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata"]], "clear() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.clear"]], "copy() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.copy"]], "documentnumcol (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.documentNumCol"]], "explainparam() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.explainParam"]], "explainparams() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.explainParams"]], "exploding_wrap() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.exploding_wrap"]], "extractparammap() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.extractParamMap"]], "forceprocessing (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.forceProcessing"]], "getinputcol() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.getInputCol"]], "getordefault() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.getOrDefault"]], "getoutputcol() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.getOutputCol"]], "getparam() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.getParam"]], "get_s3_creds() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.get_s3_creds"]], "hasdefault() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.hasDefault"]], "hasparam() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.hasParam"]], "inputcol (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.inputCol"]], "isdefined() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.isDefined"]], "isset() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.isSet"]], "keepinput (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.keepInput"]], "load() (dicomtometadata class method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.load"]], "origincol (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.originCol"]], "outputcol (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.outputCol"]], "partitionnum (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.partitionNum"]], "read() (dicomtometadata class method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.read"]], "readmaxbytes (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.readMaxBytes"]], "read_dicom() (dicomtometadata static method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.read_dicom"]], "save() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.save"]], "set() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.set"]], "setforceprocessing() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.setForceProcessing"]], "setinputcol() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.setInputCol"]], "setkeepinput() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.setKeepInput"]], "setoutputcol() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.setOutputCol"]], "setreadmaxbytes() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.setReadMaxBytes"]], "sparkocr.transformers.dicom.dicom_to_metadata": [[145, "module-sparkocr.transformers.dicom.dicom_to_metadata"]], "splitnumbatch (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.splitNumBatch"]], "splittingstategy (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.splittingStategy"]], "transform() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.transform"]], "transform_dicom() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.transform_dicom"]], "uid (dicomtometadata attribute)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.uid"]], "write() (dicomtometadata method)": [[145, "sparkocr.transformers.dicom.dicom_to_metadata.DicomToMetadata.write"]], "dicomtopdf (class in sparkocr.transformers.dicom.dicom_to_pdf)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf"]], "clear() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.clear"]], "copy() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.copy"]], "explainparam() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.explainParam"]], "explainparams() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.explainParams"]], "extractparammap() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.extractParamMap"]], "getinputcols() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.getInputCols"]], "getordefault() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.getOrDefault"]], "getoutputcol() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.getOutputCol"]], "getparam() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.getParam"]], "get_input_col() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.get_input_col"]], "hasdefault() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.hasDefault"]], "hasparam() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.hasParam"]], "inputcols (dicomtopdf attribute)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.inputCols"]], "isdefined() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.isDefined"]], "isset() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.isSet"]], "keepinput (dicomtopdf attribute)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.keepInput"]], "load() (dicomtopdf class method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.load"]], "origincol (dicomtopdf attribute)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.originCol"]], "outputcol (dicomtopdf attribute)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.outputCol"]], "read() (dicomtopdf class method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.read"]], "save() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.save"]], "set() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.set"]], "setinputcols() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.setInputCols"]], "setkeepinput() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.setKeepInput"]], "setorigincol() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.setOriginCol"]], "setoutputcol() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.setOutputCol"]], "sparkocr.transformers.dicom.dicom_to_pdf": [[146, "module-sparkocr.transformers.dicom.dicom_to_pdf"]], "transform() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.transform"]], "transform_dicom() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.transform_dicom"]], "uid (dicomtopdf attribute)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.uid"]], "write() (dicomtopdf method)": [[146, "sparkocr.transformers.dicom.dicom_to_pdf.DicomToPdf.write"]], "dicomupdatepdf (class in sparkocr.transformers.dicom.dicom_update_pdf)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf"]], "clear() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.clear"]], "copy() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.copy"]], "explainparam() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.explainParam"]], "explainparams() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.explainParams"]], "extractparammap() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.extractParamMap"]], "getinputcol() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.getInputCol"]], "getordefault() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.getOrDefault"]], "getoutputcol() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.getOutputCol"]], "getparam() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.getParam"]], "hasdefault() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.hasDefault"]], "hasparam() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.hasParam"]], "inputcol (dicomupdatepdf attribute)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.inputCol"]], "inputpdfcol (dicomupdatepdf attribute)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.inputPdfCol"]], "isdefined() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.isDefined"]], "isset() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.isSet"]], "keepinput (dicomupdatepdf attribute)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.keepInput"]], "load() (dicomupdatepdf class method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.load"]], "outputcol (dicomupdatepdf attribute)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.outputCol"]], "read() (dicomupdatepdf class method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.read"]], "save() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.save"]], "set() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.set"]], "setinputcol() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.setInputCol"]], "setinputpdfcol() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.setInputPdfCol"]], "setkeepinput() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.setKeepInput"]], "setoutputcol() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.setOutputCol"]], "sparkocr.transformers.dicom.dicom_update_pdf": [[147, "module-sparkocr.transformers.dicom.dicom_update_pdf"]], "transform() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.transform"]], "transform_dicom() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.transform_dicom"]], "uid (dicomupdatepdf attribute)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.uid"]], "write() (dicomupdatepdf method)": [[147, "sparkocr.transformers.dicom.dicom_update_pdf.DicomUpdatePdf.write"]], "sparkocr.transformers.dicom": [[148, "module-sparkocr.transformers.dicom"]], "dicomtoimage (class in sparkocr.transformers.dicom_to_image)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage"]], "clear() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.clear"]], "copy() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.copy"]], "deidentifymetadata (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.deIdentifyMetadata"]], "explainparam() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.explainParam"]], "explainparams() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.explainParams"]], "extractparammap() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.extractParamMap"]], "getinputcol() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.getInputCol"]], "getordefault() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.getOrDefault"]], "getoutputcol() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.getOutputCol"]], "getparam() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.getParam"]], "hasdefault() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.hasDefault"]], "hasparam() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.hasParam"]], "inputcol (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.inputCol"]], "isdefined() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.isDefined"]], "isset() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.isSet"]], "keepinput (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.keepInput"]], "load() (dicomtoimage class method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.load"]], "metadatacol (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.metadataCol"]], "origincol (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.originCol"]], "outputcol (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.outputCol"]], "pagenumcol (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.pageNumCol"]], "read() (dicomtoimage class method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.read"]], "save() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.save"]], "set() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.set"]], "setdeidentifymetadata() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.setDeIdentifyMetadata"]], "setinputcol() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.setInputCol"]], "setkeepinput() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.setKeepInput"]], "setmetadatacol() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.setMetadataCol"]], "setorigincol() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.setOriginCol"]], "setoutputcol() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.setOutputCol"]], "setpagenumcol() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.setPageNumCol"]], "sparkocr.transformers.dicom_to_image": [[149, "module-sparkocr.transformers.dicom_to_image"]], "transform() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.transform"]], "uid (dicomtoimage attribute)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.uid"]], "write() (dicomtoimage method)": [[149, "sparkocr.transformers.dicom_to_image.DicomToImage.write"]], "doctopdf (class in sparkocr.transformers.doc_to_pdf)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf"]], "clear() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.clear"]], "copy() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.copy"]], "explainparam() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.explainParam"]], "explainparams() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.explainParams"]], "extractparammap() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.extractParamMap"]], "getinputcol() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.getInputCol"]], "getordefault() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.getOrDefault"]], "getoutputcol() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.getOutputCol"]], "getparam() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.getParam"]], "hasdefault() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.hasDefault"]], "hasparam() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.hasParam"]], "inputcol (doctopdf attribute)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.inputCol"]], "isdefined() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.isDefined"]], "isset() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.isSet"]], "load() (doctopdf class method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.load"]], "outputcol (doctopdf attribute)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.outputCol"]], "read() (doctopdf class method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.read"]], "save() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.save"]], "set() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.set"]], "setinputcol() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.setInputCol"]], "setoutputcol() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.setOutputCol"]], "sparkocr.transformers.doc_to_pdf": [[150, "module-sparkocr.transformers.doc_to_pdf"]], "transform() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.transform"]], "uid (doctopdf attribute)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.uid"]], "write() (doctopdf method)": [[150, "sparkocr.transformers.doc_to_pdf.DocToPdf.write"]], "doctotext (class in sparkocr.transformers.doc_to_text)": [[151, "sparkocr.transformers.doc_to_text.DocToText"]], "clear() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.clear"]], "copy() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.copy"]], "explainparam() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.explainParam"]], "explainparams() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.explainParams"]], "extractparammap() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.extractParamMap"]], "getinputcol() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.getInputCol"]], "getordefault() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.getOrDefault"]], "getoutputcol() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.getOutputCol"]], "getparam() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.getParam"]], "hasdefault() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.hasDefault"]], "hasparam() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.hasParam"]], "inputcol (doctotext attribute)": [[151, "sparkocr.transformers.doc_to_text.DocToText.inputCol"]], "isdefined() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.isDefined"]], "isset() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.isSet"]], "load() (doctotext class method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.load"]], "outputcol (doctotext attribute)": [[151, "sparkocr.transformers.doc_to_text.DocToText.outputCol"]], "pagenumcol (doctotext attribute)": [[151, "sparkocr.transformers.doc_to_text.DocToText.pageNumCol"]], "read() (doctotext class method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.read"]], "save() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.save"]], "set() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.set"]], "setinputcol() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.setInputCol"]], "setoutputcol() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.setOutputCol"]], "setpagenumcol() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.setPageNumCol"]], "sparkocr.transformers.doc_to_text": [[151, "module-sparkocr.transformers.doc_to_text"]], "transform() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.transform"]], "uid (doctotext attribute)": [[151, "sparkocr.transformers.doc_to_text.DocToText.uid"]], "write() (doctotext method)": [[151, "sparkocr.transformers.doc_to_text.DocToText.write"]], "doctotexttable (class in sparkocr.transformers.doc_to_text_table)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable"]], "clear() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.clear"]], "copy() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.copy"]], "explainparam() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.explainParam"]], "explainparams() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.explainParams"]], "extractparammap() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.extractParamMap"]], "getinputcol() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.getInputCol"]], "getordefault() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.getOrDefault"]], "getoutputcol() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.getOutputCol"]], "getparam() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.getParam"]], "hasdefault() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.hasDefault"]], "hasparam() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.hasParam"]], "inputcol (doctotexttable attribute)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.inputCol"]], "isdefined() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.isDefined"]], "isset() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.isSet"]], "load() (doctotexttable static method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.load"]], "outputcol (doctotexttable attribute)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.outputCol"]], "read() (doctotexttable class method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.read"]], "save() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.save"]], "set() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.set"]], "setinputcol() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.setInputCol"]], "setoutputcol() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.setOutputCol"]], "sparkocr.transformers.doc_to_text_table": [[152, "module-sparkocr.transformers.doc_to_text_table"]], "transform() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.transform"]], "uid (doctotexttable attribute)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.uid"]], "write() (doctotexttable method)": [[152, "sparkocr.transformers.doc_to_text_table.DocToTextTable.write"]], "sparkocr.transformers.embeddings": [[153, "module-sparkocr.transformers.embeddings"]], "vitimageembeddings (class in sparkocr.transformers.embeddings.vit_image_embeddings)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings"]], "clear() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.clear"]], "copy() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.copy"]], "explainparam() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.explainParam"]], "explainparams() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.explainParams"]], "extractparammap() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.extractParamMap"]], "getinputcol() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.getInputCol"]], "getordefault() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.getOrDefault"]], "getoutputcol() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.getOutputCol"]], "getparam() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.getParam"]], "hasdefault() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.hasDefault"]], "hasparam() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.hasParam"]], "height (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.height"]], "inputcol (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.inputCol"]], "isdefined() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.isDefined"]], "isset() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.isSet"]], "load() (vitimageembeddings static method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.load"]], "loadonnxmodel() (vitimageembeddings static method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.loadONNXModel"]], "name (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.name"]], "normmean (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.normMean"]], "normstd (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.normStd"]], "outputcol (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.outputCol"]], "pretrained() (vitimageembeddings static method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.pretrained"]], "read() (vitimageembeddings class method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.read"]], "save() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.save"]], "savemodel() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.saveModel"]], "set() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.set"]], "setheight() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.setHeight"]], "setinputcol() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.setInputCol"]], "setnormmean() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.setNormMean"]], "setoutputcol() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.setOutputCol"]], "setwidth() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.setWidth"]], "sparkocr.transformers.embeddings.vit_image_embeddings": [[154, "module-sparkocr.transformers.embeddings.vit_image_embeddings"]], "transform() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.transform"]], "uid (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.uid"]], "width (vitimageembeddings attribute)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.width"]], "write() (vitimageembeddings method)": [[154, "sparkocr.transformers.embeddings.vit_image_embeddings.VitImageEmbeddings.write"]], "extendedjavawrapper (class in sparkocr.transformers.extended_java_wrapper)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper"]], "apply() (extendedjavawrapper method)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper.apply"]], "java_obj (extendedjavawrapper attribute)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper.java_obj"]], "new_java_array() (extendedjavawrapper method)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper.new_java_array"]], "new_java_array_integer() (extendedjavawrapper method)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_integer"]], "new_java_array_string() (extendedjavawrapper method)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper.new_java_array_string"]], "new_java_obj() (extendedjavawrapper method)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper.new_java_obj"]], "sc (extendedjavawrapper attribute)": [[155, "sparkocr.transformers.extended_java_wrapper.ExtendedJavaWrapper.sc"]], "sparkocr.transformers.extended_java_wrapper": [[155, "module-sparkocr.transformers.extended_java_wrapper"]], "foundationonereportparser (class in sparkocr.transformers.foundationone_parser)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser"]], "clear() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.clear"]], "copy() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.copy"]], "explainparam() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.explainParam"]], "explainparams() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.explainParams"]], "extractparammap() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.extractParamMap"]], "getinputcol() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.getInputCol"]], "getordefault() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.getOrDefault"]], "getoutputcol() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.getOutputCol"]], "getparam() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.getParam"]], "hasdefault() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.hasDefault"]], "hasparam() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.hasParam"]], "inputcol (foundationonereportparser attribute)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.inputCol"]], "isdefined() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.isDefined"]], "isset() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.isSet"]], "load() (foundationonereportparser class method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.load"]], "origincol (foundationonereportparser attribute)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.originCol"]], "outputcol (foundationonereportparser attribute)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.outputCol"]], "read() (foundationonereportparser class method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.read"]], "save() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.save"]], "set() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.set"]], "setinputcol() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.setInputCol"]], "setorigincol() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.setOriginCol"]], "setoutputcol() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.setOutputCol"]], "sparkocr.transformers.foundationone_parser": [[156, "module-sparkocr.transformers.foundationone_parser"]], "transform() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.transform"]], "uid (foundationonereportparser attribute)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.uid"]], "write() (foundationonereportparser method)": [[156, "sparkocr.transformers.foundationone_parser.FoundationOneReportParser.write"]], "hocrmerger (class in sparkocr.transformers.hocr_merger)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger"]], "clear() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.clear"]], "copy() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.copy"]], "explainparam() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.explainParam"]], "explainparams() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.explainParams"]], "extractparammap() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.extractParamMap"]], "getinputcols() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.getInputCols"]], "getordefault() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.getOrDefault"]], "getoutputcol() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.getOutputCol"]], "getparam() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.getParam"]], "hasdefault() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.hasDefault"]], "hasparam() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.hasParam"]], "inputcols (hocrmerger attribute)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.inputCols"]], "isdefined() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.isDefined"]], "isset() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.isSet"]], "outputcol (hocrmerger attribute)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.outputCol"]], "save() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.save"]], "set() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.set"]], "setinputcols() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.setInputCols"]], "setoutputcol() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.setOutputCol"]], "sparkocr.transformers.hocr_merger": [[157, "module-sparkocr.transformers.hocr_merger"]], "transform() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.transform"]], "uid (hocrmerger attribute)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.uid"]], "write() (hocrmerger method)": [[157, "sparkocr.transformers.hocr_merger.HocrMerger.write"]], "hocrtoimage (class in sparkocr.transformers.hocr_to_image)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage"]], "clear() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.clear"]], "copy() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.copy"]], "explainparam() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.explainParam"]], "explainparams() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.explainParams"]], "extractparammap() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.extractParamMap"]], "getinputcol() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.getInputCol"]], "getordefault() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.getOrDefault"]], "getoutputcol() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.getOutputCol"]], "getparam() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.getParam"]], "hasdefault() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.hasDefault"]], "hasparam() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.hasParam"]], "inputcol (hocrtoimage attribute)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.inputCol"]], "isdefined() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.isDefined"]], "isset() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.isSet"]], "outputcol (hocrtoimage attribute)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.outputCol"]], "save() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.save"]], "set() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.set"]], "setinputcol() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.setInputCol"]], "setoutputcol() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.setOutputCol"]], "sparkocr.transformers.hocr_to_image": [[158, "module-sparkocr.transformers.hocr_to_image"]], "transform() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.transform"]], "uid (hocrtoimage attribute)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.uid"]], "write() (hocrtoimage method)": [[158, "sparkocr.transformers.hocr_to_image.HocrToImage.write"]], "hocrtotexttable (class in sparkocr.transformers.hocr_to_text_table)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable"]], "annotator_type (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.annotator_type"]], "clear() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.clear"]], "copy() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.copy"]], "downloadmodeldata (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.downloadModelData"]], "explainparam() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.explainParam"]], "explainparams() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.explainParams"]], "extractparammap() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.extractParamMap"]], "getinputcol() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.getInputCol"]], "getordefault() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.getOrDefault"]], "getoutputcol() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.getOutputCol"]], "getparam() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.getParam"]], "hasdefault() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.hasDefault"]], "hasparam() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.hasParam"]], "inputcol (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.inputCol"]], "isdefined() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.isDefined"]], "isset() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.isSet"]], "language (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.language"]], "load() (hocrtotexttable class method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.load"]], "modeldata (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.modelData"]], "modeltype (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.modelType"]], "ocrenginemode (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.ocrEngineMode"]], "outputcol (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.outputCol"]], "outputformat (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.outputFormat"]], "pageiteratorlevel (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.pageIteratorLevel"]], "pagesegmode (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.pageSegMode"]], "read() (hocrtotexttable class method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.read"]], "recognizeralgo (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.recognizerAlgo"]], "regioncol (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.regionCol"]], "save() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.save"]], "set() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.set"]], "setdownloadmodeldata() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setDownloadModelData"]], "setinputcol() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setInputCol"]], "setlanguage() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setLanguage"]], "setmodeldata() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setModelData"]], "setmodeltype() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setModelType"]], "setocrenginemode() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setOcrEngineMode"]], "setoutputcol() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setOutputCol"]], "setoutputformat() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setOutputFormat"]], "setpageiteratorlevel() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setPageIteratorLevel"]], "setpagesegmode() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setPageSegMode"]], "setrecognizeralgo() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setRecognizerAlgo"]], "setregioncol() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setRegionCol"]], "setusecellscol() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setUseCellsCol"]], "setusetess4j() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.setUseTess4j"]], "sparkocr.transformers.hocr_to_text_table": [[159, "module-sparkocr.transformers.hocr_to_text_table"]], "transform() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.transform"]], "uid (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.uid"]], "usecellscol (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.useCellsCol"]], "usetess4j (hocrtotexttable attribute)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.useTess4j"]], "write() (hocrtotexttable method)": [[159, "sparkocr.transformers.hocr_to_text_table.HocrToTextTable.write"]], "imageadaptivebinarizer (class in sparkocr.transformers.image_adaptive_binarizer)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer"]], "clear() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.clear"]], "copy() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.copy"]], "explainparam() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.explainParam"]], "explainparams() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.explainParams"]], "extractparammap() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.extractParamMap"]], "getinputcol() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.getInputCol"]], "getordefault() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.getOrDefault"]], "getoutputcol() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.getOutputCol"]], "getparam() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.getParam"]], "hasdefault() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.hasDefault"]], "hasparam() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.hasParam"]], "inputcol (imageadaptivebinarizer attribute)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.inputCol"]], "isdefined() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.isDefined"]], "isset() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.isSet"]], "load() (imageadaptivebinarizer class method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.load"]], "method (imageadaptivebinarizer attribute)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.method"]], "outputcol (imageadaptivebinarizer attribute)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.outputCol"]], "read() (imageadaptivebinarizer class method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.read"]], "save() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.save"]], "scale (imageadaptivebinarizer attribute)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.scale"]], "set() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.set"]], "setimagetype() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.setImageType"]], "setinputcol() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.setInputCol"]], "setmethod() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.setMethod"]], "setoutputcol() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.setOutputCol"]], "setscale() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.setScale"]], "setwidth() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.setWidth"]], "sparkocr.transformers.image_adaptive_binarizer": [[160, "module-sparkocr.transformers.image_adaptive_binarizer"]], "transform() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.transform"]], "uid (imageadaptivebinarizer attribute)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.uid"]], "width (imageadaptivebinarizer attribute)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.width"]], "write() (imageadaptivebinarizer method)": [[160, "sparkocr.transformers.image_adaptive_binarizer.ImageAdaptiveBinarizer.write"]], "imageadaptivescaler (class in sparkocr.transformers.image_adaptive_scaler)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler"]], "clear() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.clear"]], "copy() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.copy"]], "desiredsize (imageadaptivescaler attribute)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.desiredSize"]], "explainparam() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.explainParam"]], "explainparams() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.explainParams"]], "extractparammap() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.extractParamMap"]], "getinputcol() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.getInputCol"]], "getordefault() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.getOrDefault"]], "getoutputcol() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.getOutputCol"]], "getparam() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.getParam"]], "hasdefault() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.hasDefault"]], "hasparam() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.hasParam"]], "inputcol (imageadaptivescaler attribute)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.inputCol"]], "isdefined() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.isDefined"]], "isset() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.isSet"]], "load() (imageadaptivescaler class method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.load"]], "outputcol (imageadaptivescaler attribute)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.outputCol"]], "read() (imageadaptivescaler class method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.read"]], "save() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.save"]], "set() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.set"]], "setdesiredsize() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.setDesiredSize"]], "setinputcol() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.setInputCol"]], "setoutputcol() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.setOutputCol"]], "sparkocr.transformers.image_adaptive_scaler": [[161, "module-sparkocr.transformers.image_adaptive_scaler"]], "transform() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.transform"]], "uid (imageadaptivescaler attribute)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.uid"]], "write() (imageadaptivescaler method)": [[161, "sparkocr.transformers.image_adaptive_scaler.ImageAdaptiveScaler.write"]], "imageadaptivethresholding (class in sparkocr.transformers.image_adaptive_thresholding)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding"]], "blocksize (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.blockSize"]], "clear() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.clear"]], "copy() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.copy"]], "cval (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.cval"]], "explainparam() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.explainParam"]], "explainparams() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.explainParams"]], "extractparammap() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.extractParamMap"]], "getblocksize() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getBlockSize"]], "getcval() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getCval"]], "getinputcol() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getInputCol"]], "getmethod() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getMethod"]], "getmode() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getMode"]], "getoffset() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getOffset"]], "getordefault() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getOrDefault"]], "getoutputcol() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getOutputCol"]], "getparam() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.getParam"]], "hasdefault() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.hasDefault"]], "hasparam() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.hasParam"]], "inputcol (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.inputCol"]], "isdefined() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.isDefined"]], "isset() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.isSet"]], "keepinput (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.keepInput"]], "load() (imageadaptivethresholding class method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.load"]], "method (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.method"]], "mode (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.mode"]], "offset (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.offset"]], "outputcol (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.outputCol"]], "read() (imageadaptivethresholding class method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.read"]], "save() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.save"]], "set() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.set"]], "setblocksize() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setBlockSize"]], "setcval() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setCval"]], "setinputcol() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setInputCol"]], "setkeepinput() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setKeepInput"]], "setmethod() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setMethod"]], "setmode() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setMode"]], "setoffset() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setOffset"]], "setoutputcol() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setOutputCol"]], "setparams() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.setParams"]], "sparkocr.transformers.image_adaptive_thresholding": [[162, "module-sparkocr.transformers.image_adaptive_thresholding"]], "transform() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.transform"]], "transform_image() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.transform_image"]], "uid (imageadaptivethresholding attribute)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.uid"]], "write() (imageadaptivethresholding method)": [[162, "sparkocr.transformers.image_adaptive_thresholding.ImageAdaptiveThresholding.write"]], "imagebasetransformer (class in sparkocr.transformers.image_base_transformer)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer"]], "clear() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.clear"]], "copy() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.copy"]], "explainparam() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.explainParam"]], "explainparams() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.explainParams"]], "extractparammap() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.extractParamMap"]], "getinputcol() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.getInputCol"]], "getordefault() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.getOrDefault"]], "getoutputcol() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.getOutputCol"]], "getparam() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.getParam"]], "hasdefault() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.hasDefault"]], "hasparam() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.hasParam"]], "inputcol (imagebasetransformer attribute)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.inputCol"]], "isdefined() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.isDefined"]], "isset() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.isSet"]], "keepinput (imagebasetransformer attribute)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.keepInput"]], "load() (imagebasetransformer class method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.load"]], "outputcol (imagebasetransformer attribute)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.outputCol"]], "read() (imagebasetransformer class method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.read"]], "save() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.save"]], "set() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.set"]], "setinputcol() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.setInputCol"]], "setkeepinput() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.setKeepInput"]], "setoutputcol() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.setOutputCol"]], "sparkocr.transformers.image_base_transformer": [[163, "module-sparkocr.transformers.image_base_transformer"]], "transform() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.transform"]], "transform_image() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.transform_image"]], "uid (imagebasetransformer attribute)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.uid"]], "write() (imagebasetransformer method)": [[163, "sparkocr.transformers.image_base_transformer.ImageBaseTransformer.write"]], "imagebinarizer (class in sparkocr.transformers.image_binarizer)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer"]], "clear() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.clear"]], "copy() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.copy"]], "explainparam() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.explainParam"]], "explainparams() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.explainParams"]], "extractparammap() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.extractParamMap"]], "getinputcol() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.getInputCol"]], "getordefault() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.getOrDefault"]], "getoutputcol() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.getOutputCol"]], "getparam() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.getParam"]], "hasdefault() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.hasDefault"]], "hasparam() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.hasParam"]], "imagetype (imagebinarizer attribute)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.imageType"]], "inputcol (imagebinarizer attribute)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.inputCol"]], "isdefined() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.isDefined"]], "isset() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.isSet"]], "load() (imagebinarizer class method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.load"]], "outputcol (imagebinarizer attribute)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.outputCol"]], "read() (imagebinarizer class method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.read"]], "save() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.save"]], "set() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.set"]], "setimagetype() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.setImageType"]], "setinputcol() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.setInputCol"]], "setoutputcol() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.setOutputCol"]], "setthreshold() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.setThreshold"]], "sparkocr.transformers.image_binarizer": [[164, "module-sparkocr.transformers.image_binarizer"]], "threshold (imagebinarizer attribute)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.threshold"]], "transform() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.transform"]], "uid (imagebinarizer attribute)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.uid"]], "write() (imagebinarizer method)": [[164, "sparkocr.transformers.image_binarizer.ImageBinarizer.write"]], "imagebrandstotext (class in sparkocr.transformers.image_brands_ocr)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText"]], "brandscoords (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.brandsCoords"]], "clear() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.clear"]], "confidencecol (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.confidenceCol"]], "confidencethreshold (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.confidenceThreshold"]], "copy() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.copy"]], "downloadmodeldata (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.downloadModelData"]], "explainparam() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.explainParam"]], "explainparams() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.explainParams"]], "extractparammap() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.extractParamMap"]], "getinputcol() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.getInputCol"]], "getordefault() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.getOrDefault"]], "getoutputcol() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.getOutputCol"]], "getparam() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.getParam"]], "hasdefault() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.hasDefault"]], "hasparam() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.hasParam"]], "ignoreresolution (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.ignoreResolution"]], "includeconfidence (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.includeConfidence"]], "inputcol (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.inputCol"]], "isdefined() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.isDefined"]], "isset() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.isSet"]], "language (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.language"]], "load() (imagebrandstotext class method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.load"]], "modeldata (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.modelData"]], "modeltype (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.modelType"]], "ocrenginemode (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.ocrEngineMode"]], "ocrparams (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.ocrParams"]], "outputcol (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.outputCol"]], "pageiteratorlevel (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.pageIteratorLevel"]], "pagesegmode (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.pageSegMode"]], "positionscol (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.positionsCol"]], "read() (imagebrandstotext class method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.read"]], "save() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.save"]], "set() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.set"]], "setbrandscoords() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setBrandsCoords"]], "setconfidencecol() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setConfidenceCol"]], "setconfidencethreshold() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setConfidenceThreshold"]], "setdownloadmodeldata() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setDownloadModelData"]], "setignoreresolution() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setIgnoreResolution"]], "setincludeconfidence() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setIncludeConfidence"]], "setinputcol() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setInputCol"]], "setlanguage() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setLanguage"]], "setmodeldata() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setModelData"]], "setmodeltype() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setModelType"]], "setocrenginemode() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setOcrEngineMode"]], "setocrparams() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setOcrParams"]], "setoutputcol() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setOutputCol"]], "setpageiteratorlevel() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setPageIteratorLevel"]], "setpagesegmode() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setPageSegMode"]], "setpositionscol() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setPositionsCol"]], "settextcol() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setTextCol"]], "setusetess4j() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.setUseTess4j"]], "sparkocr.transformers.image_brands_ocr": [[165, "module-sparkocr.transformers.image_brands_ocr"]], "textcol (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.textCol"]], "transform() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.transform"]], "uid (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.uid"]], "usetess4j (imagebrandstotext attribute)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.useTess4j"]], "write() (imagebrandstotext method)": [[165, "sparkocr.transformers.image_brands_ocr.ImageBrandsToText.write"]], "imagecellstotexttable (class in sparkocr.transformers.image_cells_to_text_table)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable"]], "cellscol (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.cellsCol"]], "clear() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.clear"]], "copy() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.copy"]], "downloadmodeldata (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.downloadModelData"]], "explainparam() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.explainParam"]], "explainparams() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.explainParams"]], "extractparammap() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.extractParamMap"]], "getinputcol() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.getInputCol"]], "getordefault() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.getOrDefault"]], "getoutputcol() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.getOutputCol"]], "getparam() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.getParam"]], "hasdefault() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.hasDefault"]], "hasparam() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.hasParam"]], "inputcol (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.inputCol"]], "isdefined() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.isDefined"]], "isset() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.isSet"]], "language (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.language"]], "load() (imagecellstotexttable class method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.load"]], "margin (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.margin"]], "modeldata (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.modelData"]], "modeltype (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.modelType"]], "ocrenginemode (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.ocrEngineMode"]], "ocrparams (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.ocrParams"]], "outputcol (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.outputCol"]], "outputformat (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.outputFormat"]], "pageiteratorlevel (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.pageIteratorLevel"]], "pagesegmode (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.pageSegMode"]], "read() (imagecellstotexttable class method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.read"]], "save() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.save"]], "set() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.set"]], "setcellscol() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setCellsCol"]], "setdownloadmodeldata() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setDownloadModelData"]], "setinputcol() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setInputCol"]], "setlanguage() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setLanguage"]], "setmargin() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setMargin"]], "setmodeldata() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setModelData"]], "setmodeltype() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setModelType"]], "setocrenginemode() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setOcrEngineMode"]], "setocrparams() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setOcrParams"]], "setoutputcol() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setOutputCol"]], "setoutputformat() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setOutputFormat"]], "setpageiteratorlevel() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setPageIteratorLevel"]], "setpagesegmode() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setPageSegMode"]], "setstrip() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setStrip"]], "setusetess4j() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.setUseTess4j"]], "sparkocr.transformers.image_cells_to_text_table": [[166, "module-sparkocr.transformers.image_cells_to_text_table"]], "strip (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.strip"]], "transform() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.transform"]], "uid (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.uid"]], "usetess4j (imagecellstotexttable attribute)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.useTess4j"]], "write() (imagecellstotexttable method)": [[166, "sparkocr.transformers.image_cells_to_text_table.ImageCellsToTextTable.write"]], "imagecropper (class in sparkocr.transformers.image_cropper)": [[167, "sparkocr.transformers.image_cropper.ImageCropper"]], "clear() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.clear"]], "copy() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.copy"]], "croprectangle (imagecropper attribute)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.cropRectangle"]], "cropsquaretype (imagecropper attribute)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.cropSquareType"]], "explainparam() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.explainParam"]], "explainparams() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.explainParams"]], "extractparammap() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.extractParamMap"]], "getinputcol() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.getInputCol"]], "getordefault() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.getOrDefault"]], "getoutputcol() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.getOutputCol"]], "getparam() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.getParam"]], "hasdefault() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.hasDefault"]], "hasparam() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.hasParam"]], "inputcol (imagecropper attribute)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.inputCol"]], "isdefined() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.isDefined"]], "isset() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.isSet"]], "load() (imagecropper class method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.load"]], "outputcol (imagecropper attribute)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.outputCol"]], "read() (imagecropper class method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.read"]], "save() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.save"]], "set() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.set"]], "setcroprectangle() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.setCropRectangle"]], "setcropsquaretype() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.setCropSquareType"]], "setinputcol() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.setInputCol"]], "setoutputcol() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.setOutputCol"]], "sparkocr.transformers.image_cropper": [[167, "module-sparkocr.transformers.image_cropper"]], "transform() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.transform"]], "uid (imagecropper attribute)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.uid"]], "write() (imagecropper method)": [[167, "sparkocr.transformers.image_cropper.ImageCropper.write"]], "imagedrawannotations (class in sparkocr.transformers.image_draw_annotations)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations"]], "clear() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.clear"]], "colormap (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.colorMap"]], "copy() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.copy"]], "explainparam() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.explainParam"]], "explainparams() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.explainParams"]], "extractparammap() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.extractParamMap"]], "filledrect (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.filledRect"]], "fontsize (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.fontSize"]], "getinputcol() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.getInputCol"]], "getordefault() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.getOrDefault"]], "getoutputcol() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.getOutputCol"]], "getparam() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.getParam"]], "hasdefault() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.hasDefault"]], "hasparam() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.hasParam"]], "inputchunkscol (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.inputChunksCol"]], "inputcol (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.inputCol"]], "isdefined() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.isDefined"]], "isset() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.isSet"]], "linewidth (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.lineWidth"]], "load() (imagedrawannotations class method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.load"]], "origincol (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.originCol"]], "outputcol (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.outputCol"]], "read() (imagedrawannotations class method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.read"]], "save() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.save"]], "set() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.set"]], "setcolormap() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setColorMap"]], "setfilledrect() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setFilledRect"]], "setfontsize() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setFontSize"]], "setinputchunkscol() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setInputChunksCol"]], "setinputcol() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setInputCol"]], "setlinewidth() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setLineWidth"]], "setorigincol() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setOriginCol"]], "setoutputcol() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.setOutputCol"]], "sparkocr.transformers.image_draw_annotations": [[168, "module-sparkocr.transformers.image_draw_annotations"]], "transform() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.transform"]], "uid (imagedrawannotations attribute)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.uid"]], "write() (imagedrawannotations method)": [[168, "sparkocr.transformers.image_draw_annotations.ImageDrawAnnotations.write"]], "imagedrawregions (class in sparkocr.transformers.image_draw_regions)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions"]], "blacklist (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.blackList"]], "clear() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.clear"]], "copy() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.copy"]], "displaymetadata (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.displayMetadata"]], "dynamiccolor (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.dynamicColor"]], "explainparam() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.explainParam"]], "explainparams() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.explainParams"]], "extractparammap() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.extractParamMap"]], "filledrect (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.filledRect"]], "fontname (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.fontName"]], "fontsize (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.fontSize"]], "fontstyle (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.fontStyle"]], "getinputcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.getInputCol"]], "getordefault() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.getOrDefault"]], "getoutputcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.getOutputCol"]], "getparam() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.getParam"]], "hasdefault() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.hasDefault"]], "hasparam() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.hasParam"]], "ignoreschema (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.ignoreSchema"]], "inpaintedcol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.inpaintedCol"]], "inputchunkmappingcol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.inputChunkMappingCol"]], "inputcol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.inputCol"]], "inputregionscol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.inputRegionsCol"]], "isdefined() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.isDefined"]], "isset() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.isSet"]], "linewidth (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.lineWidth"]], "load() (imagedrawregions class method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.load"]], "origincol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.originCol"]], "outputcol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.outputCol"]], "pagematrixcol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.pageMatrixCol"]], "patchbackgroundcolor (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.patchBackgroundColor"]], "patchimages (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.patchImages"]], "patchtextcolor (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.patchTextColor"]], "read() (imagedrawregions class method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.read"]], "rectcolor (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.rectColor"]], "redactionentitylist (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.redactionEntityList"]], "save() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.save"]], "scaleboundingboxes (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.scaleBoundingBoxes"]], "set() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.set"]], "setblacklist() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setBlackList"]], "setdisplaymetadata() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setDisplayMetadata"]], "setdynamiccolor() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setDynamicColor"]], "setfilledrect() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setFilledRect"]], "setfontname() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setFontName"]], "setfontsize() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setFontSize"]], "setfontstyle() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setFontStyle"]], "setinpaintedcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setInpaintedCol"]], "setinputchunkmappingcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setInputChunkMappingCol"]], "setinputcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setInputCol"]], "setinputregionscol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setInputRegionsCol"]], "setlinewidth() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setLineWidth"]], "setorigincol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setOriginCol"]], "setoutputcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setOutputCol"]], "setpatchbackgroundcolor() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setPatchBackgroundColor"]], "setpatchimages() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setPatchImages"]], "setpatchtextcolor() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setPatchTextColor"]], "setrectcolor() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setRectColor"]], "setredactionentitylist() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setRedactionEntityList"]], "setscaleboundingboxes() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setScaleBoundingBoxes"]], "setsourceimageheightcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setSourceImageHeightCol"]], "setsourceimagewidthcol() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setSourceImageWidthCol"]], "setusecontrasttextcolor() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.setUseContrastTextColor"]], "sourceimageheightcol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.sourceImageHeightCol"]], "sourceimagewidthcol (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.sourceImageWidthCol"]], "sparkocr.transformers.image_draw_regions": [[169, "module-sparkocr.transformers.image_draw_regions"]], "transform() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.transform"]], "uid (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.uid"]], "usecontrasttextcolor (imagedrawregions attribute)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.useContrastTextColor"]], "write() (imagedrawregions method)": [[169, "sparkocr.transformers.image_draw_regions.ImageDrawRegions.write"]], "imageenhancecontrast (class in sparkocr.transformers.image_enhance_contrast)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast"]], "clear() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.clear"]], "cliplimit (imageenhancecontrast attribute)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.clipLimit"]], "copy() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.copy"]], "explainparam() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.explainParam"]], "explainparams() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.explainParams"]], "extractparammap() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.extractParamMap"]], "getcliplimit() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.getClipLimit"]], "getinputcol() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.getInputCol"]], "getordefault() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.getOrDefault"]], "getoutputcol() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.getOutputCol"]], "getparam() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.getParam"]], "gettilegridsize() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.getTileGridSize"]], "hasdefault() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.hasDefault"]], "hasparam() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.hasParam"]], "inputcol (imageenhancecontrast attribute)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.inputCol"]], "isdefined() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.isDefined"]], "isset() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.isSet"]], "keepinput (imageenhancecontrast attribute)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.keepInput"]], "load() (imageenhancecontrast class method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.load"]], "outputcol (imageenhancecontrast attribute)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.outputCol"]], "read() (imageenhancecontrast class method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.read"]], "save() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.save"]], "set() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.set"]], "setcliplimit() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.setClipLimit"]], "setinputcol() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.setInputCol"]], "setkeepinput() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.setKeepInput"]], "setoutputcol() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.setOutputCol"]], "setparams() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.setParams"]], "settilegridsize() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.setTileGridSize"]], "sparkocr.transformers.image_enhance_contrast": [[170, "module-sparkocr.transformers.image_enhance_contrast"]], "tilegridsize (imageenhancecontrast attribute)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.tileGridSize"]], "transform() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.transform"]], "transform_image() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.transform_image"]], "uid (imageenhancecontrast attribute)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.uid"]], "write() (imageenhancecontrast method)": [[170, "sparkocr.transformers.image_enhance_contrast.ImageEnhanceContrast.write"]], "imageerosion (class in sparkocr.transformers.image_erosion)": [[171, "sparkocr.transformers.image_erosion.ImageErosion"]], "clear() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.clear"]], "copy() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.copy"]], "explainparam() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.explainParam"]], "explainparams() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.explainParams"]], "extractparammap() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.extractParamMap"]], "getinputcol() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.getInputCol"]], "getkernel() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.getKernel"]], "getkernelshape() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.getKernelShape"]], "getkernelsize() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.getKernelSize"]], "getordefault() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.getOrDefault"]], "getoutputcol() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.getOutputCol"]], "getparam() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.getParam"]], "hasdefault() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.hasDefault"]], "hasparam() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.hasParam"]], "inputcol (imageerosion attribute)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.inputCol"]], "isdefined() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.isDefined"]], "isset() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.isSet"]], "keepinput (imageerosion attribute)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.keepInput"]], "kernelshape (imageerosion attribute)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.kernelShape"]], "kernelsize (imageerosion attribute)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.kernelSize"]], "load() (imageerosion class method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.load"]], "outputcol (imageerosion attribute)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.outputCol"]], "read() (imageerosion class method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.read"]], "save() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.save"]], "set() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.set"]], "setinputcol() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.setInputCol"]], "setkeepinput() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.setKeepInput"]], "setkernelshape() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.setKernelShape"]], "setkernelsize() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.setKernelSize"]], "setoutputcol() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.setOutputCol"]], "setparams() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.setParams"]], "sparkocr.transformers.image_erosion": [[171, "module-sparkocr.transformers.image_erosion"]], "transform() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.transform"]], "transform_image() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.transform_image"]], "uid (imageerosion attribute)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.uid"]], "write() (imageerosion method)": [[171, "sparkocr.transformers.image_erosion.ImageErosion.write"]], "gpuimagetransformer (class in sparkocr.transformers.image_gpu_transform)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer"]], "adddilatetransform() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.addDilateTransform"]], "adderodetransform() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.addErodeTransform"]], "addhuangtransform() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.addHuangTransform"]], "addotsutransform() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.addOtsuTransform"]], "addscalingtransform() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.addScalingTransform"]], "clear() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.clear"]], "copy() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.copy"]], "explainparam() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.explainParam"]], "explainparams() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.explainParams"]], "extractparammap() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.extractParamMap"]], "getinputcol() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.getInputCol"]], "getordefault() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.getOrDefault"]], "getoutputcol() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.getOutputCol"]], "getparam() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.getParam"]], "gpuname (gpuimagetransformer attribute)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.gpuName"]], "hasdefault() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.hasDefault"]], "hasparam() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.hasParam"]], "imagetype (gpuimagetransformer attribute)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.imageType"]], "inputcol (gpuimagetransformer attribute)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.inputCol"]], "isdefined() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.isDefined"]], "isset() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.isSet"]], "load() (gpuimagetransformer class method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.load"]], "outputcol (gpuimagetransformer attribute)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.outputCol"]], "read() (gpuimagetransformer class method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.read"]], "save() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.save"]], "set() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.set"]], "setgpuname() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.setGPUName"]], "setimagetype() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.setImageType"]], "setinputcol() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.setInputCol"]], "setoutputcol() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.setOutputCol"]], "setparams() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.setParams"]], "sparkocr.transformers.image_gpu_transform": [[172, "module-sparkocr.transformers.image_gpu_transform"]], "transform() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.transform"]], "uid (gpuimagetransformer attribute)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.uid"]], "write() (gpuimagetransformer method)": [[172, "sparkocr.transformers.image_gpu_transform.GPUImageTransformer.write"]], "imagehandwrittendetector (class in sparkocr.transformers.image_handwritten_detector)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector"]], "clear() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.clear"]], "copy() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.copy"]], "explainparam() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.explainParam"]], "explainparams() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.explainParams"]], "extractparammap() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.extractParamMap"]], "getinputcol() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.getInputCol"]], "getlabels() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.getLabels"]], "getordefault() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.getOrDefault"]], "getoutputcol() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.getOutputCol"]], "getparam() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.getParam"]], "hasdefault() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.hasDefault"]], "hasparam() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.hasParam"]], "inputcol (imagehandwrittendetector attribute)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.inputCol"]], "isdefined() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.isDefined"]], "isset() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.isSet"]], "labels (imagehandwrittendetector attribute)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.labels"]], "load() (imagehandwrittendetector static method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.load"]], "loadonnxmodel() (imagehandwrittendetector static method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.loadOnnxModel"]], "name (imagehandwrittendetector attribute)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.name"]], "outputcol (imagehandwrittendetector attribute)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.outputCol"]], "outputlabels (imagehandwrittendetector attribute)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.outputLabels"]], "pretrained() (imagehandwrittendetector static method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.pretrained"]], "read() (imagehandwrittendetector class method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.read"]], "save() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.save"]], "scorethreshold (imagehandwrittendetector attribute)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.scoreThreshold"]], "set() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.set"]], "setcasesensitive() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.setCaseSensitive"]], "setinputcol() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.setInputCol"]], "setlabels() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.setLabels"]], "setoutputcol() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.setOutputCol"]], "setoutputlabels() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.setOutputLabels"]], "setscorethreshold() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.setScoreThreshold"]], "sparkocr.transformers.image_handwritten_detector": [[173, "module-sparkocr.transformers.image_handwritten_detector"]], "transform() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.transform"]], "uid (imagehandwrittendetector attribute)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.uid"]], "write() (imagehandwrittendetector method)": [[173, "sparkocr.transformers.image_handwritten_detector.ImageHandwrittenDetector.write"]], "imagehandwrittentextrecognizer (class in sparkocr.transformers.image_handwritten_text_recognizer)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer"]], "clear() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.clear"]], "copy() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.copy"]], "explainparam() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.explainParam"]], "explainparams() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.explainParams"]], "extractparammap() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.extractParamMap"]], "getinputcol() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.getInputCol"]], "getordefault() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.getOrDefault"]], "getoutputcol() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.getOutputCol"]], "getparam() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.getParam"]], "hasdefault() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.hasDefault"]], "hasparam() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.hasParam"]], "inputcol (imagehandwrittentextrecognizer attribute)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.inputCol"]], "isdefined() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.isDefined"]], "isset() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.isSet"]], "load() (imagehandwrittentextrecognizer static method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.load"]], "loadonnxmodel() (imagehandwrittentextrecognizer static method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.loadOnnxModel"]], "name (imagehandwrittentextrecognizer attribute)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.name"]], "outputcol (imagehandwrittentextrecognizer attribute)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.outputCol"]], "pretrained() (imagehandwrittentextrecognizer static method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.pretrained"]], "set() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.set"]], "setinputcol() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.setInputCol"]], "setoutputcol() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.setOutputCol"]], "sparkocr.transformers.image_handwritten_text_recognizer": [[174, "module-sparkocr.transformers.image_handwritten_text_recognizer"]], "transform() (imagehandwrittentextrecognizer method)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.transform"]], "uid (imagehandwrittentextrecognizer attribute)": [[174, "sparkocr.transformers.image_handwritten_text_recognizer.ImageHandwrittenTextRecognizer.uid"]], "imagehomogenizelight (class in sparkocr.transformers.image_homogenize_light)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight"]], "clear() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.clear"]], "copy() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.copy"]], "exp_in (imagehomogenizelight attribute)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.exp_in"]], "explainparam() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.explainParam"]], "explainparams() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.explainParams"]], "extractparammap() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.extractParamMap"]], "getexpin() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.getExpIn"]], "getinputcol() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.getInputCol"]], "getordefault() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.getOrDefault"]], "getoutputcol() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.getOutputCol"]], "getparam() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.getParam"]], "getthreshold() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.getThreshold"]], "hasdefault() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.hasDefault"]], "hasparam() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.hasParam"]], "image_homogenization() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.image_homogenization"]], "inputcol (imagehomogenizelight attribute)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.inputCol"]], "isdefined() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.isDefined"]], "isset() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.isSet"]], "keepinput (imagehomogenizelight attribute)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.keepInput"]], "load() (imagehomogenizelight class method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.load"]], "outputcol (imagehomogenizelight attribute)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.outputCol"]], "process_bright() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.process_bright"]], "process_dimmed() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.process_dimmed"]], "read() (imagehomogenizelight class method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.read"]], "save() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.save"]], "set() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.set"]], "setexpin() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.setExpIn"]], "setinputcol() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.setInputCol"]], "setkeepinput() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.setKeepInput"]], "setoutputcol() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.setOutputCol"]], "setparams() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.setParams"]], "setthreshold() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.setThreshold"]], "sparkocr.transformers.image_homogenize_light": [[175, "module-sparkocr.transformers.image_homogenize_light"]], "threshold (imagehomogenizelight attribute)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.threshold"]], "transform() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.transform"]], "transform_image() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.transform_image"]], "uid (imagehomogenizelight attribute)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.uid"]], "write() (imagehomogenizelight method)": [[175, "sparkocr.transformers.image_homogenize_light.ImageHomogenizeLight.write"]], "imagelayoutanalyzer (class in sparkocr.transformers.image_layout_analyzer)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer"]], "clear() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.clear"]], "copy() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.copy"]], "downloadmodeldata (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.downloadModelData"]], "explainparam() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.explainParam"]], "explainparams() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.explainParams"]], "extractparammap() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.extractParamMap"]], "getinputcol() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.getInputCol"]], "getordefault() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.getOrDefault"]], "getoutputcol() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.getOutputCol"]], "getparam() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.getParam"]], "hasdefault() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.hasDefault"]], "hasparam() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.hasParam"]], "inputcol (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.inputCol"]], "isdefined() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.isDefined"]], "isset() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.isSet"]], "language (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.language"]], "load() (imagelayoutanalyzer class method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.load"]], "modeldata (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.modelData"]], "modeltype (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.modelType"]], "ocrenginemode (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.ocrEngineMode"]], "outputcol (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.outputCol"]], "pageiteratorlevel (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.pageIteratorLevel"]], "pagesegmode (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.pageSegMode"]], "read() (imagelayoutanalyzer class method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.read"]], "save() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.save"]], "set() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.set"]], "setdownloadmodeldata() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setDownloadModelData"]], "setinputcol() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setInputCol"]], "setlanguage() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setLanguage"]], "setmodeldata() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setModelData"]], "setmodeltype() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setModelType"]], "setocrenginemode() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setOcrEngineMode"]], "setoutputcol() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setOutputCol"]], "setpageiteratorlevel() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setPageIteratorLevel"]], "setpagesegmode() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setPageSegMode"]], "setusetess4j() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.setUseTess4j"]], "sparkocr.transformers.image_layout_analyzer": [[176, "module-sparkocr.transformers.image_layout_analyzer"]], "transform() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.transform"]], "uid (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.uid"]], "usetess4j (imagelayoutanalyzer attribute)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.useTess4j"]], "write() (imagelayoutanalyzer method)": [[176, "sparkocr.transformers.image_layout_analyzer.ImageLayoutAnalyzer.write"]], "imagemorphologyoperation1 (class in sparkocr.transformers.image_morphology_operartion1)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1"]], "clear() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.clear"]], "copy() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.copy"]], "explainparam() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.explainParam"]], "explainparams() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.explainParams"]], "extractparammap() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.extractParamMap"]], "getinputcol() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.getInputCol"]], "getordefault() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.getOrDefault"]], "getoutputcol() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.getOutputCol"]], "getparam() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.getParam"]], "hasdefault() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.hasDefault"]], "hasparam() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.hasParam"]], "inputcol (imagemorphologyoperation1 attribute)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.inputCol"]], "isdefined() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.isDefined"]], "isset() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.isSet"]], "kernelsize (imagemorphologyoperation1 attribute)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.kernelSize"]], "load() (imagemorphologyoperation1 class method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.load"]], "operation (imagemorphologyoperation1 attribute)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.operation"]], "outputcol (imagemorphologyoperation1 attribute)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.outputCol"]], "read() (imagemorphologyoperation1 class method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.read"]], "save() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.save"]], "set() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.set"]], "setinputcol() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.setInputCol"]], "setkernelsize() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.setKernelSize"]], "setoperation() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.setOperation"]], "setoutputcol() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.setOutputCol"]], "sparkocr.transformers.image_morphology_operartion1": [[177, "module-sparkocr.transformers.image_morphology_operartion1"]], "transform() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.transform"]], "uid (imagemorphologyoperation1 attribute)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.uid"]], "write() (imagemorphologyoperation1 method)": [[177, "sparkocr.transformers.image_morphology_operartion1.ImageMorphologyOperation1.write"]], "imagemorphologyoperation (class in sparkocr.transformers.image_morphology_operation)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation"]], "binary (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.binary"]], "clear() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.clear"]], "copy() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.copy"]], "explainparam() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.explainParam"]], "explainparams() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.explainParams"]], "extractparammap() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.extractParamMap"]], "getbinary() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getBinary"]], "getinputcol() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getInputCol"]], "getkernel() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getKernel"]], "getkernelshape() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getKernelShape"]], "getkernelsize() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getKernelSize"]], "getoperation() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getOperation"]], "getordefault() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getOrDefault"]], "getoutputcol() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getOutputCol"]], "getparam() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.getParam"]], "hasdefault() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.hasDefault"]], "hasparam() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.hasParam"]], "inputcol (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.inputCol"]], "isdefined() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.isDefined"]], "isset() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.isSet"]], "keepinput (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.keepInput"]], "kernelshape (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.kernelShape"]], "kernelsize (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.kernelSize"]], "load() (imagemorphologyoperation class method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.load"]], "operation (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.operation"]], "outputcol (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.outputCol"]], "read() (imagemorphologyoperation class method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.read"]], "save() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.save"]], "set() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.set"]], "setbinary() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setBinary"]], "setinputcol() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setInputCol"]], "setkeepinput() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setKeepInput"]], "setkernelshape() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setKernelShape"]], "setkernelsize() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setKernelSize"]], "setoperation() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setOperation"]], "setoutputcol() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setOutputCol"]], "setparams() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.setParams"]], "sparkocr.transformers.image_morphology_operation": [[178, "module-sparkocr.transformers.image_morphology_operation"]], "transform() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.transform"]], "transform_image() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.transform_image"]], "uid (imagemorphologyoperation attribute)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.uid"]], "write() (imagemorphologyoperation method)": [[178, "sparkocr.transformers.image_morphology_operation.ImageMorphologyOperation.write"]], "imagenoisescorer (class in sparkocr.transformers.image_noise_scorer)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer"]], "byregions (imagenoisescorer attribute)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.byRegions"]], "clear() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.clear"]], "copy() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.copy"]], "explainparam() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.explainParam"]], "explainparams() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.explainParams"]], "extractparammap() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.extractParamMap"]], "getinputcol() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.getInputCol"]], "getordefault() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.getOrDefault"]], "getoutputcol() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.getOutputCol"]], "getparam() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.getParam"]], "hasdefault() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.hasDefault"]], "hasparam() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.hasParam"]], "inputcol (imagenoisescorer attribute)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.inputCol"]], "inputregionscol (imagenoisescorer attribute)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.inputRegionsCol"]], "isdefined() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.isDefined"]], "isset() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.isSet"]], "load() (imagenoisescorer class method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.load"]], "method (imagenoisescorer attribute)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.method"]], "outputcol (imagenoisescorer attribute)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.outputCol"]], "read() (imagenoisescorer class method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.read"]], "save() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.save"]], "set() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.set"]], "setbyregions() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.setByRegions"]], "setinputcol() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.setInputCol"]], "setinputregionscol() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.setInputRegionsCol"]], "setmethod() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.setMethod"]], "setoutputcol() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.setOutputCol"]], "sparkocr.transformers.image_noise_scorer": [[179, "module-sparkocr.transformers.image_noise_scorer"]], "transform() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.transform"]], "uid (imagenoisescorer attribute)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.uid"]], "write() (imagenoisescorer method)": [[179, "sparkocr.transformers.image_noise_scorer.ImageNoiseScorer.write"]], "imageremovebackground (class in sparkocr.transformers.image_remove_background)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground"]], "bl (imageremovebackground attribute)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.bl"]], "clear() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.clear"]], "copy() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.copy"]], "explainparam() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.explainParam"]], "explainparams() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.explainParams"]], "extractparammap() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.extractParamMap"]], "getbl() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.getBL"]], "getinputcol() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.getInputCol"]], "getordefault() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.getOrDefault"]], "getoutputcol() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.getOutputCol"]], "getparam() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.getParam"]], "hasdefault() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.hasDefault"]], "hasparam() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.hasParam"]], "img_threshold() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.img_threshold"]], "inputcol (imageremovebackground attribute)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.inputCol"]], "isdefined() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.isDefined"]], "isset() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.isSet"]], "keepinput (imageremovebackground attribute)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.keepInput"]], "load() (imageremovebackground class method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.load"]], "merge() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.merge"]], "outputcol (imageremovebackground attribute)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.outputCol"]], "read() (imageremovebackground class method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.read"]], "save() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.save"]], "scale() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.scale"]], "set() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.set"]], "setbl() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.setBL"]], "setinputcol() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.setInputCol"]], "setkeepinput() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.setKeepInput"]], "setoutputcol() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.setOutputCol"]], "setparams() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.setParams"]], "sparkocr.transformers.image_remove_background": [[180, "module-sparkocr.transformers.image_remove_background"]], "transform() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.transform"]], "transform_image() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.transform_image"]], "uid (imageremovebackground attribute)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.uid"]], "write() (imageremovebackground method)": [[180, "sparkocr.transformers.image_remove_background.ImageRemoveBackground.write"]], "imageremoveglare (class in sparkocr.transformers.image_remove_glare)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare"]], "clear() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.clear"]], "copy() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.copy"]], "explainparam() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.explainParam"]], "explainparams() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.explainParams"]], "extractparammap() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.extractParamMap"]], "getinputcol() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.getInputCol"]], "getordefault() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.getOrDefault"]], "getoutputcol() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.getOutputCol"]], "getparam() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.getParam"]], "hasdefault() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.hasDefault"]], "hasparam() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.hasParam"]], "inputcol (imageremoveglare attribute)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.inputCol"]], "isdefined() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.isDefined"]], "isset() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.isSet"]], "keepinput (imageremoveglare attribute)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.keepInput"]], "load() (imageremoveglare class method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.load"]], "outputcol (imageremoveglare attribute)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.outputCol"]], "read() (imageremoveglare class method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.read"]], "save() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.save"]], "set() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.set"]], "setinputcol() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.setInputCol"]], "setkeepinput() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.setKeepInput"]], "setoutputcol() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.setOutputCol"]], "setparams() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.setParams"]], "sparkocr.transformers.image_remove_glare": [[181, "module-sparkocr.transformers.image_remove_glare"]], "transform() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.transform"]], "transform_image() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.transform_image"]], "uid (imageremoveglare attribute)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.uid"]], "write() (imageremoveglare method)": [[181, "sparkocr.transformers.image_remove_glare.ImageRemoveGlare.write"]], "dot_ratio (in module sparkocr.transformers.image_remove_objects)": [[182, "sparkocr.transformers.image_remove_objects.DOT_RATIO"]], "imageremoveobjects (class in sparkocr.transformers.image_remove_objects)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects"]], "point_size (in module sparkocr.transformers.image_remove_objects)": [[182, "sparkocr.transformers.image_remove_objects.POINT_SIZE"]], "clear() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.clear"]], "connectivityhole (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.connectivityHole"]], "connectivitymaxobject (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.connectivityMaxObject"]], "connectivityobject (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.connectivityObject"]], "copy() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.copy"]], "explainparam() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.explainParam"]], "explainparams() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.explainParams"]], "extractparammap() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.extractParamMap"]], "getconnectivityhole() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getConnectivityHole"]], "getconnectivitymaxobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getConnectivityMaxObject"]], "getconnectivityobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getConnectivityObject"]], "getinputcol() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getInputCol"]], "getmaxsizeobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getMaxSizeObject"]], "getminsizefont() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getMinSizeFont"]], "getminsizehole() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getMinSizeHole"]], "getminsizeobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getMinSizeObject"]], "getordefault() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getOrDefault"]], "getoutputcol() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getOutputCol"]], "getparam() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.getParam"]], "hasdefault() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.hasDefault"]], "hasparam() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.hasParam"]], "inputcol (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.inputCol"]], "isdefined() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.isDefined"]], "isset() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.isSet"]], "keepinput (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.keepInput"]], "load() (imageremoveobjects class method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.load"]], "maxsizeobject (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.maxSizeObject"]], "minsizefont (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.minSizeFont"]], "minsizehole (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.minSizeHole"]], "minsizeobject (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.minSizeObject"]], "outputcol (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.outputCol"]], "read() (imageremoveobjects class method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.read"]], "save() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.save"]], "set() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.set"]], "setconnectivityhole() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setConnectivityHole"]], "setconnectivitymaxobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setConnectivityMaxObject"]], "setconnectivityobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setConnectivityObject"]], "setinputcol() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setInputCol"]], "setkeepinput() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setKeepInput"]], "setmaxsizeobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setMaxSizeObject"]], "setminsizefont() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setMinSizeFont"]], "setminsizehole() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setMinSizeHole"]], "setminsizeobject() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setMinSizeObject"]], "setoutputcol() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setOutputCol"]], "setparams() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.setParams"]], "sparkocr.transformers.image_remove_objects": [[182, "module-sparkocr.transformers.image_remove_objects"]], "transform() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.transform"]], "transform_image() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.transform_image"]], "uid (imageremoveobjects attribute)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.uid"]], "write() (imageremoveobjects method)": [[182, "sparkocr.transformers.image_remove_objects.ImageRemoveObjects.write"]], "imagescaler (class in sparkocr.transformers.image_scaler)": [[183, "sparkocr.transformers.image_scaler.ImageScaler"]], "clear() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.clear"]], "copy() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.copy"]], "explainparam() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.explainParam"]], "explainparams() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.explainParams"]], "extractparammap() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.extractParamMap"]], "getinputcol() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.getInputCol"]], "getordefault() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.getOrDefault"]], "getoutputcol() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.getOutputCol"]], "getparam() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.getParam"]], "hasdefault() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.hasDefault"]], "hasparam() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.hasParam"]], "height (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.height"]], "heightcol (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.heightCol"]], "inputcol (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.inputCol"]], "isdefined() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.isDefined"]], "isset() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.isSet"]], "keepratio (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.keepRatio"]], "load() (imagescaler class method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.load"]], "outputcol (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.outputCol"]], "read() (imagescaler class method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.read"]], "save() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.save"]], "scalefactor (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.scaleFactor"]], "set() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.set"]], "setheight() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setHeight"]], "setheightcol() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setHeightCol"]], "setinputcol() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setInputCol"]], "setkeepratio() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setKeepRatio"]], "setoutputcol() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setOutputCol"]], "setscalefactor() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setScaleFactor"]], "setwidth() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setWidth"]], "setwidthcol() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.setWidthCol"]], "sparkocr.transformers.image_scaler": [[183, "module-sparkocr.transformers.image_scaler"]], "transform() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.transform"]], "uid (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.uid"]], "width (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.width"]], "widthcol (imagescaler attribute)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.widthCol"]], "write() (imagescaler method)": [[183, "sparkocr.transformers.image_scaler.ImageScaler.write"]], "imageskewcorrector (class in sparkocr.transformers.image_skew_corrector)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector"]], "automaticskewcorrection (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.automaticSkewCorrection"]], "clear() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.clear"]], "copy() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.copy"]], "explainparam() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.explainParam"]], "explainparams() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.explainParams"]], "extractparammap() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.extractParamMap"]], "getinputcol() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.getInputCol"]], "getordefault() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.getOrDefault"]], "getoutputcol() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.getOutputCol"]], "getparam() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.getParam"]], "halfangle (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.halfAngle"]], "hasdefault() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.hasDefault"]], "hasparam() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.hasParam"]], "imagetype (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.imageType"]], "inputcol (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.inputCol"]], "isdefined() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.isDefined"]], "isset() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.isSet"]], "load() (imageskewcorrector class method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.load"]], "outputcol (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.outputCol"]], "read() (imageskewcorrector class method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.read"]], "resolution (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.resolution"]], "rotationangle (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.rotationAngle"]], "save() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.save"]], "set() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.set"]], "setautomaticskewcorrection() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.setAutomaticSkewCorrection"]], "sethalfangle() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.setHalfAngle"]], "setimagetype() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.setImageType"]], "setinputcol() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.setInputCol"]], "setoutputcol() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.setOutputCol"]], "setresolution() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.setResolution"]], "setrotationangle() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.setRotationAngle"]], "sparkocr.transformers.image_skew_corrector": [[184, "module-sparkocr.transformers.image_skew_corrector"]], "transform() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.transform"]], "uid (imageskewcorrector attribute)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.uid"]], "write() (imageskewcorrector method)": [[184, "sparkocr.transformers.image_skew_corrector.ImageSkewCorrector.write"]], "imagesplitregions (class in sparkocr.transformers.image_split_regions)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions"]], "clear() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.clear"]], "copy() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.copy"]], "dropcols (imagesplitregions attribute)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.dropCols"]], "explainparam() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.explainParam"]], "explainparams() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.explainParams"]], "extractparammap() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.extractParamMap"]], "getinputcol() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.getInputCol"]], "getordefault() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.getOrDefault"]], "getoutputcol() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.getOutputCol"]], "getparam() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.getParam"]], "hasdefault() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.hasDefault"]], "hasparam() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.hasParam"]], "imagetype (imagesplitregions attribute)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.imageType"]], "inputcol (imagesplitregions attribute)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.inputCol"]], "inputregionscol (imagesplitregions attribute)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.inputRegionsCol"]], "isdefined() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.isDefined"]], "isset() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.isSet"]], "load() (imagesplitregions class method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.load"]], "outputcol (imagesplitregions attribute)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.outputCol"]], "read() (imagesplitregions class method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.read"]], "save() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.save"]], "set() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.set"]], "setdropcols() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.setDropCols"]], "setimagetype() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.setImageType"]], "setinputcol() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.setInputCol"]], "setinputregionscol() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.setInputRegionsCol"]], "setoutputcol() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.setOutputCol"]], "sparkocr.transformers.image_split_regions": [[185, "module-sparkocr.transformers.image_split_regions"]], "transform() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.transform"]], "uid (imagesplitregions attribute)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.uid"]], "write() (imagesplitregions method)": [[185, "sparkocr.transformers.image_split_regions.ImageSplitRegions.write"]], "cell_detection_algos (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.CELL_DETECTION_ALGOS"]], "imagetablecelldetector (class in sparkocr.transformers.image_table_cell_detector)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector"]], "algoparams (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.algoParams"]], "algotype (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.algoType"]], "clear() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.clear"]], "copy() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.copy"]], "createtransformfunc() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.createTransformFunc"]], "cut_header() (in module sparkocr.transformers.image_table_cell_detector)": [[186, "sparkocr.transformers.image_table_cell_detector.cut_header"]], "detect_lines() (in module sparkocr.transformers.image_table_cell_detector)": [[186, "sparkocr.transformers.image_table_cell_detector.detect_lines"]], "drawdetectedlines (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.drawDetectedLines"]], "explainparam() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.explainParam"]], "explainparams() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.explainParams"]], "extractparammap() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.extractParamMap"]], "getalgoparams() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getAlgoParams"]], "getalgotype() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getAlgoType"]], "getdrawdetectedlines() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getDrawDetectedLines"]], "getinputcol() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getInputCol"]], "getkeeporiginallines() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getKeepOriginalLines"]], "getordefault() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getOrDefault"]], "getoutputcol() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getOutputCol"]], "getoutputimagecol() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getOutputImageCol"]], "getparam() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.getParam"]], "get_cells() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.get_cells"]], "get_cells_morph() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.get_cells_morph"]], "get_cells_opencv() (in module sparkocr.transformers.image_table_cell_detector)": [[186, "sparkocr.transformers.image_table_cell_detector.get_cells_opencv"]], "hasdefault() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.hasDefault"]], "hasparam() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.hasParam"]], "inputcol (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.inputCol"]], "isdefined() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.isDefined"]], "isset() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.isSet"]], "keepinput (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.keepInput"]], "keeporiginallines (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.keepOriginalLines"]], "load() (imagetablecelldetector class method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.load"]], "morph_default_params (in module sparkocr.transformers.image_table_cell_detector)": [[186, "sparkocr.transformers.image_table_cell_detector.morph_default_params"]], "name (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.name"]], "normalize_image_size() (in module sparkocr.transformers.image_table_cell_detector)": [[186, "sparkocr.transformers.image_table_cell_detector.normalize_image_size"]], "outputcol (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.outputCol"]], "outputimagecol (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.outputImageCol"]], "read() (imagetablecelldetector class method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.read"]], "remove_lines() (in module sparkocr.transformers.image_table_cell_detector)": [[186, "sparkocr.transformers.image_table_cell_detector.remove_lines"]], "save() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.save"]], "set() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.set"]], "setalgoparams() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setAlgoParams"]], "setalgotype() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setAlgoType"]], "setdrawdetectedlines() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setDrawDetectedLines"]], "setinputcol() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setInputCol"]], "setkeepinput() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setKeepInput"]], "setkeeporiginallines() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setKeepOriginalLines"]], "setoutputcol() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setOutputCol"]], "setoutputimagecol() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.setOutputImageCol"]], "sparkocr.transformers.image_table_cell_detector": [[186, "module-sparkocr.transformers.image_table_cell_detector"]], "transform() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.transform"]], "uid (imagetablecelldetector attribute)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.uid"]], "write() (imagetablecelldetector method)": [[186, "sparkocr.transformers.image_table_cell_detector.ImageTableCellDetector.write"]], "imagetabledetector (class in sparkocr.transformers.image_table_detector)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector"]], "applycorrection (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.applyCorrection"]], "clear() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.clear"]], "copy() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.copy"]], "explainparam() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.explainParam"]], "explainparams() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.explainParams"]], "extractparammap() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.extractParamMap"]], "getinputcol() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.getInputCol"]], "getordefault() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.getOrDefault"]], "getoutputcol() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.getOutputCol"]], "getparam() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.getParam"]], "hasdefault() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.hasDefault"]], "hasparam() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.hasParam"]], "inputcol (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.inputCol"]], "isdefined() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.isDefined"]], "isset() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.isSet"]], "labels (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.labels"]], "load() (imagetabledetector static method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.load"]], "loadonnxmodel() (imagetabledetector static method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.loadONNXModel"]], "name (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.name"]], "outputcol (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.outputCol"]], "outputlabels (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.outputLabels"]], "pretrained() (imagetabledetector static method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.pretrained"]], "read() (imagetabledetector class method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.read"]], "save() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.save"]], "savemodel() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.saveModel"]], "scaleheighttocol (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.scaleHeightToCol"]], "scalewidthtocol (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.scaleWidthToCol"]], "scorethreshold (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.scoreThreshold"]], "set() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.set"]], "setapplycorrection() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setApplyCorrection"]], "setinputcol() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setInputCol"]], "setlabels() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setLabels"]], "setoutputcol() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setOutputCol"]], "setoutputlabels() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setOutputLabels"]], "setscaleheighttocol() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setScaleHeightToCol"]], "setscalewidthtocol() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setScaleWidthToCol"]], "setscorethreshold() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.setScoreThreshold"]], "sparkocr.transformers.image_table_detector": [[187, "module-sparkocr.transformers.image_table_detector"]], "transform() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.transform"]], "uid (imagetabledetector attribute)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.uid"]], "write() (imagetabledetector method)": [[187, "sparkocr.transformers.image_table_detector.ImageTableDetector.write"]], "imagetextcleaner (class in sparkocr.transformers.image_text_cleaner)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner"]], "binarize (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.binarize"]], "clear() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.clear"]], "copy() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.copy"]], "explainparam() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.explainParam"]], "explainparams() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.explainParams"]], "extractparammap() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.extractParamMap"]], "getinputcol() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.getInputCol"]], "getordefault() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.getOrDefault"]], "getoutputcol() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.getOutputCol"]], "getparam() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.getParam"]], "hasdefault() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.hasDefault"]], "hasparam() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.hasParam"]], "height (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.height"]], "inputcol (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.inputCol"]], "isdefined() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.isDefined"]], "isset() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.isSet"]], "linkthreshold (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.linkThreshold"]], "load() (imagetextcleaner static method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.load"]], "loadonnxmodel() (imagetextcleaner static method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.loadONNXModel"]], "medianblur (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.medianBlur"]], "name (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.name"]], "outputcol (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.outputCol"]], "padding (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.padding"]], "pretrained() (imagetextcleaner static method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.pretrained"]], "read() (imagetextcleaner class method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.read"]], "save() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.save"]], "savemodel() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.saveModel"]], "set() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.set"]], "setbinarize() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setBinarize"]], "setheight() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setHeight"]], "setinputcol() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setInputCol"]], "setlinkthreshold() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setLinkThreshold"]], "setmedianblur() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setMedianBlur"]], "setoutputcol() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setOutputCol"]], "setpadding() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setPadding"]], "setsizethreshold() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setSizeThreshold"]], "settextthreshold() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setTextThreshold"]], "setwidth() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.setWidth"]], "sizethreshold (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.sizeThreshold"]], "sparkocr.transformers.image_text_cleaner": [[188, "module-sparkocr.transformers.image_text_cleaner"]], "textthreshold (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.textThreshold"]], "transform() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.transform"]], "uid (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.uid"]], "width (imagetextcleaner attribute)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.width"]], "write() (imagetextcleaner method)": [[188, "sparkocr.transformers.image_text_cleaner.ImageTextCleaner.write"]], "imagetodicom (class in sparkocr.transformers.image_to_dicom)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom"]], "clear() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.clear"]], "copy() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.copy"]], "explainparam() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.explainParam"]], "explainparams() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.explainParams"]], "extractparammap() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.extractParamMap"]], "getinputcol() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.getInputCol"]], "getordefault() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.getOrDefault"]], "getoutputcol() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.getOutputCol"]], "getparam() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.getParam"]], "hasdefault() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.hasDefault"]], "hasparam() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.hasParam"]], "inputcol (imagetodicom attribute)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.inputCol"]], "inputmetadata (imagetodicom attribute)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.inputMetadata"]], "isdefined() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.isDefined"]], "isset() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.isSet"]], "keepinput (imagetodicom attribute)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.keepInput"]], "load() (imagetodicom class method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.load"]], "origincol (imagetodicom attribute)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.originCol"]], "outputcol (imagetodicom attribute)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.outputCol"]], "read() (imagetodicom class method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.read"]], "save() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.save"]], "set() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.set"]], "setinputcol() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.setInputCol"]], "setinputmetadata() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.setInputMetadata"]], "setkeepinput() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.setKeepInput"]], "setorigincol() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.setOriginCol"]], "setoutputcol() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.setOutputCol"]], "sparkocr.transformers.image_to_dicom": [[189, "module-sparkocr.transformers.image_to_dicom"]], "transform() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.transform"]], "uid (imagetodicom attribute)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.uid"]], "write() (imagetodicom method)": [[189, "sparkocr.transformers.image_to_dicom.ImageToDicom.write"]], "imagetohocr (class in sparkocr.transformers.image_to_hocr)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr"]], "clear() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.clear"]], "copy() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.copy"]], "downloadmodeldata (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.downloadModelData"]], "explainparam() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.explainParam"]], "explainparams() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.explainParams"]], "extractparammap() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.extractParamMap"]], "getinputcol() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.getInputCol"]], "getordefault() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.getOrDefault"]], "getoutputcol() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.getOutputCol"]], "getparam() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.getParam"]], "hasdefault() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.hasDefault"]], "hasparam() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.hasParam"]], "ignoreresolution (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.ignoreResolution"]], "inputcol (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.inputCol"]], "isdefined() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.isDefined"]], "isset() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.isSet"]], "language (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.language"]], "load() (imagetohocr class method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.load"]], "modeldata (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.modelData"]], "modeltype (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.modelType"]], "ocrenginemode (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.ocrEngineMode"]], "ocrparams (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.ocrParams"]], "outputcol (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.outputCol"]], "pageiteratorlevel (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.pageIteratorLevel"]], "pagesegmode (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.pageSegMode"]], "read() (imagetohocr class method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.read"]], "save() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.save"]], "set() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.set"]], "setdownloadmodeldata() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setDownloadModelData"]], "setignoreresolution() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setIgnoreResolution"]], "setinputcol() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setInputCol"]], "setlanguage() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setLanguage"]], "setmodeldata() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setModelData"]], "setmodeltype() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setModelType"]], "setocrenginemode() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setOcrEngineMode"]], "setocrparams() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setOcrParams"]], "setoutputcol() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setOutputCol"]], "setpageiteratorlevel() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setPageIteratorLevel"]], "setpagesegmode() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setPageSegMode"]], "setusetess4j() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.setUseTess4j"]], "sparkocr.transformers.image_to_hocr": [[190, "module-sparkocr.transformers.image_to_hocr"]], "transform() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.transform"]], "uid (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.uid"]], "usetess4j (imagetohocr attribute)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.useTess4j"]], "write() (imagetohocr method)": [[190, "sparkocr.transformers.image_to_hocr.ImageToHocr.write"]], "imagetotext (class in sparkocr.transformers.image_to_text)": [[191, "sparkocr.transformers.image_to_text.ImageToText"]], "clear() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.clear"]], "confidencecol (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.confidenceCol"]], "confidencethreshold (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.confidenceThreshold"]], "copy() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.copy"]], "downloadmodeldata (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.downloadModelData"]], "explainparam() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.explainParam"]], "explainparams() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.explainParams"]], "extractparammap() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.extractParamMap"]], "getinputcol() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.getInputCol"]], "getordefault() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.getOrDefault"]], "getoutputcol() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.getOutputCol"]], "getparam() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.getParam"]], "hasdefault() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.hasDefault"]], "hasparam() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.hasParam"]], "ignoreresolution (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.ignoreResolution"]], "includeconfidence (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.includeConfidence"]], "inputcol (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.inputCol"]], "isdefined() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.isDefined"]], "isset() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.isSet"]], "keeplayout (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.keepLayout"]], "language (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.language"]], "load() (imagetotext class method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.load"]], "modeldata (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.modelData"]], "modeltype (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.modelType"]], "ocrenginemode (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.ocrEngineMode"]], "ocrparams (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.ocrParams"]], "outputcol (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.outputCol"]], "outputspacecharacterwidth (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.outputSpaceCharacterWidth"]], "pageiteratorlevel (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.pageIteratorLevel"]], "pagesegmode (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.pageSegMode"]], "pdfcoordinates (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.pdfCoordinates"]], "positionscol (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.positionsCol"]], "read() (imagetotext class method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.read"]], "save() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.save"]], "set() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.set"]], "setconfidencecol() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setConfidenceCol"]], "setconfidencethreshold() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setConfidenceThreshold"]], "setdownloadmodeldata() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setDownloadModelData"]], "setignoreresolution() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setIgnoreResolution"]], "setincludeconfidence() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setIncludeConfidence"]], "setinputcol() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setInputCol"]], "setkeeplayout() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setKeepLayout"]], "setlanguage() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setLanguage"]], "setmodeldata() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setModelData"]], "setmodeltype() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setModelType"]], "setocrenginemode() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setOcrEngineMode"]], "setocrparams() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setOcrParams"]], "setoutputcol() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setOutputCol"]], "setoutputspacecharacterwidth() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setOutputSpaceCharacterWidth"]], "setpageiteratorlevel() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setPageIteratorLevel"]], "setpagesegmode() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setPageSegMode"]], "setpdfcoordinates() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setPdfCoordinates"]], "setpositionscol() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setPositionsCol"]], "setusetess4j() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setUseTess4j"]], "setwithspaces() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.setWithSpaces"]], "sparkocr.transformers.image_to_text": [[191, "module-sparkocr.transformers.image_to_text"]], "transform() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.transform"]], "uid (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.uid"]], "usetess4j (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.useTess4j"]], "withspaces (imagetotext attribute)": [[191, "sparkocr.transformers.image_to_text.ImageToText.withSpaces"]], "write() (imagetotext method)": [[191, "sparkocr.transformers.image_to_text.ImageToText.write"]], "imagetransformer (class in sparkocr.transformers.image_transformer)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer"]], "addadaptivethreshold() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addAdaptiveThreshold"]], "addblur() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addBlur"]], "adddilatetransform() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addDilateTransform"]], "adderodetransform() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addErodeTransform"]], "addinvert() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addInvert"]], "addmedianblur() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addMedianBlur"]], "addotsutransform() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addOtsuTransform"]], "addremoveobjects() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addRemoveObjects"]], "addscalingtransform() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.addScalingTransform"]], "clear() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.clear"]], "copy() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.copy"]], "explainparam() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.explainParam"]], "explainparams() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.explainParams"]], "extractparammap() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.extractParamMap"]], "getinputcol() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.getInputCol"]], "getordefault() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.getOrDefault"]], "getoutputcol() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.getOutputCol"]], "getparam() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.getParam"]], "hasdefault() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.hasDefault"]], "hasparam() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.hasParam"]], "imagetype (imagetransformer attribute)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.imageType"]], "inputcol (imagetransformer attribute)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.inputCol"]], "isdefined() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.isDefined"]], "isset() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.isSet"]], "load() (imagetransformer class method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.load"]], "outputcol (imagetransformer attribute)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.outputCol"]], "read() (imagetransformer class method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.read"]], "save() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.save"]], "set() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.set"]], "setimagetype() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.setImageType"]], "setinputcol() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.setInputCol"]], "setoutputcol() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.setOutputCol"]], "setparams() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.setParams"]], "sparkocr.transformers.image_transformer": [[192, "module-sparkocr.transformers.image_transformer"]], "transform() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.transform"]], "uid (imagetransformer attribute)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.uid"]], "write() (imagetransformer method)": [[192, "sparkocr.transformers.image_transformer.ImageTransformer.write"]], "sparkocr.transformers": [[193, "module-sparkocr.transformers"]], "imageinpainting (class in sparkocr.transformers.inpainting.image_inpainting)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting"]], "imageinpaintingwriter (class in sparkocr.transformers.inpainting.image_inpainting)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter"]], "inferencecls (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.InferenceCls"]], "clear() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.clear"]], "copy() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.copy"]], "explainparam() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.explainParam"]], "explainparams() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.explainParams"]], "exploding_wrap() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.exploding_wrap"]], "extractjsonparams() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.extractJsonParams"]], "extractjsonparams() (imageinpaintingwriter static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.extractJsonParams"]], "extractparammap() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.extractParamMap"]], "forceprocessing (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.forceProcessing"]], "getinputcol() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.getInputCol"]], "getmodelpath() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.getModelPath"]], "getordefault() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.getOrDefault"]], "getoutputcol() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.getOutputCol"]], "getparam() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.getParam"]], "hasdefault() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.hasDefault"]], "hasparam() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.hasParam"]], "height (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.height"]], "inpaint_image() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.inpaint_image"]], "inputcol (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.inputCol"]], "inputregionscol (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.inputRegionsCol"]], "instance (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.instance"]], "instance (imageinpaintingwriter attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.instance"]], "isdefined() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.isDefined"]], "isset() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.isSet"]], "keepinput (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.keepInput"]], "load() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.load"]], "load_model_objects() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.load_model_objects"]], "name (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.name"]], "option() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.option"]], "option() (imageinpaintingwriter method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.option"]], "optionmap (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.optionMap"]], "optionmap (imageinpaintingwriter attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.optionMap"]], "origincol (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.originCol"]], "outputcol (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.outputCol"]], "overwrite() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.overwrite"]], "overwrite() (imageinpaintingwriter method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.overwrite"]], "pretrained() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.pretrained"]], "process_region_information() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.process_region_information"]], "read() (imageinpainting class method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.read"]], "save() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.save"]], "save() (imageinpaintingwriter method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.save"]], "saveimpl() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.saveImpl"]], "saveimpl() (imageinpaintingwriter method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.saveImpl"]], "savemetadata() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.saveMetadata"]], "savemetadata() (imageinpaintingwriter static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.saveMetadata"]], "savemodel() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.saveModel"]], "session() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.session"]], "session() (imageinpaintingwriter method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.session"]], "set() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.set"]], "setforceprocessing() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setForceProcessing"]], "setheight() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setHeight"]], "setinputcol() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setInputCol"]], "setinputregionscol() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setInputRegionsCol"]], "setkeepinput() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setKeepInput"]], "setorigincol() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setOriginCol"]], "setoutputcol() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setOutputCol"]], "setusegpu() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setUseGPU"]], "setwidth() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.setWidth"]], "shouldoverwrite (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.shouldOverwrite"]], "shouldoverwrite (imageinpaintingwriter attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpaintingWriter.shouldOverwrite"]], "sparkocr.transformers.inpainting.image_inpainting": [[194, "module-sparkocr.transformers.inpainting.image_inpainting"]], "transform() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.transform"]], "transform_image() (imageinpainting static method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.transform_image"]], "uid (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.uid"]], "usegpu (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.useGPU"]], "width (imageinpainting attribute)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.width"]], "write() (imageinpainting method)": [[194, "sparkocr.transformers.inpainting.image_inpainting.ImageInpainting.write"]], "sparkocr.transformers.inpainting": [[195, "module-sparkocr.transformers.inpainting"]], "classes (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.CLASSES"]], "classes_valid (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.CLASSES_VALID"]], "hocrtofeatures (class in sparkocr.transformers.ner.hocr_to_features)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures"]], "voca (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.VOCA"]], "bio_class_idx_dic (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.bio_class_idx_dic"]], "bio_class_names (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.bio_class_names"]], "class_idx_dic (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.class_idx_dic"]], "class_names (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.class_names"]], "clear() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.clear"]], "cls_token_id (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.cls_token_id"]], "copy() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.copy"]], "explainparam() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.explainParam"]], "explainparams() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.explainParams"]], "extractparammap() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.extractParamMap"]], "getinputcols() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.getInputCols"]], "getordefault() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.getOrDefault"]], "getoutputcol() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.getOutputCol"]], "getparam() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.getParam"]], "get_input_col() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.get_input_col"]], "getitem_geo() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.getitem_geo"]], "hasdefault() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.hasDefault"]], "hasparam() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.hasParam"]], "img_h (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.img_h"]], "img_w (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.img_w"]], "inputcols (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.inputCols"]], "isdefined() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.isDefined"]], "isset() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.isSet"]], "keepinput (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.keepInput"]], "load() (hocrtofeatures class method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.load"]], "max_block_num (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.max_block_num"]], "max_seq_length (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.max_seq_length"]], "outputcol (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.outputCol"]], "pad_token_id (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.pad_token_id"]], "read() (hocrtofeatures class method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.read"]], "save() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.save"]], "sep_token_id (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.sep_token_id"]], "set() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.set"]], "setinputcols() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.setInputCols"]], "setkeepinput() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.setKeepInput"]], "setoutputcol() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.setOutputCol"]], "sparkocr.transformers.ner.hocr_to_features": [[196, "module-sparkocr.transformers.ner.hocr_to_features"]], "to_geo() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.to_geo"]], "tokens_to_funsd_json() (hocrtofeatures static method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.tokens_to_funsd_json"]], "transform() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.transform"]], "transform_hocr() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.transform_hocr"]], "uid (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.uid"]], "unk_token_id (hocrtofeatures attribute)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.unk_token_id"]], "write() (hocrtofeatures method)": [[196, "sparkocr.transformers.ner.hocr_to_features.HocrToFeatures.write"]], "sparkocr.transformers.ner": [[197, "module-sparkocr.transformers.ner"]], "visualdocumentner (class in sparkocr.transformers.ner.visual_document_ner)": [[198, "sparkocr.transformers.ner.visual_document_ner.VisualDocumentNer"]], "pretrained() (visualdocumentner static method)": [[198, "sparkocr.transformers.ner.visual_document_ner.VisualDocumentNer.pretrained"]], "sparkocr.transformers.ner.visual_document_ner": [[198, "module-sparkocr.transformers.ner.visual_document_ner"]], "visualdocumentnergeo (class in sparkocr.transformers.ner.visual_document_ner_geo)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo"]], "clear() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.clear"]], "copy() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.copy"]], "explainparam() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.explainParam"]], "explainparams() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.explainParams"]], "extractparammap() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.extractParamMap"]], "getinputcols() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.getInputCols"]], "getordefault() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.getOrDefault"]], "getoutputcol() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.getOutputCol"]], "getparam() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.getParam"]], "hasdefault() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.hasDefault"]], "hasparam() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.hasParam"]], "inputcols (visualdocumentnergeo attribute)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.inputCols"]], "isdefined() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.isDefined"]], "isset() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.isSet"]], "labels (visualdocumentnergeo attribute)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.labels"]], "load() (visualdocumentnergeo static method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.load"]], "loadonnxmodel() (visualdocumentnergeo static method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.loadOnnxModel"]], "name (visualdocumentnergeo attribute)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.name"]], "outputcol (visualdocumentnergeo attribute)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.outputCol"]], "pretrained() (visualdocumentnergeo static method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.pretrained"]], "read() (visualdocumentnergeo class method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.read"]], "save() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.save"]], "savemodel() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.saveModel"]], "set() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.set"]], "setinputcols() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.setInputCols"]], "setlabels() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.setLabels"]], "setmaxsentencelength() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.setMaxSentenceLength"]], "setoutputcol() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.setOutputCol"]], "setwhitelist() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.setWhiteList"]], "sparkocr.transformers.ner.visual_document_ner_geo": [[199, "module-sparkocr.transformers.ner.visual_document_ner_geo"]], "transform() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.transform"]], "uid (visualdocumentnergeo attribute)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.uid"]], "whitelist (visualdocumentnergeo attribute)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.whiteList"]], "write() (visualdocumentnergeo method)": [[199, "sparkocr.transformers.ner.visual_document_ner_geo.VisualDocumentNerGeo.write"]], "visualdocumentnerlayoutlmv1 (class in sparkocr.transformers.ner.visual_document_ner_layoutlm_v1)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1"]], "casesensitive (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.caseSensitive"]], "clear() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.clear"]], "copy() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.copy"]], "explainparam() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.explainParam"]], "explainparams() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.explainParams"]], "extractparammap() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.extractParamMap"]], "getinputcols() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.getInputCols"]], "getordefault() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.getOrDefault"]], "getparam() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.getParam"]], "hasdefault() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.hasDefault"]], "hasparam() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.hasParam"]], "inputcols (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.inputCols"]], "isdefined() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.isDefined"]], "isset() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.isSet"]], "labels (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.labels"]], "load() (visualdocumentnerlayoutlmv1 static method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.load"]], "loadtfmodel() (visualdocumentnerlayoutlmv1 static method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.loadTFModel"]], "maxsentencelength (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.maxSentenceLength"]], "name (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.name"]], "outputcol (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.outputCol"]], "pretrained() (visualdocumentnerlayoutlmv1 static method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.pretrained"]], "read() (visualdocumentnerlayoutlmv1 class method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.read"]], "save() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.save"]], "set() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.set"]], "setcasesensitive() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.setCaseSensitive"]], "setinputcols() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.setInputCols"]], "setlabels() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.setLabels"]], "setmaxsentencelength() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.setMaxSentenceLength"]], "setwhitelist() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.setWhiteList"]], "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1": [[200, "module-sparkocr.transformers.ner.visual_document_ner_layoutlm_v1"]], "transform() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.transform"]], "uid (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.uid"]], "whitelist (visualdocumentnerlayoutlmv1 attribute)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.whiteList"]], "write() (visualdocumentnerlayoutlmv1 method)": [[200, "sparkocr.transformers.ner.visual_document_ner_layoutlm_v1.VisualDocumentNerLayoutLMv1.write"]], "visualdocumentnerlilt (class in sparkocr.transformers.ner.visual_document_ner_lilt)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt"]], "clear() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.clear"]], "copy() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.copy"]], "evalbatchsize (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.evalBatchSize"]], "evalsize (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.evalSize"]], "evalsteps (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.evalSteps"]], "explainparam() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.explainParam"]], "explainparams() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.explainParams"]], "extractparammap() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.extractParamMap"]], "fit() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.fit"]], "getinputcols() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.getInputCols"]], "getordefault() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.getOrDefault"]], "getoutputcol() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.getOutputCol"]], "getparam() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.getParam"]], "hasdefault() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.hasDefault"]], "hasparam() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.hasParam"]], "inputcols (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.inputCols"]], "isdefined() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.isDefined"]], "isset() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.isSet"]], "labelalltokens (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.labelAllTokens"]], "labels (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.labels"]], "learningrate (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.learningRate"]], "load() (visualdocumentnerlilt static method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.load"]], "maxsentencelength (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.maxSentenceLength"]], "maxsteps (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.maxSteps"]], "name (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.name"]], "outputcol (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.outputCol"]], "pretrained() (visualdocumentnerlilt static method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.pretrained"]], "read() (visualdocumentnerlilt class method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.read"]], "removecache (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.removeCache"]], "save() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.save"]], "savemodel() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.saveModel"]], "savesteps (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.saveSteps"]], "set() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.set"]], "setevalsize() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setEvalSize"]], "setevalsteps() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setEvalSteps"]], "setinputcols() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setInputCols"]], "setlabelalltokens() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setLabelAllTokens"]], "setlabels() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setLabels"]], "setlearningrate() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setLearningRate"]], "setmaxsentencelength() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setMaxSentenceLength"]], "setmaxsteps() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setMaxSteps"]], "setmerges() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setMerges"]], "setmergesfile() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setMergesFile"]], "setoutputcol() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setOutputCol"]], "setremovecache() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setRemoveCache"]], "setsavesteps() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setSaveSteps"]], "setstride() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setStride"]], "settrainbatchsize() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setTrainBatchSize"]], "setvocabulary() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setVocabulary"]], "setvocabularyfile() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setVocabularyFile"]], "setwhitelist() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.setWhiteList"]], "sparkocr.transformers.ner.visual_document_ner_lilt": [[201, "module-sparkocr.transformers.ner.visual_document_ner_lilt"]], "stride (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.stride"]], "trainbatchsize (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.trainBatchSize"]], "transform() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.transform"]], "uid (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.uid"]], "whitelist (visualdocumentnerlilt attribute)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.whiteList"]], "write() (visualdocumentnerlilt method)": [[201, "sparkocr.transformers.ner.visual_document_ner_lilt.VisualDocumentNerLilt.write"]], "neroutputcleaner (class in sparkocr.transformers.ner_output_cleaner)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner"]], "clear() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.clear"]], "copy() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.copy"]], "explainparam() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.explainParam"]], "explainparams() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.explainParams"]], "extractparammap() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.extractParamMap"]], "getinputcol() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.getInputCol"]], "getordefault() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.getOrDefault"]], "getoutputcol() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.getOutputCol"]], "getparam() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.getParam"]], "hasdefault() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.hasDefault"]], "hasparam() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.hasParam"]], "ignoreschema (neroutputcleaner attribute)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.ignoreSchema"]], "inputcol (neroutputcleaner attribute)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.inputCol"]], "isdefined() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.isDefined"]], "isset() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.isSet"]], "load() (neroutputcleaner class method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.load"]], "outputcol (neroutputcleaner attribute)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.outputCol"]], "outputnercol (neroutputcleaner attribute)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.outputNerCol"]], "read() (neroutputcleaner class method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.read"]], "save() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.save"]], "set() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.set"]], "setignoreschema() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.setIgnoreSchema"]], "setinputcol() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.setInputCol"]], "setoutputcol() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.setOutputCol"]], "setoutputnercol() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.setOutputNerCol"]], "sparkocr.transformers.ner_output_cleaner": [[202, "module-sparkocr.transformers.ner_output_cleaner"]], "transform() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.transform"]], "uid (neroutputcleaner attribute)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.uid"]], "write() (neroutputcleaner method)": [[202, "sparkocr.transformers.ner_output_cleaner.NerOutputCleaner.write"]], "ocrresourcedownloader (class in sparkocr.transformers.ocr_resource_downloader)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader"]], "clearcache() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.clearCache"]], "downloadendpointmodel() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.downloadEndpointModel"]], "downloadmodel() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.downloadModel"]], "downloadmodeldirectly() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.downloadModelDirectly"]], "downloadpipeline() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.downloadPipeline"]], "showavailableannotators() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.showAvailableAnnotators"]], "showpublicmodels() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.showPublicModels"]], "showpublicpipelines() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.showPublicPipelines"]], "showuncategorizedresources() (ocrresourcedownloader static method)": [[203, "sparkocr.transformers.ocr_resource_downloader.OcrResourceDownloader.showUnCategorizedResources"]], "sparkocr.transformers.ocr_resource_downloader": [[203, "module-sparkocr.transformers.ocr_resource_downloader"]], "hasforceprocessing (class in sparkocr.transformers.params)": [[204, "sparkocr.transformers.params.HasForceProcessing"]], "hasimagetype (class in sparkocr.transformers.params)": [[204, "sparkocr.transformers.params.HasImageType"]], "haskeepinput (class in sparkocr.transformers.params)": [[204, "sparkocr.transformers.params.HasKeepInput"]], "hasocr (class in sparkocr.transformers.params)": [[204, "sparkocr.transformers.params.HasOcr"]], "clear() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.clear"]], "clear() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.clear"]], "clear() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.clear"]], "copy() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.copy"]], "copy() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.copy"]], "copy() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.copy"]], "downloadmodeldata (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.downloadModelData"]], "explainparam() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.explainParam"]], "explainparam() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.explainParam"]], "explainparam() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.explainParam"]], "explainparams() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.explainParams"]], "explainparams() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.explainParams"]], "explainparams() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.explainParams"]], "exploding_wrap() (hasforceprocessing method)": [[204, "sparkocr.transformers.params.HasForceProcessing.exploding_wrap"]], "extractparammap() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.extractParamMap"]], "extractparammap() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.extractParamMap"]], "extractparammap() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.extractParamMap"]], "forceprocessing (hasforceprocessing attribute)": [[204, "sparkocr.transformers.params.HasForceProcessing.forceProcessing"]], "getordefault() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.getOrDefault"]], "getordefault() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.getOrDefault"]], "getordefault() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.getOrDefault"]], "getparam() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.getParam"]], "getparam() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.getParam"]], "getparam() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.getParam"]], "hasdefault() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.hasDefault"]], "hasdefault() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.hasDefault"]], "hasdefault() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.hasDefault"]], "hasparam() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.hasParam"]], "hasparam() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.hasParam"]], "hasparam() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.hasParam"]], "imagetype (hasimagetype attribute)": [[204, "sparkocr.transformers.params.HasImageType.imageType"]], "isdefined() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.isDefined"]], "isdefined() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.isDefined"]], "isdefined() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.isDefined"]], "isset() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.isSet"]], "isset() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.isSet"]], "isset() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.isSet"]], "keepinput (haskeepinput attribute)": [[204, "sparkocr.transformers.params.HasKeepInput.keepInput"]], "language (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.language"]], "modeldata (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.modelData"]], "modeltype (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.modelType"]], "ocrenginemode (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.ocrEngineMode"]], "pageiteratorlevel (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.pageIteratorLevel"]], "pagesegmode (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.pageSegMode"]], "set() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.set"]], "set() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.set"]], "set() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.set"]], "setdownloadmodeldata() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setDownloadModelData"]], "setforceprocessing() (hasforceprocessing method)": [[204, "sparkocr.transformers.params.HasForceProcessing.setForceProcessing"]], "setimagetype() (hasimagetype method)": [[204, "sparkocr.transformers.params.HasImageType.setImageType"]], "setkeepinput() (haskeepinput method)": [[204, "sparkocr.transformers.params.HasKeepInput.setKeepInput"]], "setlanguage() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setLanguage"]], "setmodeldata() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setModelData"]], "setmodeltype() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setModelType"]], "setocrenginemode() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setOcrEngineMode"]], "setpageiteratorlevel() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setPageIteratorLevel"]], "setpagesegmode() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setPageSegMode"]], "setusetess4j() (hasocr method)": [[204, "sparkocr.transformers.params.HasOcr.setUseTess4j"]], "sparkocr.transformers.params": [[204, "module-sparkocr.transformers.params"]], "uid (hasimagetype attribute)": [[204, "sparkocr.transformers.params.HasImageType.uid"]], "uid (haskeepinput attribute)": [[204, "sparkocr.transformers.params.HasKeepInput.uid"]], "uid (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.uid"]], "usetess4j (hasocr attribute)": [[204, "sparkocr.transformers.params.HasOcr.useTess4j"]], "imagetopdf (class in sparkocr.transformers.pdf.image_to_pdf)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf"]], "aggregatepages (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.aggregatePages"]], "clear() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.clear"]], "compression (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.compression"]], "copy() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.copy"]], "explainparam() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.explainParam"]], "explainparams() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.explainParams"]], "extractparammap() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.extractParamMap"]], "getinputcol() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.getInputCol"]], "getordefault() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.getOrDefault"]], "getoutputcol() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.getOutputCol"]], "getparam() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.getParam"]], "hasdefault() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.hasDefault"]], "hasparam() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.hasParam"]], "inputcol (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.inputCol"]], "isdefined() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.isDefined"]], "isset() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.isSet"]], "load() (imagetopdf class method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.load"]], "origincol (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.originCol"]], "outputcol (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.outputCol"]], "pagenumcol (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.pageNumCol"]], "quality (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.quality"]], "read() (imagetopdf class method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.read"]], "resolution (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.resolution"]], "save() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.save"]], "set() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.set"]], "setaggregatepages() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setAggregatePages"]], "setcompression() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setCompression"]], "setinputcol() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setInputCol"]], "setorigincol() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setOriginCol"]], "setoutputcol() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setOutputCol"]], "setpagenumcol() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setPageNumCol"]], "setquality() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setQuality"]], "setresolution() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.setResolution"]], "sparkocr.transformers.pdf.image_to_pdf": [[205, "module-sparkocr.transformers.pdf.image_to_pdf"]], "transform() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.transform"]], "uid (imagetopdf attribute)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.uid"]], "write() (imagetopdf method)": [[205, "sparkocr.transformers.pdf.image_to_pdf.ImageToPdf.write"]], "imagetotextpdf (class in sparkocr.transformers.pdf.image_to_text_pdf)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf"]], "clear() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.clear"]], "copy() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.copy"]], "explainparam() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.explainParam"]], "explainparams() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.explainParams"]], "extractparammap() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.extractParamMap"]], "getinputcol() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.getInputCol"]], "getordefault() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.getOrDefault"]], "getoutputcol() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.getOutputCol"]], "getparam() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.getParam"]], "hasdefault() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.hasDefault"]], "hasparam() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.hasParam"]], "inputcol (imagetotextpdf attribute)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.inputCol"]], "isdefined() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.isDefined"]], "isset() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.isSet"]], "load() (imagetotextpdf class method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.load"]], "ocrparams (imagetotextpdf attribute)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.ocrParams"]], "origincol (imagetotextpdf attribute)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.originCol"]], "outputcol (imagetotextpdf attribute)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.outputCol"]], "pagenumcol (imagetotextpdf attribute)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.pageNumCol"]], "read() (imagetotextpdf class method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.read"]], "save() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.save"]], "set() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.set"]], "setinputcol() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.setInputCol"]], "setocrparams() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.setOcrParams"]], "setorigincol() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.setOriginCol"]], "setoutputcol() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.setOutputCol"]], "setpagenumcol() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.setPageNumCol"]], "sparkocr.transformers.pdf.image_to_text_pdf": [[206, "module-sparkocr.transformers.pdf.image_to_text_pdf"]], "transform() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.transform"]], "uid (imagetotextpdf attribute)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.uid"]], "write() (imagetotextpdf method)": [[206, "sparkocr.transformers.pdf.image_to_text_pdf.ImageToTextPdf.write"]], "sparkocr.transformers.pdf": [[207, "module-sparkocr.transformers.pdf"]], "pdfassembler (class in sparkocr.transformers.pdf.pdf_assembler)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler"]], "clear() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.clear"]], "copy() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.copy"]], "explainparam() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.explainParam"]], "explainparams() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.explainParams"]], "extractparammap() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.extractParamMap"]], "getinputcol() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.getInputCol"]], "getordefault() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.getOrDefault"]], "getoutputcol() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.getOutputCol"]], "getparam() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.getParam"]], "hasdefault() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.hasDefault"]], "hasparam() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.hasParam"]], "inputcol (pdfassembler attribute)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.inputCol"]], "isdefined() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.isDefined"]], "isset() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.isSet"]], "load() (pdfassembler class method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.load"]], "origincol (pdfassembler attribute)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.originCol"]], "outputcol (pdfassembler attribute)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.outputCol"]], "pagenumcol (pdfassembler attribute)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.pageNumCol"]], "read() (pdfassembler class method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.read"]], "save() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.save"]], "set() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.set"]], "setinputcol() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.setInputCol"]], "setorigincol() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.setOriginCol"]], "setoutputcol() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.setOutputCol"]], "setpagenumcol() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.setPageNumCol"]], "sparkocr.transformers.pdf.pdf_assembler": [[208, "module-sparkocr.transformers.pdf.pdf_assembler"]], "transform() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.transform"]], "uid (pdfassembler attribute)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.uid"]], "write() (pdfassembler method)": [[208, "sparkocr.transformers.pdf.pdf_assembler.PdfAssembler.write"]], "pdfdrawregions (class in sparkocr.transformers.pdf.pdf_draw_regions)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions"]], "clear() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.clear"]], "copy() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.copy"]], "explainparam() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.explainParam"]], "explainparams() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.explainParams"]], "extractparammap() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.extractParamMap"]], "getinputcol() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.getInputCol"]], "getordefault() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.getOrDefault"]], "getoutputcol() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.getOutputCol"]], "getparam() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.getParam"]], "hasdefault() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.hasDefault"]], "hasparam() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.hasParam"]], "inputcol (pdfdrawregions attribute)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.inputCol"]], "inputregionscol (pdfdrawregions attribute)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.inputRegionsCol"]], "isdefined() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.isDefined"]], "isset() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.isSet"]], "linewidth (pdfdrawregions attribute)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.lineWidth"]], "load() (pdfdrawregions class method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.load"]], "origincol (pdfdrawregions attribute)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.originCol"]], "outputcol (pdfdrawregions attribute)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.outputCol"]], "read() (pdfdrawregions class method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.read"]], "save() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.save"]], "set() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.set"]], "setinputcol() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.setInputCol"]], "setinputregionscol() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.setInputRegionsCol"]], "setlinewidth() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.setLineWidth"]], "setorigincol() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.setOriginCol"]], "setoutputcol() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.setOutputCol"]], "sparkocr.transformers.pdf.pdf_draw_regions": [[209, "module-sparkocr.transformers.pdf.pdf_draw_regions"]], "transform() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.transform"]], "uid (pdfdrawregions attribute)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.uid"]], "write() (pdfdrawregions method)": [[209, "sparkocr.transformers.pdf.pdf_draw_regions.PdfDrawRegions.write"]], "pdftoform (class in sparkocr.transformers.pdf.pdf_to_form)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm"]], "clear() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.clear"]], "copy() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.copy"]], "explainparam() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.explainParam"]], "explainparams() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.explainParams"]], "extractparammap() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.extractParamMap"]], "getinputcol() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.getInputCol"]], "getordefault() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.getOrDefault"]], "getoutputcol() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.getOutputCol"]], "getparam() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.getParam"]], "hasdefault() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.hasDefault"]], "hasparam() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.hasParam"]], "inputcol (pdftoform attribute)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.inputCol"]], "isdefined() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.isDefined"]], "isset() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.isSet"]], "keepinput (pdftoform attribute)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.keepInput"]], "load() (pdftoform class method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.load"]], "outputcol (pdftoform attribute)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.outputCol"]], "read() (pdftoform class method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.read"]], "save() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.save"]], "set() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.set"]], "setinputcol() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.setInputCol"]], "setkeepinput() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.setKeepInput"]], "setoutputcol() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.setOutputCol"]], "setusefullyqualifiedname() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.setUseFullyQualifiedName"]], "sparkocr.transformers.pdf.pdf_to_form": [[210, "module-sparkocr.transformers.pdf.pdf_to_form"]], "transform() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.transform"]], "uid (pdftoform attribute)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.uid"]], "usefullyqualifiedname (pdftoform attribute)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.useFullyQualifiedName"]], "write() (pdftoform method)": [[210, "sparkocr.transformers.pdf.pdf_to_form.PdfToForm.write"]], "pdftohocr (class in sparkocr.transformers.pdf.pdf_to_hocr)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr"]], "clear() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.clear"]], "copy() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.copy"]], "explainparam() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.explainParam"]], "explainparams() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.explainParams"]], "extractparammap() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.extractParamMap"]], "getinputcol() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.getInputCol"]], "getordefault() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.getOrDefault"]], "getoutputcol() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.getOutputCol"]], "getparam() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.getParam"]], "hasdefault() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.hasDefault"]], "hasparam() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.hasParam"]], "inputcol (pdftohocr attribute)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.inputCol"]], "isdefined() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.isDefined"]], "isset() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.isSet"]], "keeporiginalencoding (pdftohocr attribute)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.keepOriginalEncoding"]], "load() (pdftohocr class method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.load"]], "outputcol (pdftohocr attribute)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.outputCol"]], "pagenumcol (pdftohocr attribute)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.pageNumCol"]], "read() (pdftohocr class method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.read"]], "save() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.save"]], "set() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.set"]], "setinputcol() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.setInputCol"]], "setkeeporiginalencoding() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.setKeepOriginalEncoding"]], "setoutputcol() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.setOutputCol"]], "setpagenumcol() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.setPageNumCol"]], "setsort() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.setSort"]], "setstoresplittedpdf() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.setStoreSplittedPdf"]], "settextstripper() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.setTextStripper"]], "sort (pdftohocr attribute)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.sort"]], "sparkocr.transformers.pdf.pdf_to_hocr": [[211, "module-sparkocr.transformers.pdf.pdf_to_hocr"]], "textstripper (pdftohocr attribute)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.textStripper"]], "transform() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.transform"]], "uid (pdftohocr attribute)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.uid"]], "write() (pdftohocr method)": [[211, "sparkocr.transformers.pdf.pdf_to_hocr.PdfToHocr.write"]], "pdftoimage (class in sparkocr.transformers.pdf.pdf_to_image)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage"]], "binarization (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.binarization"]], "binarizationparams (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.binarizationParams"]], "clear() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.clear"]], "copy() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.copy"]], "explainparam() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.explainParam"]], "explainparams() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.explainParams"]], "extractparammap() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.extractParamMap"]], "fallbackcol (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.fallBackCol"]], "getinputcol() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.getInputCol"]], "getordefault() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.getOrDefault"]], "getoutputcol() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.getOutputCol"]], "getparam() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.getParam"]], "hasdefault() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.hasDefault"]], "hasparam() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.hasParam"]], "imagetype (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.imageType"]], "inputcol (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.inputCol"]], "isdefined() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.isDefined"]], "isset() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.isSet"]], "keepinput (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.keepInput"]], "load() (pdftoimage class method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.load"]], "minsizebeforefallback (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.minSizeBeforeFallback"]], "origincol (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.originCol"]], "outputcol (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.outputCol"]], "pagenumcol (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.pageNumCol"]], "partitionnum (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.partitionNum"]], "partitionnumaftersplit (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.partitionNumAfterSplit"]], "read() (pdftoimage class method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.read"]], "resolution (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.resolution"]], "save() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.save"]], "set() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.set"]], "setbinarization() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setBinarization"]], "setbinarizationparams() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setBinarizationParams"]], "setfallbackcol() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setFallBackCol"]], "setimagetype() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setImageType"]], "setinputcol() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setInputCol"]], "setkeepinput() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setKeepInput"]], "setminsizebeforefallback() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setMinSizeBeforeFallback"]], "setorigincol() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setOriginCol"]], "setoutputcol() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setOutputCol"]], "setpagenumcol() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setPageNumCol"]], "setpartitionnum() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setPartitionNum"]], "setpartitionnumaftersplit() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setPartitionNumAfterSplit"]], "setresolution() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setResolution"]], "setsplitnumbatch() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setSplitNumBatch"]], "setsplitpage() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setSplitPage"]], "setsplittingstategy() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.setSplittingStategy"]], "sparkocr.transformers.pdf.pdf_to_image": [[212, "module-sparkocr.transformers.pdf.pdf_to_image"]], "splitnumbatch (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.splitNumBatch"]], "splitpage (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.splitPage"]], "splittingstategy (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.splittingStategy"]], "transform() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.transform"]], "uid (pdftoimage attribute)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.uid"]], "write() (pdftoimage method)": [[212, "sparkocr.transformers.pdf.pdf_to_image.PdfToImage.write"]], "pdftotext (class in sparkocr.transformers.pdf.pdf_to_text)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText"]], "clear() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.clear"]], "copy() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.copy"]], "explainparam() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.explainParam"]], "explainparams() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.explainParams"]], "extractcoordinates (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.extractCoordinates"]], "extractparammap() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.extractParamMap"]], "getinputcol() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.getInputCol"]], "getordefault() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.getOrDefault"]], "getoutputcol() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.getOutputCol"]], "getparam() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.getParam"]], "hasdefault() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.hasDefault"]], "hasparam() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.hasParam"]], "inputcol (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.inputCol"]], "isdefined() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.isDefined"]], "isset() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.isSet"]], "load() (pdftotext class method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.load"]], "normalizeligatures (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.normalizeLigatures"]], "onlypagenum (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.onlyPageNum"]], "outputcol (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.outputCol"]], "pagenumcol (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.pageNumCol"]], "partitionnum (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.partitionNum"]], "read() (pdftotext class method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.read"]], "save() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.save"]], "set() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.set"]], "setextractcoordinates() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setExtractCoordinates"]], "setinputcol() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setInputCol"]], "setnormalizeligatures() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setNormalizeLigatures"]], "setonlypagenum() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setOnlyPageNum"]], "setoutputcol() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setOutputCol"]], "setpagenumcol() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setPageNumCol"]], "setpartitionnum() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setPartitionNum"]], "setsort() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setSort"]], "setsplitpage() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setSplitPage"]], "setstoresplittedpdf() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setStoreSplittedPdf"]], "settextstripper() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.setTextStripper"]], "sort (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.sort"]], "sparkocr.transformers.pdf.pdf_to_text": [[213, "module-sparkocr.transformers.pdf.pdf_to_text"]], "splitpage (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.splitPage"]], "storesplittedpdf (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.storeSplittedPdf"]], "textstripper (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.textStripper"]], "transform() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.transform"]], "uid (pdftotext attribute)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.uid"]], "write() (pdftotext method)": [[213, "sparkocr.transformers.pdf.pdf_to_text.PdfToText.write"]], "pdftotexttable (class in sparkocr.transformers.pdf.pdf_to_text_table)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable"]], "clear() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.clear"]], "copy() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.copy"]], "explainparam() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.explainParam"]], "explainparams() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.explainParams"]], "extractparammap() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.extractParamMap"]], "getinputcol() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.getInputCol"]], "getordefault() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.getOrDefault"]], "getoutputcol() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.getOutputCol"]], "getparam() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.getParam"]], "guess (pdftotexttable attribute)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.guess"]], "hasdefault() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.hasDefault"]], "hasparam() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.hasParam"]], "inputcol (pdftotexttable attribute)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.inputCol"]], "isdefined() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.isDefined"]], "isset() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.isSet"]], "load() (pdftotexttable static method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.load"]], "method (pdftotexttable attribute)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.method"]], "outputcol (pdftotexttable attribute)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.outputCol"]], "pageindex (pdftotexttable attribute)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.pageIndex"]], "read() (pdftotexttable class method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.read"]], "save() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.save"]], "set() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.set"]], "setguess() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.setGuess"]], "setinputcol() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.setInputCol"]], "setmethod() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.setMethod"]], "setoutputcol() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.setOutputCol"]], "setpageindex() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.setPageIndex"]], "sparkocr.transformers.pdf.pdf_to_text_table": [[214, "module-sparkocr.transformers.pdf.pdf_to_text_table"]], "transform() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.transform"]], "uid (pdftotexttable attribute)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.uid"]], "write() (pdftotexttable method)": [[214, "sparkocr.transformers.pdf.pdf_to_text_table.PdfToTextTable.write"]], "texttopdf (class in sparkocr.transformers.pdf.text_to_pdf)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf"]], "clear() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.clear"]], "copy() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.copy"]], "explainparam() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.explainParam"]], "explainparams() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.explainParams"]], "extractparammap() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.extractParamMap"]], "getinputcol() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.getInputCol"]], "getordefault() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.getOrDefault"]], "getoutputcol() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.getOutputCol"]], "getparam() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.getParam"]], "hasdefault() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.hasDefault"]], "hasparam() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.hasParam"]], "inputcol (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.inputCol"]], "inputcontent (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.inputContent"]], "inputimage (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.inputImage"]], "inputtext (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.inputText"]], "isdefined() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.isDefined"]], "isset() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.isSet"]], "load() (texttopdf class method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.load"]], "origincol (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.originCol"]], "outputcol (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.outputCol"]], "pagenumcol (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.pageNumCol"]], "read() (texttopdf class method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.read"]], "save() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.save"]], "set() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.set"]], "setinputcol() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.setInputCol"]], "setinputcontent() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.setInputContent"]], "setinputimage() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.setInputImage"]], "setinputtext() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.setInputText"]], "setorigincol() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.setOriginCol"]], "setoutputcol() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.setOutputCol"]], "setpagenumcol() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.setPageNumCol"]], "sparkocr.transformers.pdf.text_to_pdf": [[215, "module-sparkocr.transformers.pdf.text_to_pdf"]], "transform() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.transform"]], "uid (texttopdf attribute)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.uid"]], "write() (texttopdf method)": [[215, "sparkocr.transformers.pdf.text_to_pdf.TextToPdf.write"]], "positionfinder (class in sparkocr.transformers.position_finder)": [[216, "sparkocr.transformers.position_finder.PositionFinder"]], "clear() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.clear"]], "copy() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.copy"]], "explainparam() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.explainParam"]], "explainparams() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.explainParams"]], "extractparammap() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.extractParamMap"]], "getinputcols() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.getInputCols"]], "getlazyannotator() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.getLazyAnnotator"]], "getordefault() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.getOrDefault"]], "getoutputcol() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.getOutputCol"]], "getparam() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.getParam"]], "getparamvalue() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.getParamValue"]], "getter_attrs (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.getter_attrs"]], "hasdefault() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.hasDefault"]], "hasparam() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.hasParam"]], "ignoreschema (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.ignoreSchema"]], "inputannotatortypes (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.inputAnnotatorTypes"]], "inputcols (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.inputCols"]], "inputcolsvalidation() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.inputColsValidation"]], "isdefined() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.isDefined"]], "isset() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.isSet"]], "lazyannotator (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.lazyAnnotator"]], "load() (positionfinder class method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.load"]], "name (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.name"]], "ocrscalefactor (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.ocrScaleFactor"]], "optionalinputannotatortypes (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.optionalInputAnnotatorTypes"]], "outputannotatortype (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.outputAnnotatorType"]], "outputcol (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.outputCol"]], "pagematrixcol (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.pageMatrixCol"]], "pagenumcol (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.pageNumCol"]], "pdfscalefactor (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.pdfScaleFactor"]], "read() (positionfinder class method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.read"]], "save() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.save"]], "set() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.set"]], "setignoreschema() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setIgnoreSchema"]], "setinputcols() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setInputCols"]], "setlazyannotator() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setLazyAnnotator"]], "setocrscalefactor() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setOcrScaleFactor"]], "setoutputcol() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setOutputCol"]], "setpagematrixcol() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setPageMatrixCol"]], "setpagenumcol() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setPageNumCol"]], "setparamvalue() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setParamValue"]], "setparams() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setParams"]], "setpdfscalefactor() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setPdfScaleFactor"]], "setsmoothcoordinates() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setSmoothCoordinates"]], "setsplitonnewlines() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.setSplitOnNewLines"]], "smoothcoordinates (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.smoothCoordinates"]], "sparkocr.transformers.position_finder": [[216, "module-sparkocr.transformers.position_finder"]], "splitonnewlines (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.splitOnNewLines"]], "transform() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.transform"]], "uid (positionfinder attribute)": [[216, "sparkocr.transformers.position_finder.PositionFinder.uid"]], "write() (positionfinder method)": [[216, "sparkocr.transformers.position_finder.PositionFinder.write"]], "ppttopdf (class in sparkocr.transformers.ppt_to_pdf)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf"]], "clear() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.clear"]], "copy() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.copy"]], "explainparam() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.explainParam"]], "explainparams() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.explainParams"]], "extractparammap() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.extractParamMap"]], "getinputcol() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.getInputCol"]], "getordefault() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.getOrDefault"]], "getoutputcol() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.getOutputCol"]], "getparam() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.getParam"]], "hasdefault() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.hasDefault"]], "hasparam() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.hasParam"]], "inputcol (ppttopdf attribute)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.inputCol"]], "isdefined() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.isDefined"]], "isset() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.isSet"]], "load() (ppttopdf class method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.load"]], "outputcol (ppttopdf attribute)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.outputCol"]], "read() (ppttopdf class method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.read"]], "save() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.save"]], "set() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.set"]], "setinputcol() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.setInputCol"]], "setoutputcol() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.setOutputCol"]], "sparkocr.transformers.ppt_to_pdf": [[217, "module-sparkocr.transformers.ppt_to_pdf"]], "transform() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.transform"]], "uid (ppttopdf attribute)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.uid"]], "write() (ppttopdf method)": [[217, "sparkocr.transformers.ppt_to_pdf.PptToPdf.write"]], "ppttotexttable (class in sparkocr.transformers.ppt_to_text_table)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable"]], "clear() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.clear"]], "copy() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.copy"]], "explainparam() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.explainParam"]], "explainparams() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.explainParams"]], "extractparammap() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.extractParamMap"]], "getinputcol() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.getInputCol"]], "getordefault() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.getOrDefault"]], "getoutputcol() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.getOutputCol"]], "getparam() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.getParam"]], "hasdefault() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.hasDefault"]], "hasparam() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.hasParam"]], "inputcol (ppttotexttable attribute)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.inputCol"]], "isdefined() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.isDefined"]], "isset() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.isSet"]], "load() (ppttotexttable static method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.load"]], "outputcol (ppttotexttable attribute)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.outputCol"]], "outputformat (ppttotexttable attribute)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.outputFormat"]], "read() (ppttotexttable class method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.read"]], "save() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.save"]], "set() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.set"]], "setinputcol() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.setInputCol"]], "setoutputcol() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.setOutputCol"]], "setoutputformat() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.setOutputFormat"]], "sparkocr.transformers.ppt_to_text_table": [[218, "module-sparkocr.transformers.ppt_to_text_table"]], "transform() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.transform"]], "uid (ppttotexttable attribute)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.uid"]], "write() (ppttotexttable method)": [[218, "sparkocr.transformers.ppt_to_text_table.PptToTextTable.write"]], "alabreaders (class in sparkocr.transformers.readers.alab_readers)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReaders"]], "alabreadersv1 (class in sparkocr.transformers.readers.alab_readers)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReadersV1"]], "datalabeler() (alabreaders method)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReaders.dataLabeler"]], "datalabeler() (alabreadersv1 method)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReadersV1.dataLabeler"]], "getprepareddataitem() (alabreaders static method)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReaders.getPreparedDataItem"]], "get_words() (alabreaders static method)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReaders.get_words"]], "isrectangleoverlap() (alabreaders static method)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReaders.isRectangleOverlap"]], "jsonreader() (alabreaders method)": [[219, "sparkocr.transformers.readers.alab_readers.AlabReaders.jsonReader"]], "sparkocr.transformers.readers.alab_readers": [[219, "module-sparkocr.transformers.readers.alab_readers"]], "docvqa (class in sparkocr.transformers.readers.docvqa_reader)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA"]], "apply() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.apply"]], "getdataframe() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.getDataFrame"]], "java_obj (docvqa attribute)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.java_obj"]], "new_java_array() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.new_java_array"]], "new_java_array_integer() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.new_java_array_integer"]], "new_java_array_string() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.new_java_array_string"]], "new_java_obj() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.new_java_obj"]], "readdataset() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.readDataset"]], "sc (docvqa attribute)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.sc"]], "spark_version() (docvqa method)": [[220, "sparkocr.transformers.readers.docvqa_reader.DocVQA.spark_version"]], "sparkocr.transformers.readers.docvqa_reader": [[220, "module-sparkocr.transformers.readers.docvqa_reader"]], "extracted (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.EXTRACTED"]], "filename (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.FILENAME"]], "funsdreader (class in sparkocr.transformers.readers.funsd_reader)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader"]], "result (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.RESULT"]], "url (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.URL"]], "clean_up (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.clean_up"]], "create_file_identifier() (funsdreader static method)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.create_file_identifier"]], "download_and_extract() (funsdreader method)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.download_and_extract"]], "funsd_reader() (funsdreader static method)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.funsd_reader"]], "process_funsd_split() (funsdreader method)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.process_funsd_split"]], "root_work_dir (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.root_work_dir"]], "schema (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.schema"]], "spark (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.spark"]], "sparkocr.transformers.readers.funsd_reader": [[221, "module-sparkocr.transformers.readers.funsd_reader"]], "target_dir (funsdreader attribute)": [[221, "sparkocr.transformers.readers.funsd_reader.FunsdReader.target_dir"]], "aws_key_id (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.AWS_KEY_ID"]], "aws_secret_key (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.AWS_SECRET_KEY"]], "aws_session_token (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.AWS_SESSION_TOKEN"]], "file_name (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.FILE_NAME"]], "iamreader (class in sparkocr.transformers.readers.iam_reader)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader"]], "s3_uri (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.S3_URI"]], "clean_up (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.clean_up"]], "download_and_extract() (iamreader method)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.download_and_extract"]], "extract_file_name() (iamreader static method)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.extract_file_name"]], "iam_reader() (iamreader method)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.iam_reader"]], "read_annotation_files() (iamreader method)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.read_annotation_files"]], "root_work_dir (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.root_work_dir"]], "spark (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.spark"]], "sparkocr.transformers.readers.iam_reader": [[222, "module-sparkocr.transformers.readers.iam_reader"]], "target_dir (iamreader attribute)": [[222, "sparkocr.transformers.readers.iam_reader.IAMReader.target_dir"]], "sparkocr.transformers.readers": [[223, "module-sparkocr.transformers.readers"]], "mixeddataset (class in sparkocr.transformers.readers.mixed_iterator)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset"]], "add_tokens() (mixeddataset method)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.add_tokens"]], "added_tokens (in module sparkocr.transformers.readers.mixed_iterator)": [[224, "sparkocr.transformers.readers.mixed_iterator.added_tokens"]], "dataframes (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.dataframes"]], "df_iterators (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.df_iterators"]], "df_sizes (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.df_sizes"]], "gt_token_sequences (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.gt_token_sequences"]], "ignore_id (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.ignore_id"]], "max_length (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.max_length"]], "max_patches (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.max_patches"]], "process_input_row() (mixeddataset method)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.process_input_row"]], "processor (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.processor"]], "produced (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.produced"]], "produced_distribution (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.produced_distribution"]], "prompt_end_token (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.prompt_end_token"]], "prompt_end_token_id (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.prompt_end_token_id"]], "size (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.size"]], "sort_json_key (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.sort_json_key"]], "sparkocr.transformers.readers.mixed_iterator": [[224, "module-sparkocr.transformers.readers.mixed_iterator"]], "split (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.split"]], "task_start_token (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.task_start_token"]], "total_weights (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.total_weights"]], "weights (mixeddataset attribute)": [[224, "sparkocr.transformers.readers.mixed_iterator.MixedDataset.weights"]], "rvlcdipreader (class in sparkocr.transformers.readers.rvlcdip_reader)": [[225, "sparkocr.transformers.readers.rvlcdip_reader.RvlCdipReader"]], "readtestdataset() (rvlcdipreader method)": [[225, "sparkocr.transformers.readers.rvlcdip_reader.RvlCdipReader.readTestDataset"]], "readtraindataset() (rvlcdipreader method)": [[225, "sparkocr.transformers.readers.rvlcdip_reader.RvlCdipReader.readTrainDataset"]], "sparkocr.transformers.readers.rvlcdip_reader": [[225, "module-sparkocr.transformers.readers.rvlcdip_reader"]], "sroiereader (class in sparkocr.transformers.readers.sroie_reader)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader"]], "sroie_test (sroiereader attribute)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.SROIE_TEST"]], "sroie_train (sroiereader attribute)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.SROIE_TRAIN"]], "clean_up (sroiereader attribute)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.clean_up"]], "create_file_identifier() (sroiereader static method)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.create_file_identifier"]], "download_and_extract() (sroiereader method)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.download_and_extract"]], "process_sroie_split() (sroiereader method)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.process_sroie_split"]], "root_work_dir (sroiereader attribute)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.root_work_dir"]], "schema (sroiereader attribute)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.schema"]], "spark (sroiereader attribute)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.spark"]], "sparkocr.transformers.readers.sroie_reader": [[226, "module-sparkocr.transformers.readers.sroie_reader"]], "sroie_reader() (sroiereader static method)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.sroie_reader"]], "target_dir (sroiereader attribute)": [[226, "sparkocr.transformers.readers.sroie_reader.SROIEReader.target_dir"]], "aws_key_id (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.AWS_KEY_ID"]], "aws_secret_key (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.AWS_SECRET_KEY"]], "aws_session_token (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.AWS_SESSION_TOKEN"]], "file_name (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.FILE_NAME"]], "s3_uri (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.S3_URI"]], "tacdreader (class in sparkocr.transformers.readers.tacd_reader)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader"]], "clean_up (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.clean_up"]], "create_file_identifier() (tacdreader static method)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.create_file_identifier"]], "download_and_extract() (tacdreader method)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.download_and_extract"]], "process_tacd_split() (tacdreader method)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.process_tacd_split"]], "root_work_dir (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.root_work_dir"]], "schema (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.schema"]], "spark (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.spark"]], "sparkocr.transformers.readers.tacd_reader": [[227, "module-sparkocr.transformers.readers.tacd_reader"]], "tacd_reader() (tacdreader static method)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.tacd_reader"]], "target_dir (tacdreader attribute)": [[227, "sparkocr.transformers.readers.tacd_reader.TACDReader.target_dir"]], "imagetotextv2 (class in sparkocr.transformers.recognizers.image_to_text_v2)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2"]], "batchsize (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.batchSize"]], "borderwidth (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.borderWidth"]], "clear() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.clear"]], "copy() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.copy"]], "endtokenid (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.endTokenId"]], "explainparam() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.explainParam"]], "explainparams() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.explainParams"]], "exploding_wrap() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.exploding_wrap"]], "extractparammap() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.extractParamMap"]], "forceprocessing (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.forceProcessing"]], "getinputcols() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.getInputCols"]], "getmodelpath() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.getModelPath"]], "getordefault() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.getOrDefault"]], "getoutputcol() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.getOutputCol"]], "getparam() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.getParam"]], "groupimages (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.groupImages"]], "hasdefault() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.hasDefault"]], "hasparam() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.hasParam"]], "height (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.height"]], "includeconfidence (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.includeConfidence"]], "inputcols (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.inputCols"]], "isdefined() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.isDefined"]], "isset() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.isSet"]], "keepinput (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.keepInput"]], "limitmultiplier (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.limitMultiplier"]], "linetolerance (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.lineTolerance"]], "load() (imagetotextv2 static method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.load"]], "maximageratio (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.maxImageRatio"]], "maximagesize (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.maxImageSize"]], "name (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.name"]], "normmean (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.normMean"]], "normstd (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.normStd"]], "outputcol (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.outputCol"]], "outputformat (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.outputFormat"]], "pretrained() (imagetotextv2 static method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.pretrained"]], "read() (imagetotextv2 class method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.read"]], "regionscolumn (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.regionsColumn"]], "save() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.save"]], "savemodel() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.saveModel"]], "scorescol (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.scoresCol"]], "set() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.set"]], "setbatchsize() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setBatchSize"]], "setborderwidth() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setBorderWidth"]], "setendtokenid() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setEndTokenId"]], "setforceprocessing() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setForceProcessing"]], "setgroupimages() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setGroupImages"]], "setheight() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setHeight"]], "setincludeconfidence() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setIncludeConfidence"]], "setinputcols() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setInputCols"]], "setkeepinput() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setKeepInput"]], "setlimitmultiplier() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setLimitMultiplier"]], "setlinetolerance() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setLineTolerance"]], "setmaximageratio() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setMaxImageRatio"]], "setmaximagesize() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setMaxImageSize"]], "setnormmean() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setNormMean"]], "setnormstd() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setNormStd"]], "setoutputcol() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setOutputCol"]], "setoutputformat() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setOutputFormat"]], "setregionscolumn() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setRegionsColumn"]], "setscorescol() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setScoresCol"]], "setspaceencoding() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setSpaceEncoding"]], "setspacewidth() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setSpaceWidth"]], "setstarttokenid() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setStartTokenId"]], "settaskparallelism() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setTaskParallelism"]], "setusecaching() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setUseCaching"]], "setusegpu() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setUseGPU"]], "setwidth() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.setWidth"]], "spaceencoding (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.spaceEncoding"]], "spacewidth (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.spaceWidth"]], "sparkocr.transformers.recognizers.image_to_text_v2": [[228, "module-sparkocr.transformers.recognizers.image_to_text_v2"]], "starttokenid (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.startTokenId"]], "taskparallelism (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.taskParallelism"]], "transform() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.transform"]], "uid (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.uid"]], "usecaching (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.useCaching"]], "usegpu (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.useGPU"]], "width (imagetotextv2 attribute)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.width"]], "write() (imagetotextv2 method)": [[228, "sparkocr.transformers.recognizers.image_to_text_v2.ImageToTextV2.write"]], "imagetotextv3 (class in sparkocr.transformers.recognizers.image_to_text_v3)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3"]], "clear() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.clear"]], "copy() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.copy"]], "downloadmodeldata (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.downloadModelData"]], "explainparam() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.explainParam"]], "explainparams() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.explainParams"]], "extractparammap() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.extractParamMap"]], "getinputcols() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.getInputCols"]], "getordefault() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.getOrDefault"]], "getoutputcol() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.getOutputCol"]], "getparam() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.getParam"]], "hasdefault() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.hasDefault"]], "hasparam() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.hasParam"]], "inputcols (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.inputCols"]], "isdefined() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.isDefined"]], "isset() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.isSet"]], "language (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.language"]], "load() (imagetotextv3 class method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.load"]], "margin (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.margin"]], "modeldata (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.modelData"]], "modeltype (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.modelType"]], "name (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.name"]], "ocrenginemode (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.ocrEngineMode"]], "outputcol (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.outputCol"]], "outputformat (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.outputFormat"]], "pageiteratorlevel (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.pageIteratorLevel"]], "pagesegmode (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.pageSegMode"]], "read() (imagetotextv3 class method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.read"]], "save() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.save"]], "set() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.set"]], "setdownloadmodeldata() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setDownloadModelData"]], "setinputcols() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setInputCols"]], "setlanguage() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setLanguage"]], "setmargin() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setMargin"]], "setmodeldata() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setModelData"]], "setmodeltype() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setModelType"]], "setocrenginemode() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setOcrEngineMode"]], "setoutputcol() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setOutputCol"]], "setoutputformat() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setOutputFormat"]], "setpageiteratorlevel() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setPageIteratorLevel"]], "setpagesegmode() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setPageSegMode"]], "setusetess4j() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.setUseTess4j"]], "sparkocr.transformers.recognizers.image_to_text_v3": [[229, "module-sparkocr.transformers.recognizers.image_to_text_v3"]], "transform() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.transform"]], "uid (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.uid"]], "usetess4j (imagetotextv3 attribute)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.useTess4j"]], "write() (imagetotextv3 method)": [[229, "sparkocr.transformers.recognizers.image_to_text_v3.ImageToTextV3.write"]], "sparkocr.transformers.recognizers": [[230, "module-sparkocr.transformers.recognizers"]], "regionsmerger (class in sparkocr.transformers.regions_merger)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger"]], "cellinputcol (regionsmerger attribute)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.cellInputCol"]], "clear() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.clear"]], "copy() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.copy"]], "explainparam() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.explainParam"]], "explainparams() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.explainParams"]], "extractparammap() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.extractParamMap"]], "getinputcols() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.getInputCols"]], "getordefault() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.getOrDefault"]], "getoutputcol() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.getOutputCol"]], "getparam() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.getParam"]], "handwrittenlabels (regionsmerger attribute)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.handwrittenLabels"]], "hasdefault() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.hasDefault"]], "hasparam() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.hasParam"]], "imageinputcol (regionsmerger attribute)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.imageInputCol"]], "inputcols (regionsmerger attribute)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.inputCols"]], "isdefined() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.isDefined"]], "isset() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.isSet"]], "keeptextregions (regionsmerger attribute)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.keepTextRegions"]], "load() (regionsmerger class method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.load"]], "outputcol (regionsmerger attribute)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.outputCol"]], "read() (regionsmerger class method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.read"]], "save() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.save"]], "set() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.set"]], "setcellinputcol() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.setCellInputCol"]], "sethandwrittenlabels() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.setHandwrittenLabels"]], "setimageinputcol() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.setImageInputCol"]], "setinputcols() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.setInputCols"]], "setkeeptextregions() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.setKeepTextRegions"]], "setoutputcol() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.setOutputCol"]], "sparkocr.transformers.regions_merger": [[231, "module-sparkocr.transformers.regions_merger"]], "transform() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.transform"]], "uid (regionsmerger attribute)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.uid"]], "write() (regionsmerger method)": [[231, "sparkocr.transformers.regions_merger.RegionsMerger.write"]], "broshocrtokenizer (class in sparkocr.transformers.tokenizer.bros_hocr_tokenizer)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer"]], "clear() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.clear"]], "copy() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.copy"]], "explainparam() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.explainParam"]], "explainparams() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.explainParams"]], "extractparammap() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.extractParamMap"]], "getinputcol() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.getInputCol"]], "getordefault() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.getOrDefault"]], "getoutputcol() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.getOutputCol"]], "getparam() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.getParam"]], "hasdefault() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.hasDefault"]], "hasparam() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.hasParam"]], "inputcol (broshocrtokenizer attribute)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.inputCol"]], "isdefined() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.isDefined"]], "isset() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.isSet"]], "load() (broshocrtokenizer class method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.load"]], "name (broshocrtokenizer attribute)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.name"]], "outputcol (broshocrtokenizer attribute)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.outputCol"]], "pretrained() (broshocrtokenizer static method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.pretrained"]], "read() (broshocrtokenizer class method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.read"]], "save() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.save"]], "set() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.set"]], "setinputcol() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.setInputCol"]], "setoutputcol() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.setOutputCol"]], "settokenizertype() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.setTokenizerType"]], "setvocabulary() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.setVocabulary"]], "setvocabularyfile() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.setVocabularyFile"]], "sparkocr.transformers.tokenizer.bros_hocr_tokenizer": [[232, "module-sparkocr.transformers.tokenizer.bros_hocr_tokenizer"]], "tokenizertype (broshocrtokenizer attribute)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.tokenizerType"]], "transform() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.transform"]], "uid (broshocrtokenizer attribute)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.uid"]], "write() (broshocrtokenizer method)": [[232, "sparkocr.transformers.tokenizer.bros_hocr_tokenizer.BrosHocrTokenizer.write"]], "hocrdocumentassembler (class in sparkocr.transformers.tokenizer.hocr_document_assembler)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler"]], "clear() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.clear"]], "copy() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.copy"]], "explainparam() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.explainParam"]], "explainparams() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.explainParams"]], "extractparammap() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.extractParamMap"]], "getinputcol() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.getInputCol"]], "getordefault() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.getOrDefault"]], "getoutputcol() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.getOutputCol"]], "getparam() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.getParam"]], "hasdefault() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.hasDefault"]], "hasparam() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.hasParam"]], "inputcol (hocrdocumentassembler attribute)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.inputCol"]], "isdefined() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.isDefined"]], "isset() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.isSet"]], "load() (hocrdocumentassembler class method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.load"]], "outputcol (hocrdocumentassembler attribute)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.outputCol"]], "read() (hocrdocumentassembler class method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.read"]], "save() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.save"]], "set() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.set"]], "setinputcol() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.setInputCol"]], "setoutputcol() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.setOutputCol"]], "sparkocr.transformers.tokenizer.hocr_document_assembler": [[233, "module-sparkocr.transformers.tokenizer.hocr_document_assembler"]], "transform() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.transform"]], "uid (hocrdocumentassembler attribute)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.uid"]], "write() (hocrdocumentassembler method)": [[233, "sparkocr.transformers.tokenizer.hocr_document_assembler.HocrDocumentAssembler.write"]], "hocrtokenizer (class in sparkocr.transformers.tokenizer.hocr_tokenizer)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer"]], "clear() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.clear"]], "copy() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.copy"]], "explainparam() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.explainParam"]], "explainparams() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.explainParams"]], "extractparammap() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.extractParamMap"]], "getinputcol() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.getInputCol"]], "getordefault() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.getOrDefault"]], "getoutputcol() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.getOutputCol"]], "getparam() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.getParam"]], "hasdefault() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.hasDefault"]], "hasparam() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.hasParam"]], "inputcol (hocrtokenizer attribute)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.inputCol"]], "isdefined() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.isDefined"]], "isset() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.isSet"]], "load() (hocrtokenizer class method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.load"]], "outputcol (hocrtokenizer attribute)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.outputCol"]], "read() (hocrtokenizer class method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.read"]], "save() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.save"]], "set() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.set"]], "setinputcol() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.setInputCol"]], "setoutputcol() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.setOutputCol"]], "settokenizertype() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.setTokenizerType"]], "sparkocr.transformers.tokenizer.hocr_tokenizer": [[234, "module-sparkocr.transformers.tokenizer.hocr_tokenizer"]], "tokenizertype (hocrtokenizer attribute)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.tokenizerType"]], "transform() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.transform"]], "uid (hocrtokenizer attribute)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.uid"]], "write() (hocrtokenizer method)": [[234, "sparkocr.transformers.tokenizer.hocr_tokenizer.HocrTokenizer.write"]], "sparkocr.transformers.tokenizer": [[235, "module-sparkocr.transformers.tokenizer"]], "updatetextposition (class in sparkocr.transformers.update_text_position)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition"]], "clear() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.clear"]], "copy() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.copy"]], "explainparam() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.explainParam"]], "explainparams() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.explainParams"]], "extractparammap() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.extractParamMap"]], "getinputcol() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.getInputCol"]], "getordefault() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.getOrDefault"]], "getoutputcol() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.getOutputCol"]], "getparam() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.getParam"]], "hasdefault() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.hasDefault"]], "hasparam() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.hasParam"]], "inputcol (updatetextposition attribute)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.inputCol"]], "inputtext (updatetextposition attribute)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.inputText"]], "isdefined() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.isDefined"]], "isset() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.isSet"]], "load() (updatetextposition class method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.load"]], "outputcol (updatetextposition attribute)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.outputCol"]], "read() (updatetextposition class method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.read"]], "save() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.save"]], "set() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.set"]], "setinputcol() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.setInputCol"]], "setinputtext() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.setInputText"]], "setoutputcol() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.setOutputCol"]], "sparkocr.transformers.update_text_position": [[236, "module-sparkocr.transformers.update_text_position"]], "transform() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.transform"]], "uid (updatetextposition attribute)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.uid"]], "write() (updatetextposition method)": [[236, "sparkocr.transformers.update_text_position.UpdateTextPosition.write"]], "visualdocumentclassifier (class in sparkocr.transformers.visual_document_classifier)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier"]], "casesensitive (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.caseSensitive"]], "clear() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.clear"]], "confidencecol (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.confidenceCol"]], "confidencethreshold (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.confidenceThreshold"]], "copy() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.copy"]], "explainparam() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.explainParam"]], "explainparams() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.explainParams"]], "extractparammap() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.extractParamMap"]], "getinputcol() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.getInputCol"]], "getordefault() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.getOrDefault"]], "getparam() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.getParam"]], "hasdefault() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.hasDefault"]], "hasparam() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.hasParam"]], "inputcol (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.inputCol"]], "isdefined() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.isDefined"]], "isset() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.isSet"]], "labelcol (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.labelCol"]], "labels (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.labels"]], "load() (visualdocumentclassifier static method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.load"]], "loadtfmodel() (visualdocumentclassifier static method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.loadTFModel"]], "maxsentencelength (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.maxSentenceLength"]], "name (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.name"]], "pretrained() (visualdocumentclassifier static method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.pretrained"]], "read() (visualdocumentclassifier class method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.read"]], "save() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.save"]], "set() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.set"]], "setcasesensitive() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.setCaseSensitive"]], "setconfidencecol() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.setConfidenceCol"]], "setconfidencethreshold() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.setConfidenceThreshold"]], "setinputcol() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.setInputCol"]], "setlabelcol() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.setLabelCol"]], "setlabels() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.setLabels"]], "setmaxsentencelength() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.setMaxSentenceLength"]], "sparkocr.transformers.visual_document_classifier": [[237, "module-sparkocr.transformers.visual_document_classifier"]], "transform() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.transform"]], "uid (visualdocumentclassifier attribute)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.uid"]], "write() (visualdocumentclassifier method)": [[237, "sparkocr.transformers.visual_document_classifier.VisualDocumentClassifier.write"]], "visualdocumentclassifierlilt (class in sparkocr.transformers.visual_document_classifier_lilt)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt"]], "casesensitive (visualdocumentclassifierlilt attribute)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.caseSensitive"]], "clear() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.clear"]], "copy() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.copy"]], "explainparam() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.explainParam"]], "explainparams() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.explainParams"]], "extractparammap() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.extractParamMap"]], "getinputcol() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.getInputCol"]], "getlabels() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.getLabels"]], "getordefault() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.getOrDefault"]], "getoutputcol() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.getOutputCol"]], "getparam() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.getParam"]], "getpreprocesseddataset() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.getPreprocessedDataset"]], "hasdefault() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.hasDefault"]], "hasparam() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.hasParam"]], "inputcol (visualdocumentclassifierlilt attribute)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.inputCol"]], "isdefined() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.isDefined"]], "isset() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.isSet"]], "labels (visualdocumentclassifierlilt attribute)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.labels"]], "load() (visualdocumentclassifierlilt static method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.load"]], "loaddataset() (visualdocumentclassifierlilt static method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.loadDataset"]], "loadonnxmodel() (visualdocumentclassifierlilt static method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.loadONNXModel"]], "loadpreprocesseddataset() (visualdocumentclassifierlilt static method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.loadPreprocessedDataset"]], "loadvocabulary() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.loadVocabulary"]], "maxsentencelength (visualdocumentclassifierlilt attribute)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.maxSentenceLength"]], "name (visualdocumentclassifierlilt attribute)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.name"]], "outputcol (visualdocumentclassifierlilt attribute)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.outputCol"]], "preprocess_preprocessed_df() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.preprocess_preprocessed_df"]], "pretrained() (visualdocumentclassifierlilt static method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.pretrained"]], "read() (visualdocumentclassifierlilt class method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.read"]], "save() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.save"]], "savemodel() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.saveModel"]], "set() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.set"]], "setinputcol() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.setInputCol"]], "setlabels() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.setLabels"]], "setmaxsentencelength() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.setMaxSentenceLength"]], "setoutputcol() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.setOutputCol"]], "setvocabulary() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.setVocabulary"]], "sparkocr.transformers.visual_document_classifier_lilt": [[238, "module-sparkocr.transformers.visual_document_classifier_lilt"]], "transform() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.transform"]], "uid (visualdocumentclassifierlilt attribute)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.uid"]], "write() (visualdocumentclassifierlilt method)": [[238, "sparkocr.transformers.visual_document_classifier_lilt.VisualDocumentClassifierLilt.write"]], "visualdocumentclassifierv3 (class in sparkocr.transformers.visual_document_classifier_v3)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3"]], "clear() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.clear"]], "copy() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.copy"]], "evalsize (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.evalSize"]], "explainparam() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.explainParam"]], "explainparams() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.explainParams"]], "extractparammap() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.extractParamMap"]], "fit() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.fit"]], "getinputcols() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.getInputCols"]], "getordefault() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.getOrDefault"]], "getoutputcol() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.getOutputCol"]], "getparam() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.getParam"]], "hasdefault() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.hasDefault"]], "hasparam() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.hasParam"]], "inputcols (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.inputCols"]], "isdefined() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.isDefined"]], "isset() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.isSet"]], "labels (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.labels"]], "load() (visualdocumentclassifierv3 static method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.load"]], "loadonnxmodel() (visualdocumentclassifierv3 static method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.loadONNXModel"]], "name (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.name"]], "outputcol (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.outputCol"]], "pretrained() (visualdocumentclassifierv3 static method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.pretrained"]], "read() (visualdocumentclassifierv3 class method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.read"]], "save() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.save"]], "savemodel() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.saveModel"]], "set() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.set"]], "setevalsize() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.setEvalSize"]], "setinputcols() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.setInputCols"]], "setlabels() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.setLabels"]], "setoutputcol() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.setOutputCol"]], "settrainbatchsize() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.setTrainBatchSize"]], "settrainepochs() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.setTrainEpochs"]], "sparkocr.transformers.visual_document_classifier_v3": [[239, "module-sparkocr.transformers.visual_document_classifier_v3"]], "trainbatchsize (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.trainBatchSize"]], "trainepochs (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.trainEpochs"]], "transform() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.transform"]], "uid (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.uid"]], "vocabulary (visualdocumentclassifierv3 attribute)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.vocabulary"]], "write() (visualdocumentclassifierv3 method)": [[239, "sparkocr.transformers.visual_document_classifier_v3.VisualDocumentClassifierV3.write"]], "visualdocumentprocessor (class in sparkocr.transformers.visual_document_processor)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor"]], "clear() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.clear"]], "copy() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.copy"]], "downloadmodeldata (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.downloadModelData"]], "explainparam() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.explainParam"]], "explainparams() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.explainParams"]], "extractparammap() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.extractParamMap"]], "freetextonly (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.freeTextOnly"]], "getinputcol() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.getInputCol"]], "getordefault() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.getOrDefault"]], "getoutputcols() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.getOutputCols"]], "getparam() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.getParam"]], "hasdefault() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.hasDefault"]], "hasparam() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.hasParam"]], "inputcol (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.inputCol"]], "isdefined() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.isDefined"]], "isset() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.isSet"]], "language (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.language"]], "modeldata (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.modelData"]], "modeltype (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.modelType"]], "ocrengine (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.ocrEngine"]], "ocrenginemode (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.ocrEngineMode"]], "outputcols (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.outputCols"]], "outputformat (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.outputFormat"]], "outputtableformat (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.outputTableFormat"]], "pageiteratorlevel (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.pageIteratorLevel"]], "pagesegmode (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.pageSegMode"]], "process_image() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.process_image"]], "set() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.set"]], "setdownloadmodeldata() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setDownloadModelData"]], "setfreetextonly() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setFreeTextOnly"]], "setinputcol() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setInputCol"]], "setlanguage() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setLanguage"]], "setmodeldata() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setModelData"]], "setmodeltype() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setModelType"]], "setocrengine() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setOcrEngine"]], "setocrenginemode() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setOcrEngineMode"]], "setoutputcols() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setOutputCols"]], "setoutputformat() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setOutputFormat"]], "setoutputtableformat() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setOutputTableFormat"]], "setpageiteratorlevel() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setPageIteratorLevel"]], "setpagesegmode() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setPageSegMode"]], "setusetess4j() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.setUseTess4j"]], "sparkocr.transformers.visual_document_processor": [[240, "module-sparkocr.transformers.visual_document_processor"]], "transform() (visualdocumentprocessor method)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.transform"]], "uid (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.uid"]], "usetess4j (visualdocumentprocessor attribute)": [[240, "sparkocr.transformers.visual_document_processor.VisualDocumentProcessor.useTess4j"]], "dit (class in sparkocr.transformers.visual_encoder_decoder.dit)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit"]], "ditdatasetiterable (class in sparkocr.transformers.visual_encoder_decoder.dit)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable"]], "base_model_path (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.base_model_path"]], "batch_size (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.batch_size"]], "checkpoint_model (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.checkpoint_model"]], "dataset (ditdatasetiterable attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable.dataset"]], "device (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.device"]], "df (ditdatasetiterable attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable.df"]], "finish_model() (dit method)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.finish_model"]], "image_col (ditdatasetiterable attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable.image_col"]], "label2id (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.label2id"]], "label2id (ditdatasetiterable attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable.label2id"]], "label_col (ditdatasetiterable attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable.label_col"]], "model (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.model"]], "n_height (ditdatasetiterable attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable.n_height"]], "n_width (ditdatasetiterable attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.DitDatasetIterable.n_width"]], "normalize_bbox() (in module sparkocr.transformers.visual_encoder_decoder.dit)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.normalize_bbox"]], "params (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.params"]], "patch_size (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.patch_size"]], "smoothing (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.smoothing"]], "sparkocr.transformers.visual_encoder_decoder.dit": [[241, "module-sparkocr.transformers.visual_encoder_decoder.Dit"]], "to_onnx() (dit method)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.to_onnx"]], "train() (dit method)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.train"]], "update_config_labels() (dit method)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.update_config_labels"]], "window_size (dit attribute)": [[241, "sparkocr.transformers.visual_encoder_decoder.Dit.Dit.window_size"]], "lilt (class in sparkocr.transformers.visual_encoder_decoder.lilt)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt"]], "liltnerdatasetiterable (class in sparkocr.transformers.visual_encoder_decoder.lilt)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable"]], "base_model (lilt attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.base_model"]], "device (lilt attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.device"]], "df (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.df"]], "entities_col (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.entities_col"]], "getdataset() (lilt method)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.getDataset"]], "image_col (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.image_col"]], "label2id (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.label2id"]], "label_all_tokens (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.label_all_tokens"]], "max_length (lilt attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.max_length"]], "max_length (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.max_length"]], "normalize_bbox() (in module sparkocr.transformers.visual_encoder_decoder.lilt)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.normalize_bbox"]], "params (lilt attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.params"]], "sparkocr.transformers.visual_encoder_decoder.lilt": [[242, "module-sparkocr.transformers.visual_encoder_decoder.Lilt"]], "stride (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.stride"]], "to_onnx() (lilt method)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.to_onnx"]], "to_onnx_optimum() (lilt method)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.to_onnx_optimum"]], "tokenizer (lilt attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.tokenizer"]], "tokenizer (liltnerdatasetiterable attribute)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.LiltNerDatasetIterable.tokenizer"]], "train() (lilt method)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.train"]], "update_config_labels() (lilt method)": [[242, "sparkocr.transformers.visual_encoder_decoder.Lilt.Lilt.update_config_labels"]], "evaluate() (in module sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning)": [[243, "sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning.evaluate"]], "get_loss_scale_for_deepspeed() (in module sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning)": [[243, "sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning.get_loss_scale_for_deepspeed"]], "sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning": [[243, "module-sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning"]], "train_class_batch() (in module sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning)": [[243, "sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning.train_class_batch"]], "train_one_epoch() (in module sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning)": [[243, "sparkocr.transformers.visual_encoder_decoder.engine_for_finetuning.train_one_epoch"]], "sparkocr.transformers.visual_encoder_decoder": [[244, "module-sparkocr.transformers.visual_encoder_decoder"]], "layerdecayvalueassigner (class in sparkocr.transformers.visual_encoder_decoder.optim_factory)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.LayerDecayValueAssigner"]], "create_optimizer() (in module sparkocr.transformers.visual_encoder_decoder.optim_factory)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.create_optimizer"]], "get_layer_id() (layerdecayvalueassigner method)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.LayerDecayValueAssigner.get_layer_id"]], "get_num_layer_for_vit() (in module sparkocr.transformers.visual_encoder_decoder.optim_factory)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.get_num_layer_for_vit"]], "get_parameter_groups() (in module sparkocr.transformers.visual_encoder_decoder.optim_factory)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.get_parameter_groups"]], "get_scale() (layerdecayvalueassigner method)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.LayerDecayValueAssigner.get_scale"]], "has_apex (in module sparkocr.transformers.visual_encoder_decoder.optim_factory)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.has_apex"]], "sparkocr.transformers.visual_encoder_decoder.optim_factory": [[245, "module-sparkocr.transformers.visual_encoder_decoder.optim_factory"]], "values (layerdecayvalueassigner attribute)": [[245, "sparkocr.transformers.visual_encoder_decoder.optim_factory.LayerDecayValueAssigner.values"]], "metriclogger (class in sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger"]], "nativescalerwithgradnormcount (class in sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.NativeScalerWithGradNormCount"]], "smoothedvalue (class in sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue"]], "tensorboardlogger (class in sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.TensorboardLogger"]], "add_meter() (metriclogger method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger.add_meter"]], "auto_load_model() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.auto_load_model"]], "cosine_scheduler() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.cosine_scheduler"]], "count (smoothedvalue attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue.count"]], "create_ds_config() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.create_ds_config"]], "delimiter (metriclogger attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger.delimiter"]], "deque (smoothedvalue attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue.deque"]], "flush() (tensorboardlogger method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.TensorboardLogger.flush"]], "fmt (smoothedvalue attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue.fmt"]], "get_grad_norm_() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.get_grad_norm_"]], "get_rank() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.get_rank"]], "get_world_size() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.get_world_size"]], "init_distributed_mode() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.init_distributed_mode"]], "is_dist_avail_and_initialized() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.is_dist_avail_and_initialized"]], "is_main_process() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.is_main_process"]], "load_state_dict() (nativescalerwithgradnormcount method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.NativeScalerWithGradNormCount.load_state_dict"]], "load_state_dict() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.load_state_dict"]], "log_every() (metriclogger method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger.log_every"]], "meters (metriclogger attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger.meters"]], "save_model() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.save_model"]], "save_on_master() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.save_on_master"]], "set_step() (tensorboardlogger method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.TensorboardLogger.set_step"]], "setup_for_distributed() (in module sparkocr.transformers.visual_encoder_decoder.utils)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.setup_for_distributed"]], "sparkocr.transformers.visual_encoder_decoder.utils": [[246, "module-sparkocr.transformers.visual_encoder_decoder.utils"]], "state_dict() (nativescalerwithgradnormcount method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.NativeScalerWithGradNormCount.state_dict"]], "state_dict_key (nativescalerwithgradnormcount attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.NativeScalerWithGradNormCount.state_dict_key"]], "step (tensorboardlogger attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.TensorboardLogger.step"]], "synchronize_between_processes() (metriclogger method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger.synchronize_between_processes"]], "synchronize_between_processes() (smoothedvalue method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue.synchronize_between_processes"]], "total (smoothedvalue attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue.total"]], "update() (metriclogger method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.MetricLogger.update"]], "update() (smoothedvalue method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.SmoothedValue.update"]], "update() (tensorboardlogger method)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.TensorboardLogger.update"]], "writer (tensorboardlogger attribute)": [[246, "sparkocr.transformers.visual_encoder_decoder.utils.TensorboardLogger.writer"]], "visualquestionanswering (class in sparkocr.transformers.visual_question_answering)": [[247, "sparkocr.transformers.visual_question_answering.VisualQuestionAnswering"]], "pretrained() (visualquestionanswering static method)": [[247, "sparkocr.transformers.visual_question_answering.VisualQuestionAnswering.pretrained"]], "sparkocr.transformers.visual_question_answering": [[247, "module-sparkocr.transformers.visual_question_answering"]], "sparkocr.transformers.vqa": [[248, "module-sparkocr.transformers.vqa"]], "visualquestionansweringdonut (class in sparkocr.transformers.vqa.visual_question_answering_donut)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut"]], "answerendmarker (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.answerEndMarker"]], "answerstartmarker (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.answerStartMarker"]], "clear() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.clear"]], "copy() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.copy"]], "encoderhiddenstatedim1 (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.encoderHiddenStateDim1"]], "encoderhiddenstatedim2 (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.encoderHiddenStateDim2"]], "endtokenid (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.endTokenId"]], "explainparam() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.explainParam"]], "explainparams() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.explainParams"]], "exploding_wrap() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.exploding_wrap"]], "extractparammap() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.extractParamMap"]], "forceprocessing (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.forceProcessing"]], "getinputcols() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.getInputCols"]], "getordefault() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.getOrDefault"]], "getoutputcol() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.getOutputCol"]], "getparam() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.getParam"]], "hasdefault() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.hasDefault"]], "hasparam() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.hasParam"]], "height (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.height"]], "includeconfidence (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.includeConfidence"]], "inputcols (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.inputCols"]], "isdefined() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.isDefined"]], "isset() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.isSet"]], "keepinput (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.keepInput"]], "load() (visualquestionansweringdonut static method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.load"]], "maxseqlength (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.maxSeqLength"]], "name (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.name"]], "normmean (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.normMean"]], "normstd (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.normStd"]], "numchannels (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.numChannels"]], "outputcol (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.outputCol"]], "padtokenid (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.padTokenId"]], "pretrained() (visualquestionansweringdonut static method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.pretrained"]], "questionendmarker (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.questionEndMarker"]], "questionstartmarker (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.questionStartMarker"]], "questions (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.questions"]], "questionscol (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.questionsCol"]], "read() (visualquestionansweringdonut class method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.read"]], "save() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.save"]], "savemodel() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.saveModel"]], "set() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.set"]], "setendtokenid() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setEndTokenId"]], "setforceprocessing() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setForceProcessing"]], "setheight() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setHeight"]], "setincludeconfidence() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setIncludeConfidence"]], "setinputcol() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setInputCol"]], "setkeepinput() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setKeepInput"]], "setmaxseqlength() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setMaxSeqLength"]], "setnormmean() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setNormMean"]], "setnormstd() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setNormStd"]], "setnumchannels() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setNumChannels"]], "setoutputcol() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setOutputCol"]], "setpadtokenid() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setPadTokenId"]], "setquestionendmarker() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setQuestionEndMarker"]], "setquestionstartmarker() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setQuestionStartMarker"]], "setquestions() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setQuestions"]], "setquestionscol() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setQuestionsCol"]], "setspaceencoding() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setSpaceEncoding"]], "setstarttokenid() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setStartTokenId"]], "settaskendmarker() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setTaskEndMarker"]], "settaskstartmarker() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setTaskStartMarker"]], "setwidth() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.setWidth"]], "spaceencoding (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.spaceEncoding"]], "sparkocr.transformers.vqa.visual_question_answering_donut": [[249, "module-sparkocr.transformers.vqa.visual_question_answering_donut"]], "starttokenid (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.startTokenId"]], "taskendmarker (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.taskEndMarker"]], "taskstartmarker (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.taskStartMarker"]], "transform() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.transform"]], "uid (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.uid"]], "width (visualquestionansweringdonut attribute)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.width"]], "write() (visualquestionansweringdonut method)": [[249, "sparkocr.transformers.vqa.visual_question_answering_donut.VisualQuestionAnsweringDonut.write"]], "visualquestionansweringpix2struct (class in sparkocr.transformers.vqa.visual_question_answering_pix2struct)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct"]], "answerendmarker (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.answerEndMarker"]], "answerstartmarker (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.answerStartMarker"]], "clear() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.clear"]], "copy() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.copy"]], "encoderhiddenstatedim1 (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.encoderHiddenStateDim1"]], "encoderhiddenstatedim2 (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.encoderHiddenStateDim2"]], "endtokenid (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.endTokenId"]], "explainparam() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.explainParam"]], "explainparams() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.explainParams"]], "exploding_wrap() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.exploding_wrap"]], "extractparammap() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.extractParamMap"]], "forceprocessing (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.forceProcessing"]], "getinputcols() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.getInputCols"]], "getordefault() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.getOrDefault"]], "getoutputcol() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.getOutputCol"]], "getparam() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.getParam"]], "hasdefault() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.hasDefault"]], "hasparam() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.hasParam"]], "height (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.height"]], "inputcols (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.inputCols"]], "isdefined() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.isDefined"]], "isset() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.isSet"]], "keepinput (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.keepInput"]], "load() (visualquestionansweringpix2struct static method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.load"]], "loadonnxmodel() (visualquestionansweringpix2struct static method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.loadONNXModel"]], "maxanswerlength (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.maxAnswerLength"]], "maxpatches (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.maxPatches"]], "maxseqlength (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.maxSeqLength"]], "name (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.name"]], "normmean (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.normMean"]], "normstd (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.normStd"]], "numchannels (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.numChannels"]], "outputcol (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.outputCol"]], "padtokenid (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.padTokenId"]], "pretrained() (visualquestionansweringpix2struct static method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.pretrained"]], "questionendmarker (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.questionEndMarker"]], "questionstartmarker (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.questionStartMarker"]], "questions (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.questions"]], "questionscol (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.questionsCol"]], "read() (visualquestionansweringpix2struct class method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.read"]], "save() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.save"]], "savemodel() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.saveModel"]], "set() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.set"]], "setendtokenid() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setEndTokenId"]], "setforceprocessing() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setForceProcessing"]], "setheight() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setHeight"]], "setinputcol() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setInputCol"]], "setkeepinput() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setKeepInput"]], "setmaxseqlength() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setMaxSeqLength"]], "setnormmean() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setNormMean"]], "setnormstd() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setNormStd"]], "setnumchannels() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setNumChannels"]], "setoutputcol() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setOutputCol"]], "setpadtokenid() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setPadTokenId"]], "setquestionendmarker() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setQuestionEndMarker"]], "setquestionstartmarker() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setQuestionStartMarker"]], "setquestions() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setQuestions"]], "setquestionscol() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setQuestionsCol"]], "setspaceencoding() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setSpaceEncoding"]], "setstarttokenid() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setStartTokenId"]], "settaskendmarker() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setTaskEndMarker"]], "settaskstartmarker() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setTaskStartMarker"]], "setusecaching() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setUseCaching"]], "setusegpu() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setUseGPU"]], "setvocabulary() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setVocabulary"]], "setwidth() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.setWidth"]], "spaceencoding (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.spaceEncoding"]], "sparkocr.transformers.vqa.visual_question_answering_pix2struct": [[250, "module-sparkocr.transformers.vqa.visual_question_answering_pix2struct"]], "starttokenid (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.startTokenId"]], "taskendmarker (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.taskEndMarker"]], "taskstartmarker (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.taskStartMarker"]], "transform() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.transform"]], "uid (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.uid"]], "usecaching (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.useCaching"]], "usegpu (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.useGPU"]], "width (visualquestionansweringpix2struct attribute)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.width"]], "write() (visualquestionansweringpix2struct method)": [[250, "sparkocr.transformers.vqa.visual_question_answering_pix2struct.VisualQuestionAnsweringPix2Struct.write"]], "parse_version (in module sparkocr.utils.compat_pkg)": [[251, "sparkocr.utils.compat_pkg.parse_version"]], "resource_filename() (in module sparkocr.utils.compat_pkg)": [[251, "sparkocr.utils.compat_pkg.resource_filename"]], "sparkocr.utils.compat_pkg": [[251, "module-sparkocr.utils.compat_pkg"]], "craft_gdrive_url (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.CRAFT_GDRIVE_URL"]], "refinenet_gdrive_url (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.REFINENET_GDRIVE_URL"]], "adjustresultcoordinates() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.adjustResultCoordinates"]], "copystatedict() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.copyStateDict"]], "getdetboxes() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.getDetBoxes"]], "getdetboxes_core() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.getDetBoxes_core"]], "getpoly_core() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.getPoly_core"]], "load_craftnet_model() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.load_craftnet_model"]], "load_refinenet_model() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.load_refinenet_model"]], "sparkocr.utils.craft.craft_utils": [[252, "module-sparkocr.utils.craft.craft_utils"]], "warpcoord() (in module sparkocr.utils.craft.craft_utils)": [[252, "sparkocr.utils.craft.craft_utils.warpCoord"]], "create_dir() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.create_dir"]], "crop_poly() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.crop_poly"]], "download() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.download"]], "export_detected_region() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.export_detected_region"]], "export_detected_regions() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.export_detected_regions"]], "export_extra_results() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.export_extra_results"]], "get_files() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.get_files"]], "list_files() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.list_files"]], "rectify_poly() (in module sparkocr.utils.craft.file_utils)": [[253, "sparkocr.utils.craft.file_utils.rectify_poly"]], "sparkocr.utils.craft.file_utils": [[253, "module-sparkocr.utils.craft.file_utils"]], "cvt2heatmapimg() (in module sparkocr.utils.craft.image_utils)": [[254, "sparkocr.utils.craft.image_utils.cvt2HeatmapImg"]], "denormalizemeanvariance() (in module sparkocr.utils.craft.image_utils)": [[254, "sparkocr.utils.craft.image_utils.denormalizeMeanVariance"]], "normalizemeanvariance() (in module sparkocr.utils.craft.image_utils)": [[254, "sparkocr.utils.craft.image_utils.normalizeMeanVariance"]], "read_image() (in module sparkocr.utils.craft.image_utils)": [[254, "sparkocr.utils.craft.image_utils.read_image"]], "resize_aspect_ratio() (in module sparkocr.utils.craft.image_utils)": [[254, "sparkocr.utils.craft.image_utils.resize_aspect_ratio"]], "sparkocr.utils.craft.image_utils": [[254, "module-sparkocr.utils.craft.image_utils"]], "craft (class in sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.Craft"]], "craft_net (craft attribute)": [[255, "sparkocr.utils.craft.Craft.craft_net"]], "crop_type (craft attribute)": [[255, "sparkocr.utils.craft.Craft.crop_type"]], "cuda (craft attribute)": [[255, "sparkocr.utils.craft.Craft.cuda"]], "detect_text() (craft method)": [[255, "sparkocr.utils.craft.Craft.detect_text"]], "empty_cuda_cache (in module sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.empty_cuda_cache"]], "export_detected_regions (in module sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.export_detected_regions"]], "export_extra (craft attribute)": [[255, "sparkocr.utils.craft.Craft.export_extra"]], "export_extra_results (in module sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.export_extra_results"]], "get_prediction (in module sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.get_prediction"]], "link_threshold (craft attribute)": [[255, "sparkocr.utils.craft.Craft.link_threshold"]], "load_craftnet_model (in module sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.load_craftnet_model"]], "load_craftnet_model() (craft method)": [[255, "sparkocr.utils.craft.Craft.load_craftnet_model"]], "load_refinenet_model (in module sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.load_refinenet_model"]], "load_refinenet_model() (craft method)": [[255, "sparkocr.utils.craft.Craft.load_refinenet_model"]], "long_size (craft attribute)": [[255, "sparkocr.utils.craft.Craft.long_size"]], "low_text (craft attribute)": [[255, "sparkocr.utils.craft.Craft.low_text"]], "output_dir (craft attribute)": [[255, "sparkocr.utils.craft.Craft.output_dir"]], "read_image (in module sparkocr.utils.craft)": [[255, "sparkocr.utils.craft.read_image"]], "rectify (craft attribute)": [[255, "sparkocr.utils.craft.Craft.rectify"]], "refine_net (craft attribute)": [[255, "sparkocr.utils.craft.Craft.refine_net"]], "refiner (craft attribute)": [[255, "sparkocr.utils.craft.Craft.refiner"]], "sparkocr.utils.craft": [[255, "module-sparkocr.utils.craft"]], "text_threshold (craft attribute)": [[255, "sparkocr.utils.craft.Craft.text_threshold"]], "unload_craftnet_model() (craft method)": [[255, "sparkocr.utils.craft.Craft.unload_craftnet_model"]], "unload_refinenet_model() (craft method)": [[255, "sparkocr.utils.craft.Craft.unload_refinenet_model"]], "sparkocr.utils.craft.models.basenet": [[256, "module-sparkocr.utils.craft.models.basenet"]], "forward() (vgg16_bn method)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn.forward"]], "init_weights() (in module sparkocr.utils.craft.models.basenet.vgg16_bn)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.init_weights"]], "slice1 (vgg16_bn attribute)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn.slice1"]], "slice2 (vgg16_bn attribute)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn.slice2"]], "slice3 (vgg16_bn attribute)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn.slice3"]], "slice4 (vgg16_bn attribute)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn.slice4"]], "slice5 (vgg16_bn attribute)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn.slice5"]], "sparkocr.utils.craft.models.basenet.vgg16_bn": [[257, "module-sparkocr.utils.craft.models.basenet.vgg16_bn"]], "vgg16_bn (class in sparkocr.utils.craft.models.basenet.vgg16_bn)": [[257, "sparkocr.utils.craft.models.basenet.vgg16_bn.vgg16_bn"]], "craftnet (class in sparkocr.utils.craft.models.craftnet)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet"]], "basenet (craftnet attribute)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet.basenet"]], "conv (double_conv attribute)": [[258, "sparkocr.utils.craft.models.craftnet.double_conv.conv"]], "conv_cls (craftnet attribute)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet.conv_cls"]], "double_conv (class in sparkocr.utils.craft.models.craftnet)": [[258, "sparkocr.utils.craft.models.craftnet.double_conv"]], "forward() (craftnet method)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet.forward"]], "forward() (double_conv method)": [[258, "sparkocr.utils.craft.models.craftnet.double_conv.forward"]], "model (in module sparkocr.utils.craft.models.craftnet)": [[258, "sparkocr.utils.craft.models.craftnet.model"]], "sparkocr.utils.craft.models.craftnet": [[258, "module-sparkocr.utils.craft.models.craftnet"]], "upconv1 (craftnet attribute)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet.upconv1"]], "upconv2 (craftnet attribute)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet.upconv2"]], "upconv3 (craftnet attribute)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet.upconv3"]], "upconv4 (craftnet attribute)": [[258, "sparkocr.utils.craft.models.craftnet.CraftNet.upconv4"]], "sparkocr.utils.craft.models": [[259, "module-sparkocr.utils.craft.models"]], "refinenet (class in sparkocr.utils.craft.models.refinenet)": [[260, "sparkocr.utils.craft.models.refinenet.RefineNet"]], "aspp1 (refinenet attribute)": [[260, "sparkocr.utils.craft.models.refinenet.RefineNet.aspp1"]], "aspp2 (refinenet attribute)": [[260, "sparkocr.utils.craft.models.refinenet.RefineNet.aspp2"]], "aspp3 (refinenet attribute)": [[260, "sparkocr.utils.craft.models.refinenet.RefineNet.aspp3"]], "aspp4 (refinenet attribute)": [[260, "sparkocr.utils.craft.models.refinenet.RefineNet.aspp4"]], "forward() (refinenet method)": [[260, "sparkocr.utils.craft.models.refinenet.RefineNet.forward"]], "last_conv (refinenet attribute)": [[260, "sparkocr.utils.craft.models.refinenet.RefineNet.last_conv"]], "sparkocr.utils.craft.models.refinenet": [[260, "module-sparkocr.utils.craft.models.refinenet"]], "get_prediction() (in module sparkocr.utils.craft.predict)": [[261, "sparkocr.utils.craft.predict.get_prediction"]], "sparkocr.utils.craft.predict": [[261, "module-sparkocr.utils.craft.predict"]], "sparkocr.utils.craft.torch_utils": [[262, "module-sparkocr.utils.craft.torch_utils"]], "cluster() (in module sparkocr.utils.helpers)": [[263, "sparkocr.utils.helpers.cluster"]], "get_size() (in module sparkocr.utils.helpers)": [[263, "sparkocr.utils.helpers.get_size"]], "sparkocr.utils.helpers": [[263, "module-sparkocr.utils.helpers"]], "write_dataset_to_bytes() (in module sparkocr.utils.helpers)": [[263, "sparkocr.utils.helpers.write_dataset_to_bytes"]], "hocrrenderer (class in sparkocr.utils.hocr_renderer)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer"]], "baseline (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.baseline"]], "htmlid (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.htmlid"]], "lang (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.lang"]], "maximize_bbox() (hocrrenderer method)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.maximize_bbox"]], "ocr_class (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.ocr_class"]], "page_height (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.page_height"]], "page_width (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.page_width"]], "render() (hocrrenderer method)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.render"]], "sparkocr.utils.hocr_renderer": [[264, "module-sparkocr.utils.hocr_renderer"]], "templates (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.templates"]], "title (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.title"]], "x0 (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.x0"]], "x1 (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.x1"]], "y0 (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.y0"]], "y1 (hocrrenderer attribute)": [[264, "sparkocr.utils.hocr_renderer.HocrRenderer.y1"]], "image_mode_display_map (in module sparkocr.utils)": [[265, "sparkocr.utils.IMAGE_MODE_DISPLAY_MAP"]], "image_mode_map (in module sparkocr.utils)": [[265, "sparkocr.utils.IMAGE_MODE_MAP"]], "compare_versions() (in module sparkocr.utils)": [[265, "sparkocr.utils.compare_versions"]], "display_dicom() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_dicom"]], "display_image() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_image"]], "display_images() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_images"]], "display_images_horizontal() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_images_horizontal"]], "display_markup() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_markup"]], "display_pdf() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_pdf"]], "display_pdf_file (class in sparkocr.utils)": [[265, "sparkocr.utils.display_pdf_file"]], "display_table() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_table"]], "display_tables() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_tables"]], "display_xmls() (in module sparkocr.utils)": [[265, "sparkocr.utils.display_xmls"]], "ensure_packages_installed() (in module sparkocr.utils)": [[265, "sparkocr.utils.ensure_packages_installed"]], "get_name() (in module sparkocr.utils)": [[265, "sparkocr.utils.get_name"]], "get_packbits_func() (in module sparkocr.utils)": [[265, "sparkocr.utils.get_packbits_func"]], "get_read_dicom_func() (in module sparkocr.utils)": [[265, "sparkocr.utils.get_read_dicom_func"]], "get_vocabulary_dict() (in module sparkocr.utils)": [[265, "sparkocr.utils.get_vocabulary_dict"]], "get_xml() (in module sparkocr.utils)": [[265, "sparkocr.utils.get_xml"]], "pdf (display_pdf_file attribute)": [[265, "sparkocr.utils.display_pdf_file.pdf"]], "remove_dependency_from_traceback() (in module sparkocr.utils)": [[265, "sparkocr.utils.remove_dependency_from_traceback"]], "remove_large_objects() (in module sparkocr.utils)": [[265, "sparkocr.utils.remove_large_objects"]], "save_table_to_csv() (in module sparkocr.utils)": [[265, "sparkocr.utils.save_table_to_csv"]], "save_tables_to_csv() (in module sparkocr.utils)": [[265, "sparkocr.utils.save_tables_to_csv"]], "singh_threshold() (in module sparkocr.utils)": [[265, "sparkocr.utils.singh_threshold"]], "size (display_pdf_file attribute)": [[265, "sparkocr.utils.display_pdf_file.size"]], "sparkocr.utils": [[265, "module-sparkocr.utils"]], "split_bylen() (in module sparkocr.utils)": [[265, "sparkocr.utils.split_bylen"]], "to_opencv_image() (in module sparkocr.utils)": [[265, "sparkocr.utils.to_opencv_image"]], "to_pil_image() (in module sparkocr.utils)": [[265, "sparkocr.utils.to_pil_image"]], "to_xml() (in module sparkocr.utils)": [[265, "sparkocr.utils.to_xml"]], "wolf_threshold() (in module sparkocr.utils)": [[265, "sparkocr.utils.wolf_threshold"]], "baseinpaintingtrainingmodule (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.BaseInpaintingTrainingModule"]], "concattuplelayer (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.ConcatTupleLayer"]], "ffc (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.FFC"]], "ffcresnetgenerator (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.FFCResNetGenerator"]], "ffcresnetblock (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.FFCResnetBlock"]], "ffcse_block (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.FFCSE_block"]], "ffc_bn_act (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.FFC_BN_ACT"]], "fourierunit (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.FourierUnit"]], "learnablespatialtransformwrapper (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper"]], "selayer (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.SELayer"]], "spectraltransform (class in sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.SpectralTransform"]], "act_g (ffc_bn_act attribute)": [[266, "sparkocr.utils.inpainting.FFC_BN_ACT.act_g"]], "act_l (ffc_bn_act attribute)": [[266, "sparkocr.utils.inpainting.FFC_BN_ACT.act_l"]], "angle (learnablespatialtransformwrapper attribute)": [[266, "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper.angle"]], "avg_pool (selayer attribute)": [[266, "sparkocr.utils.inpainting.SELayer.avg_pool"]], "avgpool (ffcse_block attribute)": [[266, "sparkocr.utils.inpainting.FFCSE_block.avgpool"]], "bn (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.bn"]], "bn_g (ffc_bn_act attribute)": [[266, "sparkocr.utils.inpainting.FFC_BN_ACT.bn_g"]], "bn_l (ffc_bn_act attribute)": [[266, "sparkocr.utils.inpainting.FFC_BN_ACT.bn_l"]], "ceil_modulo() (in module sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.ceil_modulo"]], "config (baseinpaintingtrainingmodule attribute)": [[266, "sparkocr.utils.inpainting.BaseInpaintingTrainingModule.config"]], "conv1 (ffcresnetblock attribute)": [[266, "sparkocr.utils.inpainting.FFCResnetBlock.conv1"]], "conv1 (ffcse_block attribute)": [[266, "sparkocr.utils.inpainting.FFCSE_block.conv1"]], "conv1 (spectraltransform attribute)": [[266, "sparkocr.utils.inpainting.SpectralTransform.conv1"]], "conv2 (ffcresnetblock attribute)": [[266, "sparkocr.utils.inpainting.FFCResnetBlock.conv2"]], "conv2 (spectraltransform attribute)": [[266, "sparkocr.utils.inpainting.SpectralTransform.conv2"]], "conv_a2g (ffcse_block attribute)": [[266, "sparkocr.utils.inpainting.FFCSE_block.conv_a2g"]], "conv_a2l (ffcse_block attribute)": [[266, "sparkocr.utils.inpainting.FFCSE_block.conv_a2l"]], "conv_layer (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.conv_layer"]], "convg2g (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.convg2g"]], "convg2l (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.convg2l"]], "convl2g (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.convl2g"]], "convl2l (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.convl2l"]], "device (baseinpaintingtrainingmodule attribute)": [[266, "sparkocr.utils.inpainting.BaseInpaintingTrainingModule.device"]], "enable_lfu (spectraltransform attribute)": [[266, "sparkocr.utils.inpainting.SpectralTransform.enable_lfu"]], "fc (selayer attribute)": [[266, "sparkocr.utils.inpainting.SELayer.fc"]], "ffc (ffc_bn_act attribute)": [[266, "sparkocr.utils.inpainting.FFC_BN_ACT.ffc"]], "ffc3d (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.ffc3d"]], "fft_norm (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.fft_norm"]], "forward() (baseinpaintingtrainingmodule method)": [[266, "sparkocr.utils.inpainting.BaseInpaintingTrainingModule.forward"]], "forward() (concattuplelayer method)": [[266, "sparkocr.utils.inpainting.ConcatTupleLayer.forward"]], "forward() (ffc method)": [[266, "sparkocr.utils.inpainting.FFC.forward"]], "forward() (ffcresnetgenerator method)": [[266, "sparkocr.utils.inpainting.FFCResNetGenerator.forward"]], "forward() (ffcresnetblock method)": [[266, "sparkocr.utils.inpainting.FFCResnetBlock.forward"]], "forward() (ffcse_block method)": [[266, "sparkocr.utils.inpainting.FFCSE_block.forward"]], "forward() (ffc_bn_act method)": [[266, "sparkocr.utils.inpainting.FFC_BN_ACT.forward"]], "forward() (fourierunit method)": [[266, "sparkocr.utils.inpainting.FourierUnit.forward"]], "forward() (learnablespatialtransformwrapper method)": [[266, "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper.forward"]], "forward() (selayer method)": [[266, "sparkocr.utils.inpainting.SELayer.forward"]], "forward() (spectraltransform method)": [[266, "sparkocr.utils.inpainting.SpectralTransform.forward"]], "fu (spectraltransform attribute)": [[266, "sparkocr.utils.inpainting.SpectralTransform.fu"]], "gate (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.gate"]], "gated (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.gated"]], "generator (baseinpaintingtrainingmodule attribute)": [[266, "sparkocr.utils.inpainting.BaseInpaintingTrainingModule.generator"]], "get_activation() (in module sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.get_activation"]], "global_in_num (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.global_in_num"]], "groups (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.groups"]], "impl (learnablespatialtransformwrapper attribute)": [[266, "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper.impl"]], "inline (ffcresnetblock attribute)": [[266, "sparkocr.utils.inpainting.FFCResnetBlock.inline"]], "inverse_transform() (learnablespatialtransformwrapper method)": [[266, "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper.inverse_transform"]], "model (ffcresnetgenerator attribute)": [[266, "sparkocr.utils.inpainting.FFCResNetGenerator.model"]], "pad_coef (learnablespatialtransformwrapper attribute)": [[266, "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper.pad_coef"]], "pad_img_to_modulo() (in module sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.pad_img_to_modulo"]], "prepare_batch() (baseinpaintingtrainingmodule method)": [[266, "sparkocr.utils.inpainting.BaseInpaintingTrainingModule.prepare_batch"]], "ratio_gin (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.ratio_gin"]], "ratio_gout (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.ratio_gout"]], "relu (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.relu"]], "relu1 (ffcse_block attribute)": [[266, "sparkocr.utils.inpainting.FFCSE_block.relu1"]], "rotate_detector_regions() (in module sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.rotate_detector_regions"]], "rotate_tensor() (in module sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.rotate_tensor"]], "scale_image() (in module sparkocr.utils.inpainting)": [[266, "sparkocr.utils.inpainting.scale_image"]], "sigmoid (ffcse_block attribute)": [[266, "sparkocr.utils.inpainting.FFCSE_block.sigmoid"]], "sparkocr.utils.inpainting": [[266, "module-sparkocr.utils.inpainting"]], "spatial_scale_factor (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.spatial_scale_factor"]], "spatial_scale_mode (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.spatial_scale_mode"]], "spectral_pos_encoding (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.spectral_pos_encoding"]], "stride (ffc attribute)": [[266, "sparkocr.utils.inpainting.FFC.stride"]], "stride (spectraltransform attribute)": [[266, "sparkocr.utils.inpainting.SpectralTransform.stride"]], "transform() (learnablespatialtransformwrapper method)": [[266, "sparkocr.utils.inpainting.LearnableSpatialTransformWrapper.transform"]], "use_se (fourierunit attribute)": [[266, "sparkocr.utils.inpainting.FourierUnit.use_se"]], "point (class in sparkocr.utils.rectangle)": [[267, "sparkocr.utils.rectangle.Point"]], "rectangle (class in sparkocr.utils.rectangle)": [[267, "sparkocr.utils.rectangle.Rectangle"]], "bottom_left (rectangle attribute)": [[267, "sparkocr.utils.rectangle.Rectangle.bottom_left"]], "bottom_right (rectangle attribute)": [[267, "sparkocr.utils.rectangle.Rectangle.bottom_right"]], "from_box() (rectangle static method)": [[267, "sparkocr.utils.rectangle.Rectangle.from_box"]], "get_height() (rectangle method)": [[267, "sparkocr.utils.rectangle.Rectangle.get_height"]], "intersects() (rectangle method)": [[267, "sparkocr.utils.rectangle.Rectangle.intersects"]], "intersects_horizontal() (rectangle method)": [[267, "sparkocr.utils.rectangle.Rectangle.intersects_horizontal"]], "merge_intersects() (rectangle static method)": [[267, "sparkocr.utils.rectangle.Rectangle.merge_intersects"]], "merge_rects() (rectangle static method)": [[267, "sparkocr.utils.rectangle.Rectangle.merge_rects"]], "sparkocr.utils.rectangle": [[267, "module-sparkocr.utils.rectangle"]], "to_region() (rectangle method)": [[267, "sparkocr.utils.rectangle.Rectangle.to_region"]], "top_left (rectangle attribute)": [[267, "sparkocr.utils.rectangle.Rectangle.top_left"]], "top_right (rectangle attribute)": [[267, "sparkocr.utils.rectangle.Rectangle.top_right"]], "x (point attribute)": [[267, "sparkocr.utils.rectangle.Point.x"]], "y (point attribute)": [[267, "sparkocr.utils.rectangle.Point.y"]], "seqeval (class in sparkocr.utils.seqeval)": [[268, "sparkocr.utils.seqeval.Seqeval"]], "sparkocr.utils.seqeval": [[268, "module-sparkocr.utils.seqeval"]], "sparkocr.utils.svs": [[269, "module-sparkocr.utils.svs"]], "copyop (class in sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.CopyOp"]], "add_description() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.add_description"]], "check_free_space() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.check_free_space"]], "copy_and_strip() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.copy_and_strip"]], "copy_and_strip_all() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.copy_and_strip_all"]], "delete_associated_image() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.delete_associated_image"]], "delete_associated_metadata() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.delete_associated_metadata"]], "detect_format() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.detect_format"]], "do_strip_in_place() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.do_strip_in_place"]], "file_progress() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.file_progress"]], "generate_unique_id() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.generate_unique_id"]], "get_config_path() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_config_path"]], "get_csv_message() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_csv_message"]], "get_dir() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_dir"]], "get_dir_() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_dir_"]], "get_filename() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_filename"]], "get_files() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_files"]], "get_files_() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_files_"]], "get_files_structure() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_files_structure"]], "get_inplace_dir() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_inplace_dir"]], "get_inplace_files() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_inplace_files"]], "get_inplace_info() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.get_inplace_info"]], "inplace_info() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.inplace_info"]], "lock (copyop attribute)": [[270, "sparkocr.utils.svs.phi_cleaning.CopyOp.lock"]], "original (copyop attribute)": [[270, "sparkocr.utils.svs.phi_cleaning.CopyOp.original"]], "parse_csv() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.parse_csv"]], "parse_files() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.parse_files"]], "parse_inplace_files() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.parse_inplace_files"]], "predefined_tags (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.predefined_tags"]], "read() (copyop method)": [[270, "sparkocr.utils.svs.phi_cleaning.CopyOp.read"]], "remove_phi() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.remove_phi"]], "remove_tag_section() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.remove_tag_section"]], "resource_path() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.resource_path"]], "sparkocr.utils.svs.phi_cleaning": [[270, "module-sparkocr.utils.svs.phi_cleaning"]], "test_file_dialog() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.test_file_dialog"]], "track_copy_progress() (in module sparkocr.utils.svs.phi_cleaning)": [[270, "sparkocr.utils.svs.phi_cleaning.track_copy_progress"]], "update() (copyop method)": [[270, "sparkocr.utils.svs.phi_cleaning.CopyOp.update"]], "value (copyop attribute)": [[270, "sparkocr.utils.svs.phi_cleaning.CopyOp.value"]], "calculate_actual_level_height() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.calculate_actual_level_height"]], "calculate_actual_level_width() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.calculate_actual_level_width"]], "calculate_max_group_mem_gb() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.calculate_max_group_mem_gb"]], "chunk_list() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.chunk_list"]], "dataframe_to_detections() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.dataframe_to_detections"]], "detect_tile_level() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.detect_tile_level"]], "detections_to_dataframe() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.detections_to_dataframe"]], "df2list() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.df2list"]], "estimate_svs_memory_gb() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.estimate_svs_memory_gb"]], "extract_base_name() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.extract_base_name"]], "extract_svs_name_from_tiles() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.extract_svs_name_from_tiles"]], "find_intersecting_tiles() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.find_intersecting_tiles"]], "find_thumbnail_index() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.find_thumbnail_index"]], "get_existing_extension() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.get_existing_extension"]], "get_svs_info_from_images() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.get_svs_info_from_images"]], "get_tile_position_and_size() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.get_tile_position_and_size"]], "group_svs_files_by_memory() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.group_svs_files_by_memory"]], "prepare_thumbnail_deid() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.prepare_thumbnail_deid"]], "process_file() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.process_file"]], "redact_phi_in_tiles() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.redact_phi_in_tiles"]], "scale_boxes_to_all_levels() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.scale_boxes_to_all_levels"]], "setup_logging() (in module sparkocr.utils.svs.phi_redaction)": [[271, "sparkocr.utils.svs.phi_redaction.setup_logging"]], "sparkocr.utils.svs.phi_redaction": [[271, "module-sparkocr.utils.svs.phi_redaction"]], "input_path (in module sparkocr.utils.svs.remove-phi)": [[272, "sparkocr.utils.svs.remove-phi.input_path"]], "output_path (in module sparkocr.utils.svs.remove-phi)": [[272, "sparkocr.utils.svs.remove-phi.output_path"]], "sparkocr.utils.svs.remove-phi": [[272, "module-sparkocr.utils.svs.remove-phi"]], "allocationgranularity() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.ALLOCATIONGRANULARITY"]], "axes_labels() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.AXES_LABELS"]], "big_be() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.BIG_BE"]], "big_le() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.BIG_LE"]], "classic_be() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CLASSIC_BE"]], "classic_le() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CLASSIC_LE"]], "colorresponseunit() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.COLORRESPONSEUNIT"]], "compessors() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.COMPESSORS"]], "compression() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.COMPRESSION"]], "cz_lsminfo() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO"]], "cz_lsminfo_datatypes() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_DATATYPES"]], "cz_lsminfo_dimensions() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_DIMENSIONS"]], "cz_lsminfo_readers() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_READERS"]], "cz_lsminfo_scaninfo_arrays() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_SCANINFO_ARRAYS"]], "cz_lsminfo_scaninfo_attributes() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_SCANINFO_ATTRIBUTES"]], "cz_lsminfo_scaninfo_structs() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_SCANINFO_STRUCTS"]], "cz_lsminfo_scantype() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_SCANTYPE"]], "cz_lsminfo_typeofdata() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.CZ_LSMINFO_TYPEOFDATA"]], "datatypes() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.DATATYPES"]], "data_dtypes() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.DATA_DTYPES"]], "data_formats() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.DATA_FORMATS"]], "decompessors() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.DECOMPESSORS"]], "exif_tags() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.EXIF_TAGS"]], "extrasample() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.EXTRASAMPLE"]], "fileopen_filter() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.FILEOPEN_FILTER"]], "filetype() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.FILETYPE"]], "file_extensions() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.FILE_EXTENSIONS"]], "file_flags() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.FILE_FLAGS"]], "fillorder() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.FILLORDER"]], "frame_attrs() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.FRAME_ATTRS"]], "filehandle (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle"]], "filesequence (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.FileSequence"]], "geo_codes() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.GEO_CODES"]], "geo_keys() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.GEO_KEYS"]], "gps_tags() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.GPS_TAGS"]], "grayresponseunit() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.GRAYRESPONSEUNIT"]], "group4opt() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.GROUP4OPT"]], "iop_tags() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.IOP_TAGS"]], "lazyconst (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.LazyConst"]], "maxworkers() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.MAXWORKERS"]], "mm_dimensions() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.MM_DIMENSIONS"]], "mm_header() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.MM_HEADER"]], "ndpi_le() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.NDPI_LE"]], "ndpi_tags() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.NDPI_TAGS"]], "nih_colortable_type() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.NIH_COLORTABLE_TYPE"]], "nih_curvefit_type() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.NIH_CURVEFIT_TYPE"]], "nih_image_header() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.NIH_IMAGE_HEADER"]], "nih_lutmode_type() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.NIH_LUTMODE_TYPE"]], "nih_units_type() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.NIH_UNITS_TYPE"]], "nullcontext (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.NullContext"]], "ofiletype() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.OFILETYPE"]], "orientation() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.ORIENTATION"]], "openfilecache (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache"]], "photometric() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.PHOTOMETRIC"]], "pilatus_header() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.PILATUS_HEADER"]], "planarconfig() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.PLANARCONFIG"]], "predictor() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.PREDICTOR"]], "predictors() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.PREDICTORS"]], "resunit() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.RESUNIT"]], "sampleformat() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.SAMPLEFORMAT"]], "sample_dtypes() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.SAMPLE_DTYPES"]], "tags() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.TAGS"]], "tag_attributes() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.TAG_ATTRIBUTES"]], "tag_enum() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.TAG_ENUM"]], "tag_readers() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.TAG_READERS"]], "tag_tuple() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.TAG_TUPLE"]], "threshhold() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.THRESHHOLD"]], "tiff (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TIFF"]], "tvips_header_v1() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.TVIPS_HEADER_V1"]], "tvips_header_v2() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.TVIPS_HEADER_V2"]], "tifffile (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile"]], "tifffileerror": [[273, "sparkocr.utils.svs.tiffparser.TiffFileError"]], "tiffframe (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame"]], "tiffpage (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage"]], "tiffpageseries (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries"]], "tiffpages (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TiffPages"]], "tiffparsererror": [[273, "sparkocr.utils.svs.tiffparser.TiffParserError"]], "tifftag (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TiffTag"]], "tifftags (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.TiffTags"]], "uic_tags() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.UIC_TAGS"]], "unpredictors() (tiff method)": [[273, "sparkocr.utils.svs.tiffparser.TIFF.UNPREDICTORS"]], "add() (tifftags method)": [[273, "sparkocr.utils.svs.tiffparser.TiffTags.add"]], "andor_tags() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.andor_tags"]], "apply_colormap() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.apply_colormap"]], "asarray() (filesequence method)": [[273, "sparkocr.utils.svs.tiffparser.FileSequence.asarray"]], "asarray() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.asarray"]], "asarray() (tiffframe method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.asarray"]], "asarray() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.asarray"]], "asarray() (tiffpageseries method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.asarray"]], "asbool() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.asbool"]], "askopenfilename() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.askopenfilename"]], "aspage() (tiffframe method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.aspage"]], "aspage() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.aspage"]], "asrgb() (tiffframe method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.asrgb"]], "asrgb() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.asrgb"]], "astype() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.astype"]], "axes (filesequence attribute)": [[273, "id1"], [273, "sparkocr.utils.svs.tiffparser.FileSequence.axes"]], "axes (tiffpage attribute)": [[273, "id5"], [273, "sparkocr.utils.svs.tiffparser.TiffPage.axes"]], "axes (tiffpageseries attribute)": [[273, "id11"], [273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.axes"]], "bitspersample (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.bitspersample"]], "byteorder_isnative() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.byteorder_isnative"]], "bytes2str() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.bytes2str"]], "bytestr() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.bytestr"]], "clean_whitespace() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.clean_whitespace"]], "clear() (openfilecache method)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache.clear"]], "close() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.close"]], "close() (filesequence method)": [[273, "sparkocr.utils.svs.tiffparser.FileSequence.close"]], "close() (openfilecache method)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache.close"]], "close() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.close"]], "code (tifftag attribute)": [[273, "id15"], [273, "sparkocr.utils.svs.tiffparser.TiffTag.code"]], "colormap (tiffpage attribute)": [[273, "id6"], [273, "sparkocr.utils.svs.tiffparser.TiffPage.colormap"]], "compression (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.compression"]], "count (tifftag attribute)": [[273, "id16"], [273, "sparkocr.utils.svs.tiffparser.TiffTag.count"]], "create_output() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.create_output"]], "databytecounts (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.databytecounts"]], "dataoffsets (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.dataoffsets"]], "decode() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.decode"]], "description (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.description"]], "description1 (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.description1"]], "dtype (tiffpage attribute)": [[273, "id7"], [273, "sparkocr.utils.svs.tiffparser.TiffPage.dtype"]], "dtype (tiffpageseries attribute)": [[273, "id12"], [273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.dtype"]], "dtype (tifftag attribute)": [[273, "id17"], [273, "sparkocr.utils.svs.tiffparser.TiffTag.dtype"]], "dtype (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.dtype"]], "enumarg() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.enumarg"]], "enumstr() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.enumstr"]], "epics_tags() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.epics_tags"]], "excel_datetime() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.excel_datetime"]], "extrasamples (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.extrasamples"]], "fei_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.fei_metadata"]], "files (filesequence attribute)": [[273, "id2"], [273, "sparkocr.utils.svs.tiffparser.FileSequence.files"]], "files (openfilecache attribute)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache.files"]], "fillorder (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.fillorder"]], "flags() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.flags"]], "flags() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.flags"]], "fluoview_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.fluoview_description_metadata"]], "fluoview_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.fluoview_metadata"]], "flush() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.flush"]], "format_size() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.format_size"]], "fromfile (filesequence attribute)": [[273, "sparkocr.utils.svs.tiffparser.FileSequence.fromfile"]], "fstat() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.fstat"]], "func (lazyattr attribute)": [[273, "sparkocr.utils.svs.tiffparser.lazyattr.func"]], "geotiff_tags() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.geotiff_tags"]], "get() (tifftags method)": [[273, "sparkocr.utils.svs.tiffparser.TiffTags.get"]], "getall() (tifftags method)": [[273, "sparkocr.utils.svs.tiffparser.TiffTags.getall"]], "getdtype() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.getdtype"]], "hash() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.hash"]], "hexdump() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.hexdump"]], "identityfunc() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.identityfunc"]], "imagedepth (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.imagedepth"]], "imagej_description() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.imagej_description"]], "imagej_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.imagej_description_metadata"]], "imagej_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.imagej_metadata"]], "imagej_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.imagej_metadata"]], "imagej_metadata_tag() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.imagej_metadata_tag"]], "imagej_shape() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.imagej_shape"]], "imagelength (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.imagelength"]], "imagewidth (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.imagewidth"]], "imshow() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.imshow"]], "index (tiffframe attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.index"]], "index (tiffpage attribute)": [[273, "id8"], [273, "sparkocr.utils.svs.tiffparser.TiffPage.index"]], "index (tiffpageseries attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.index"]], "is_contiguous() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.is_contiguous"]], "is_file (filehandle attribute)": [[273, "id0"], [273, "sparkocr.utils.svs.tiffparser.FileHandle.is_file"]], "is_final() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.is_final"]], "is_flag (tifffile attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.is_flag"]], "is_imagej() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.is_imagej"]], "is_mdgel (tiffframe attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.is_mdgel"]], "is_mdgel() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.is_mdgel"]], "is_memmappable() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.is_memmappable"]], "is_ndpi() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.is_ndpi"]], "is_shaped() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.is_shaped"]], "is_uniform() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.is_uniform"]], "isprintable() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.isprintable"]], "items() (tifftags method)": [[273, "sparkocr.utils.svs.tiffparser.TiffTags.items"]], "itemsize (dtype attribute)": [[273, "sparkocr.utils.svs.tiffparser.dtype.itemsize"]], "itemsizes (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.itemsizes"]], "json_description() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.json_description"]], "json_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.json_description_metadata"]], "julian_datetime() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.julian_datetime"]], "keys() (tifftags method)": [[273, "sparkocr.utils.svs.tiffparser.TiffTags.keys"]], "kind (tiffpageseries attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.kind"]], "lazyattr (class in sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.lazyattr"]], "lock (openfilecache attribute)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache.lock"]], "log_warning() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.log_warning"]], "lsm2bin() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.lsm2bin"]], "matlabstr2py() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.matlabstr2py"]], "maxworkers() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.maxworkers"]], "mdgel_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.mdgel_metadata"]], "memmap_array() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.memmap_array"]], "metaseries_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.metaseries_description_metadata"]], "metaseries_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.metaseries_metadata"]], "micromanager_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.micromanager_metadata"]], "name (filehandle attribute)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.name"]], "name (tiffpageseries attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.name"]], "name (tifftag attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffTag.name"]], "natural_sorted() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.natural_sorted"]], "ndpi_tags() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.ndpi_tags"]], "nih_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.nih_metadata"]], "nodata (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.nodata"]], "nullfunc() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.nullfunc"]], "offset (tiffframe attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.offset"]], "offset (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.offset"]], "offset (tiffpageseries attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.offset"]], "offset (tifftag attribute)": [[273, "id18"], [273, "sparkocr.utils.svs.tiffparser.TiffTag.offset"]], "offset() (tiffpageseries method)": [[273, "id14"]], "olympusini_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.olympusini_metadata"]], "open() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.open"]], "open() (openfilecache method)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache.open"]], "pages (tifffile attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.pages"]], "pages (tiffframe attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.pages"]], "pages (tiffpageseries attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.pages"]], "pages (tiffpages attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPages.pages"]], "pages() (tiffpage method)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.pages"]], "parent (tiffframe attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFrame.parent"]], "parent (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.parent"]], "parent (tiffpages attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPages.parent"]], "parse_filenames() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.parse_filenames"]], "parse_kwargs() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.parse_kwargs"]], "past (openfilecache attribute)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache.past"]], "path (filehandle attribute)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.path"]], "pattern (filesequence attribute)": [[273, "sparkocr.utils.svs.tiffparser.FileSequence.pattern"]], "pformat() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.pformat"]], "pformat_xml() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.pformat_xml"]], "photometric (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.photometric"]], "pilatus_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.pilatus_description_metadata"]], "pilatus_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.pilatus_metadata"]], "planarconfig (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.planarconfig"]], "predictor (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.predictor"]], "product() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.product"]], "read() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.read"]], "read_array() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.read_array"]], "read_bytes() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_bytes"]], "read_colormap() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_colormap"]], "read_cz_lsminfo() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_cz_lsminfo"]], "read_cz_sem() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_cz_sem"]], "read_exif_ifd() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_exif_ifd"]], "read_fei_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_fei_metadata"]], "read_gps_ifd() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_gps_ifd"]], "read_interoperability_ifd() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_interoperability_ifd"]], "read_json() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_json"]], "read_lsm_channelcolors() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_lsm_channelcolors"]], "read_lsm_eventlist() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_lsm_eventlist"]], "read_lsm_floatpairs() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_lsm_floatpairs"]], "read_lsm_positions() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_lsm_positions"]], "read_lsm_scaninfo() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_lsm_scaninfo"]], "read_lsm_timestamps() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_lsm_timestamps"]], "read_metaseries_catalog() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_metaseries_catalog"]], "read_micromanager_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_micromanager_metadata"]], "read_mm_header() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_mm_header"]], "read_mm_stamp() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_mm_stamp"]], "read_nih_image_header() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_nih_image_header"]], "read_numpy() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_numpy"]], "read_record() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.read_record"]], "read_scanimage_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_scanimage_metadata"]], "read_segments() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.read_segments"]], "read_sis() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_sis"]], "read_sis_ini() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_sis_ini"]], "read_tags() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_tags"]], "read_tvips_header() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_tvips_header"]], "read_uic1tag() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_uic1tag"]], "read_uic2tag() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_uic2tag"]], "read_uic3tag() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_uic3tag"]], "read_uic4tag() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_uic4tag"]], "read_uic_image_property() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_uic_image_property"]], "read_uic_tag() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_uic_tag"]], "read_utf8() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.read_utf8"]], "readinto() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.readinto"]], "recarray2dict() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.recarray2dict"]], "reorient() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.reorient"]], "repeat_nd() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.repeat_nd"]], "reshape_axes() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.reshape_axes"]], "reshape_nd() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.reshape_nd"]], "rowsperstrip (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.rowsperstrip"]], "sampleformat (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.sampleformat"]], "samplesperpixel (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.samplesperpixel"]], "scanimage_artist_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.scanimage_artist_metadata"]], "scanimage_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.scanimage_description_metadata"]], "scanimage_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.scanimage_metadata"]], "seek() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.seek"]], "sequence() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.sequence"]], "series (tifffile attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.series"]], "series() (tifffile method)": [[273, "id4"]], "shape (filesequence attribute)": [[273, "id3"], [273, "sparkocr.utils.svs.tiffparser.FileSequence.shape"]], "shape (tiffpage attribute)": [[273, "id9"], [273, "sparkocr.utils.svs.tiffparser.TiffPage.shape"]], "shape (tiffpageseries attribute)": [[273, "id13"], [273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.shape"]], "shaped (tiffpage attribute)": [[273, "id10"], [273, "sparkocr.utils.svs.tiffparser.TiffPage.shaped"]], "shaped_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.shaped_metadata"]], "sis_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.sis_metadata"]], "size (filehandle attribute)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.size"]], "size (openfilecache attribute)": [[273, "sparkocr.utils.svs.tiffparser.OpenFileCache.size"]], "snipstr() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.snipstr"]], "software (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.software"]], "sparkocr.utils.svs.tiffparser": [[273, "module-sparkocr.utils.svs.tiffparser"]], "squeeze_axes() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.squeeze_axes"]], "stack_pages() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.stack_pages"]], "stk_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.stk_description_metadata"]], "stk_metadata() (tifffile method)": [[273, "sparkocr.utils.svs.tiffparser.TiffFile.stk_metadata"]], "stripascii() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.stripascii"]], "stripnull() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.stripnull"]], "subfiletype (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.subfiletype"]], "svs_description_metadata() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.svs_description_metadata"]], "tags (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.tags"]], "tell() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.tell"]], "tiledepth (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.tiledepth"]], "tilelength (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.tilelength"]], "tilewidth (tiffpage attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPage.tilewidth"]], "transform (tiffpageseries attribute)": [[273, "sparkocr.utils.svs.tiffparser.TiffPageSeries.transform"]], "transpose_axes() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.transpose_axes"]], "unpack_rgb() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.unpack_rgb"]], "update_kwargs() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.update_kwargs"]], "validate_jhove() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.validate_jhove"]], "value (tifftag attribute)": [[273, "id19"], [273, "sparkocr.utils.svs.tiffparser.TiffTag.value"]], "valueoffset (tifftag attribute)": [[273, "id20"], [273, "sparkocr.utils.svs.tiffparser.TiffTag.valueoffset"]], "values() (tifftags method)": [[273, "sparkocr.utils.svs.tiffparser.TiffTags.values"]], "write() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.write"]], "write_array() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.write_array"]], "write_empty() (filehandle method)": [[273, "sparkocr.utils.svs.tiffparser.FileHandle.write_empty"]], "xml2dict() (in module sparkocr.utils.svs.tiffparser)": [[273, "sparkocr.utils.svs.tiffparser.xml2dict"]], "chunk() (in module sparkocr.utils.svs.tile_extraction)": [[274, "sparkocr.utils.svs.tile_extraction.chunk"]], "extract_tile() (in module sparkocr.utils.svs.tile_extraction)": [[274, "sparkocr.utils.svs.tile_extraction.extract_tile"]], "find_thumbnail_page() (in module sparkocr.utils.svs.tile_extraction)": [[274, "sparkocr.utils.svs.tile_extraction.find_thumbnail_page"]], "get_mid_level_tiles() (in module sparkocr.utils.svs.tile_extraction)": [[274, "sparkocr.utils.svs.tile_extraction.get_mid_level_tiles"]], "get_optimal_workers_and_batch() (in module sparkocr.utils.svs.tile_extraction)": [[274, "sparkocr.utils.svs.tile_extraction.get_optimal_workers_and_batch"]], "process_svs() (in module sparkocr.utils.svs.tile_extraction)": [[274, "sparkocr.utils.svs.tile_extraction.process_svs"]], "sparkocr.utils.svs.tile_extraction": [[274, "module-sparkocr.utils.svs.tile_extraction"]], "svs_to_tiles() (in module sparkocr.utils.svs.tile_extraction)": [[274, "sparkocr.utils.svs.tile_extraction.svs_to_tiles"]], "imageiterabledataset (class in sparkocr.utils.torchutils)": [[275, "sparkocr.utils.torchutils.ImageIterableDataset"]], "pandasdataset (class in sparkocr.utils.torchutils)": [[275, "sparkocr.utils.torchutils.PandasDataset"]], "dataframe (pandasdataset attribute)": [[275, "sparkocr.utils.torchutils.PandasDataset.dataframe"]], "device (pandasdataset attribute)": [[275, "sparkocr.utils.torchutils.PandasDataset.device"]], "get_chunk() (in module sparkocr.utils.torchutils)": [[275, "sparkocr.utils.torchutils.get_chunk"]], "pad_or_cut() (in module sparkocr.utils.torchutils)": [[275, "sparkocr.utils.torchutils.pad_or_cut"]], "sparkocr.utils.torchutils": [[275, "module-sparkocr.utils.torchutils"]], "target_key (pandasdataset attribute)": [[275, "sparkocr.utils.torchutils.PandasDataset.target_key"]], "testlightpipeline (class in test_basic_lp)": [[276, "test_basic_lp.TestLightPipeline"]], "get_pipeline() (testlightpipeline method)": [[276, "test_basic_lp.TestLightPipeline.get_pipeline"]], "test_basic_lp": [[276, "module-test_basic_lp"]], "test_basic_lp() (testlightpipeline method)": [[276, "test_basic_lp.TestLightPipeline.test_basic_lp"]], "test_binary_input_lp() (testlightpipeline method)": [[276, "test_basic_lp.TestLightPipeline.test_binary_input_lp"]]}})