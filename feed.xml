<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-09-10T04:12:13+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">JSL_MedS_NER_VLM_v1 (VLM - 2b - q16)</title><link href="/2025/08/10/jsl_meds_ner_vlm_2b_q16_v1_en.html" rel="alternate" type="text/html" title="JSL_MedS_NER_VLM_v1 (VLM - 2b - q16)" /><published>2025-08-10T00:00:00+00:00</published><updated>2025-08-10T00:00:00+00:00</updated><id>/2025/08/10/jsl_meds_ner_vlm_2b_q16_v1_en</id><content type="html" xml:base="/2025/08/10/jsl_meds_ner_vlm_2b_q16_v1_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q16_v1_en_6.1.0_3.0_1754841306490.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q16_v1_en_6.1.0_3.0_1754841306490.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala
import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;
prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;
&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setNPredict(512)
  .setTemperature(0.0f)
  .setTopK(1)
  .setTopP(1f)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.1f)
  .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

{
    &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;,
    &quot;Patient Age&quot;: 56,
    &quot;Patient Gender&quot;: &quot;Female&quot;,
    &quot;Hospital Number&quot;: &quot;MH005990453&quot;,
    &quot;Episode Number&quot;: &quot;030000528270&quot;,
    &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot;
}

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_ner_vlm_2b_q16_v1|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|3.5 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q16" /><category term="2b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; &quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0f) .setTopK(1) .setTopP(1f) .setRepeatLastN(256) .setRepeatPenalty(1.1f) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results { &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;, &quot;Patient Age&quot;: 56, &quot;Patient Gender&quot;: &quot;Female&quot;, &quot;Hospital Number&quot;: &quot;MH005990453&quot;, &quot;Episode Number&quot;: &quot;030000528270&quot;, &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot; } Model Information Model Name: jsl_meds_ner_vlm_2b_q16_v1 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 3.5 GB</summary></entry><entry><title type="html">JSL_MedS_NER_VLM_v2 (VLM - 2b - q16)</title><link href="/2025/08/10/jsl_meds_ner_vlm_2b_q16_v2_en.html" rel="alternate" type="text/html" title="JSL_MedS_NER_VLM_v2 (VLM - 2b - q16)" /><published>2025-08-10T00:00:00+00:00</published><updated>2025-08-10T00:00:00+00:00</updated><id>/2025/08/10/jsl_meds_ner_vlm_2b_q16_v2_en</id><content type="html" xml:base="/2025/08/10/jsl_meds_ner_vlm_2b_q16_v2_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q16_v2_en_6.1.0_3.0_1754839819895.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q16_v2_en_6.1.0_3.0_1754839819895.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala
import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;
prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;
&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setNPredict(512)
  .setTemperature(0.0f)
  .setTopK(1)
  .setTopP(1f)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.1f)
  .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

{
    &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;,
    &quot;Patient Age&quot;: 56,
    &quot;Patient Gender&quot;: &quot;Female&quot;,
    &quot;Hospital Number&quot;: &quot;MH005990453&quot;,
    &quot;Episode Number&quot;: &quot;030000528270&quot;,
    &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot;
}

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_ner_vlm_2b_q16_v2|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|3.5 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q16" /><category term="2b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; &quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_ner_vlm_2b_q16_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0f) .setTopK(1) .setTopP(1f) .setRepeatLastN(256) .setRepeatPenalty(1.1f) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results { &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;, &quot;Patient Age&quot;: 56, &quot;Patient Gender&quot;: &quot;Female&quot;, &quot;Hospital Number&quot;: &quot;MH005990453&quot;, &quot;Episode Number&quot;: &quot;030000528270&quot;, &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot; } Model Information Model Name: jsl_meds_ner_vlm_2b_q16_v2 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 3.5 GB</summary></entry><entry><title type="html">JSL_MedS_NER_VLM_v1 (VLM - 2b - q4)</title><link href="/2025/08/10/jsl_meds_ner_vlm_2b_q4_v1_en.html" rel="alternate" type="text/html" title="JSL_MedS_NER_VLM_v1 (VLM - 2b - q4)" /><published>2025-08-10T00:00:00+00:00</published><updated>2025-08-10T00:00:00+00:00</updated><id>/2025/08/10/jsl_meds_ner_vlm_2b_q4_v1_en</id><content type="html" xml:base="/2025/08/10/jsl_meds_ner_vlm_2b_q4_v1_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q4_v1_en_6.1.0_3.0_1754839724970.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q4_v1_en_6.1.0_3.0_1754839724970.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala
import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;
prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;
&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setNPredict(512)
  .setTemperature(0.0f)
  .setTopK(1)
  .setTopP(1f)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.1f)
  .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

{
    &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;,
    &quot;Patient Age&quot;: 56,
    &quot;Patient Gender&quot;: &quot;Female&quot;,
    &quot;Hospital Number&quot;: &quot;MH005990453&quot;,
    &quot;Episode Number&quot;: &quot;030000528270&quot;,
    &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot;
}

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_ner_vlm_2b_q4_v1|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|1.6 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q4" /><category term="2b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; &quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0f) .setTopK(1) .setTopP(1f) .setRepeatLastN(256) .setRepeatPenalty(1.1f) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results { &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;, &quot;Patient Age&quot;: 56, &quot;Patient Gender&quot;: &quot;Female&quot;, &quot;Hospital Number&quot;: &quot;MH005990453&quot;, &quot;Episode Number&quot;: &quot;030000528270&quot;, &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot; } Model Information Model Name: jsl_meds_ner_vlm_2b_q4_v1 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 1.6 GB</summary></entry><entry><title type="html">JSL_MedS_NER_VLM_v2 (VLM - 2b - q4)</title><link href="/2025/08/10/jsl_meds_ner_vlm_2b_q4_v2_en.html" rel="alternate" type="text/html" title="JSL_MedS_NER_VLM_v2 (VLM - 2b - q4)" /><published>2025-08-10T00:00:00+00:00</published><updated>2025-08-10T00:00:00+00:00</updated><id>/2025/08/10/jsl_meds_ner_vlm_2b_q4_v2_en</id><content type="html" xml:base="/2025/08/10/jsl_meds_ner_vlm_2b_q4_v2_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q4_v2_en_6.1.0_3.0_1754838193183.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q4_v2_en_6.1.0_3.0_1754838193183.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala
import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;
prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;
&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setNPredict(512)
  .setTemperature(0.0f)
  .setTopK(1)
  .setTopP(1f)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.1f)
  .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

{
    &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;,
    &quot;Patient Age&quot;: 56,
    &quot;Patient Gender&quot;: &quot;Female&quot;,
    &quot;Hospital Number&quot;: &quot;MH005990453&quot;,
    &quot;Episode Number&quot;: &quot;030000528270&quot;,
    &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot;
}

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_ner_vlm_2b_q4_v2|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|1.6 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q4" /><category term="2b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; &quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_ner_vlm_2b_q4_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0f) .setTopK(1) .setTopP(1f) .setRepeatLastN(256) .setRepeatPenalty(1.1f) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results { &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;, &quot;Patient Age&quot;: 56, &quot;Patient Gender&quot;: &quot;Female&quot;, &quot;Hospital Number&quot;: &quot;MH005990453&quot;, &quot;Episode Number&quot;: &quot;030000528270&quot;, &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot; } Model Information Model Name: jsl_meds_ner_vlm_2b_q4_v2 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 1.6 GB</summary></entry><entry><title type="html">JSL_MedS_NER_VLM_v1 (VLM - 2b - q8)</title><link href="/2025/08/10/jsl_meds_ner_vlm_2b_q8_v1_en.html" rel="alternate" type="text/html" title="JSL_MedS_NER_VLM_v1 (VLM - 2b - q8)" /><published>2025-08-10T00:00:00+00:00</published><updated>2025-08-10T00:00:00+00:00</updated><id>/2025/08/10/jsl_meds_ner_vlm_2b_q8_v1_en</id><content type="html" xml:base="/2025/08/10/jsl_meds_ner_vlm_2b_q8_v1_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q8_v1_en_6.1.0_3.0_1754840268928.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q8_v1_en_6.1.0_3.0_1754840268928.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala
import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;
prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;
&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setNPredict(512)
  .setTemperature(0.0f)
  .setTopK(1)
  .setTopP(1f)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.1f)
  .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

{
    &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;,
    &quot;Patient Age&quot;: 56,
    &quot;Patient Gender&quot;: &quot;Female&quot;,
    &quot;Hospital Number&quot;: &quot;MH005990453&quot;,
    &quot;Episode Number&quot;: &quot;030000528270&quot;,
    &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot;
}

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_ner_vlm_2b_q8_v1|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|2.3 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q8" /><category term="2b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; &quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0f) .setTopK(1) .setTopP(1f) .setRepeatLastN(256) .setRepeatPenalty(1.1f) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results { &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;, &quot;Patient Age&quot;: 56, &quot;Patient Gender&quot;: &quot;Female&quot;, &quot;Hospital Number&quot;: &quot;MH005990453&quot;, &quot;Episode Number&quot;: &quot;030000528270&quot;, &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot; } Model Information Model Name: jsl_meds_ner_vlm_2b_q8_v1 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 2.3 GB</summary></entry><entry><title type="html">JSL_MedS_NER_VLM_v2 (VLM - 2b - q8)</title><link href="/2025/08/10/jsl_meds_ner_vlm_2b_q8_v2_en.html" rel="alternate" type="text/html" title="JSL_MedS_NER_VLM_v2 (VLM - 2b - q8)" /><published>2025-08-10T00:00:00+00:00</published><updated>2025-08-10T00:00:00+00:00</updated><id>/2025/08/10/jsl_meds_ner_vlm_2b_q8_v2_en</id><content type="html" xml:base="/2025/08/10/jsl_meds_ner_vlm_2b_q8_v2_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q8_v2_en_6.1.0_3.0_1754838771687.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_ner_vlm_2b_q8_v2_en_6.1.0_3.0_1754838771687.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;

input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setNPredict(512)
    .setTemperature(0.0)
    .setTopK(1)
    .setTopP(1)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.1)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala
import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;
prompt = &quot;&quot;&quot;
# Template:
{
  &quot;Patient Name&quot;: &quot;string&quot;,
  &quot;Patient Age&quot;: &quot;integer&quot;,
  &quot;Patient Gender&quot;: &quot;string&quot;,
  &quot;Hospital Number&quot;: &quot;string&quot;,
  &quot;Episode Number&quot;: &quot;string&quot;,
  &quot;Episode Date&quot;: &quot;date-time&quot;
}
# Context:
&lt;image&gt;
&quot;&quot;&quot;
&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setNPredict(512)
  .setTemperature(0.0f)
  .setTopK(1)
  .setTopP(1f)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.1f)
  .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;, &quot;&lt;|im_start|&gt;&quot;])

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

{
    &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;,
    &quot;Patient Age&quot;: 56,
    &quot;Patient Gender&quot;: &quot;Female&quot;,
    &quot;Hospital Number&quot;: &quot;MH005990453&quot;,
    &quot;Episode Number&quot;: &quot;030000528270&quot;,
    &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot;
}

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_ner_vlm_2b_q8_v2|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|2.3 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q8" /><category term="2b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0) .setTopK(1) .setTopP(1) .setRepeatLastN(256) .setRepeatPenalty(1.1) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot; prompt = &quot;&quot;&quot; # Template: { &quot;Patient Name&quot;: &quot;string&quot;, &quot;Patient Age&quot;: &quot;integer&quot;, &quot;Patient Gender&quot;: &quot;string&quot;, &quot;Hospital Number&quot;: &quot;string&quot;, &quot;Episode Number&quot;: &quot;string&quot;, &quot;Episode Date&quot;: &quot;date-time&quot; } # Context: &amp;lt;image&amp;gt; &quot;&quot;&quot; &quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_ner_vlm_2b_q8_v2&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setNPredict(512) .setTemperature(0.0f) .setTopK(1) .setTopP(1f) .setRepeatLastN(256) .setRepeatPenalty(1.1f) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;, &quot;&amp;lt;|im_start|&amp;gt;&quot;]) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results { &quot;Patient Name&quot;: &quot;Ms RUKHSANA SHAHEEN&quot;, &quot;Patient Age&quot;: 56, &quot;Patient Gender&quot;: &quot;Female&quot;, &quot;Hospital Number&quot;: &quot;MH005990453&quot;, &quot;Episode Number&quot;: &quot;030000528270&quot;, &quot;Episode Date&quot;: &quot;2021-07-02T08:31:00&quot; } Model Information Model Name: jsl_meds_ner_vlm_2b_q8_v2 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 2.3 GB</summary></entry><entry><title type="html">JSL_MedS_VLM_v1 (VLM - 3b - q16)</title><link href="/2025/08/08/jsl_meds_vlm_3b_q16_v1_en.html" rel="alternate" type="text/html" title="JSL_MedS_VLM_v1 (VLM - 3b - q16)" /><published>2025-08-08T00:00:00+00:00</published><updated>2025-08-08T00:00:00+00:00</updated><id>/2025/08/08/jsl_meds_vlm_3b_q16_v1_en</id><content type="html" xml:base="/2025/08/08/jsl_meds_vlm_3b_q16_v1_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_vlm_3b_q16_v1_en_6.1.0_3.0_1754688057612.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_vlm_3b_q16_v1_en_6.1.0_3.0_1754688057612.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;vicuna&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setMinKeep(0)
    .setMinP(0.05)
    .setNPredict(-1)
    .setNProbs(0)
    .setPenalizeNl(False)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.18)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;])
    .setTemperature(0.05)
    .setTfsZ(1)
    .setTypicalP(1)
    .setTopK(40)
    .setTopP(0.95)
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;

input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;vicuna&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setMinKeep(0)
    .setMinP(0.05)
    .setNPredict(-1)
    .setNProbs(0)
    .setPenalizeNl(False)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.18)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;])
    .setTemperature(0.05)
    .setTfsZ(1)
    .setTypicalP(1)
    .setTopK(40)
    .setTopP(0.95)
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala
import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_vlm_3b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;vicuna&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setMinKeep(0)
  .setMinP(0.05)
  .setNPredict(-1)
  .setNProbs(0)
  .setPenalizeNl(false)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.18f)
  .setStopStrings(Array(&quot;&lt;/s&gt;&quot;, &quot;User:&quot;))
  .setTemperature(0.05f)
  .setTfsZ(1f)
  .setTypicalP(1f)
  .setTopK(40)
  .setTopP(0.95f)

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash
The document you provided is an outpatient summary from the Department of Rheumatology at Human Care Medical Charitable Trust. Here's the extracted information:

Demographic Information:
- Name: Ms Rukhsana Shaheen
  - Age/ Sex: 56 yrs/Female

Clinical Disease Information:
- Disease Diagnosis: Systemic Lupus Erythematosus (SLE) with Scleroderma overlap syndrome.
- Additional Conditions: Interstitial lung disease on medications.

Medication Information:
1. Systemic Steroids:
   - Prednisolone 0.5 mg twice daily for 2 weeks followed by tapering off over next two months to complete course in four weeks.

2. Antimalarials:
   - Mycophenolate mofetil 500 mg once a day before breakfast as advised after five days if ulcers do not heal within that period.

3. Immunosuppressants:
   - Azathioprine 75 mg once a day starting immediately upon diagnosis until further instructions are given or symptoms improve significantly enough to stop it without adverse effects observed during follow-up visits.

4. Other Medications:
   - L-Methylfolate calcium 400 µg one tablet per day
   - Clopidogrel 75 mg once daily
   - Ciprofloxacin 250 mg twice daily initially, then reduced dose depending on response and side effect profile monitored closely

This summary outlines the treatment plan which includes various immunomodulatory drugs aimed at managing autoimmune conditions like Systemic Lupus Erythematosus (SLE) along with other supportive measures such as corticosteroids and antifungal prophylaxis against infections due to underlying interstitial lung disease complications. Regular monitoring of clinical parameters including blood tests will be essential throughout this regimen for optimal management outcomes.
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_vlm_3b_q16_v1|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|6.0 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q16" /><category term="3b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(False) .setRepeatLastN(256) .setRepeatPenalty(1.18) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;]) .setTemperature(0.05) .setTfsZ(1) .setTypicalP(1) .setTopK(40) .setTopP(0.95) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(False) .setRepeatLastN(256) .setRepeatPenalty(1.18) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;]) .setTemperature(0.05) .setTfsZ(1) .setTypicalP(1) .setTopK(40) .setTopP(0.95) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_vlm_3b_q16_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(false) .setRepeatLastN(256) .setRepeatPenalty(1.18f) .setStopStrings(Array(&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;)) .setTemperature(0.05f) .setTfsZ(1f) .setTypicalP(1f) .setTopK(40) .setTopP(0.95f) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results The document you provided is an outpatient summary from the Department of Rheumatology at Human Care Medical Charitable Trust. Here's the extracted information: Demographic Information: - Name: Ms Rukhsana Shaheen - Age/ Sex: 56 yrs/Female Clinical Disease Information: - Disease Diagnosis: Systemic Lupus Erythematosus (SLE) with Scleroderma overlap syndrome. - Additional Conditions: Interstitial lung disease on medications. Medication Information: 1. Systemic Steroids: - Prednisolone 0.5 mg twice daily for 2 weeks followed by tapering off over next two months to complete course in four weeks. 2. Antimalarials: - Mycophenolate mofetil 500 mg once a day before breakfast as advised after five days if ulcers do not heal within that period. 3. Immunosuppressants: - Azathioprine 75 mg once a day starting immediately upon diagnosis until further instructions are given or symptoms improve significantly enough to stop it without adverse effects observed during follow-up visits. 4. Other Medications: - L-Methylfolate calcium 400 µg one tablet per day - Clopidogrel 75 mg once daily - Ciprofloxacin 250 mg twice daily initially, then reduced dose depending on response and side effect profile monitored closely This summary outlines the treatment plan which includes various immunomodulatory drugs aimed at managing autoimmune conditions like Systemic Lupus Erythematosus (SLE) along with other supportive measures such as corticosteroids and antifungal prophylaxis against infections due to underlying interstitial lung disease complications. Regular monitoring of clinical parameters including blood tests will be essential throughout this regimen for optimal management outcomes. Model Information Model Name: jsl_meds_vlm_3b_q16_v1 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 6.0 GB</summary></entry><entry><title type="html">JSL_MedS_VLM_v1 (3B - q4)</title><link href="/2025/08/08/jsl_meds_vlm_3b_q4_v1_en.html" rel="alternate" type="text/html" title="JSL_MedS_VLM_v1 (3B - q4)" /><published>2025-08-08T00:00:00+00:00</published><updated>2025-08-08T00:00:00+00:00</updated><id>/2025/08/08/jsl_meds_vlm_3b_q4_v1_en</id><content type="html" xml:base="/2025/08/08/jsl_meds_vlm_3b_q4_v1_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_vlm_3b_q4_v1_en_6.1.0_3.0_1754665828278.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_vlm_3b_q4_v1_en_6.1.0_3.0_1754665828278.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.sql.functions import lit
from pyspark.ml import Pipeline

!mkdir -p images
!wget -O images/prescription_01.png   &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png   &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

from sparknlp_jsl.utils import *

prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;

input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;./images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = DocumentAssembler()\
    .setInputCol(&quot;prompt&quot;)\
    .setOutputCol(&quot;document&quot;)

image_assembler = ImageAssembler()\
    .setInputCol(&quot;image&quot;)\
    .setOutputCol(&quot;image_assembler&quot;)

medical_vision_llm = MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;, &quot;image_assembler&quot;])\
    .setOutputCol(&quot;completions&quot;)\
    .setChatTemplate(&quot;vicuna&quot;)\
    .setBatchSize(4)\
    .setNGpuLayers(99)\
    .setNCtx(4096)\
    .setMinKeep(0)\
    .setMinP(0.05)\
    .setNPredict(-1)\
    .setNProbs(0)\
    .setPenalizeNl(False)\
    .setRepeatLastN(256)\
    .setRepeatPenalty(1.18)\
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;])\
    .setTemperature(0.05)\
    .setTfsZ(1)\
    .setTypicalP(1)\
    .setTopK(40)\
    .setTopP(0.95)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medical_vision_llm
])

result = pipeline.fit(input_df).transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png   &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png   &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;

prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;

data = nlp.ImageAssembler.loadImagesAsBytes(spark, '/content/images')
data = data.withColumn(&quot;caption&quot;, lit(prompt))

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;caption&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;vicuna&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setMinKeep(0)
    .setMinP(0.05)
    .setNPredict(-1)
    .setNProbs(0)
    .setPenalizeNl(False)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.18)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;])
    .setTemperature(0.05)
    .setTfsZ(1)
    .setTypicalP(1)
    .setTopK(40)
    .setTopP(0.95)
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(data)
result = model.transform(data)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala

import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_vlm_3b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;vicuna&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setMinKeep(0)
  .setMinP(0.05)
  .setNPredict(-1)
  .setNProbs(0)
  .setPenalizeNl(false)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.18f)
  .setStopStrings(Array(&quot;&lt;/s&gt;&quot;, &quot;User:&quot;))
  .setTemperature(0.05f)
  .setTfsZ(1f)
  .setTypicalP(1f)
  .setTopK(40)
  .setTopP(0.95f)

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

The outpatient summary provided in the document indicates that Ms. Rukhsana Shaheen is 56 years old and female. She has been diagnosed with systemic lupus erythematosus (SLE) along with scleroderma overlap syndrome due to interstitial lung disease on medications. Her current symptoms include tightness of skin around her fists and ulcers appearing at the pulp area of her fingers. The treatment advised includes:

    1. Sildenafil Citrate - 0.5 mg twice daily for five days as an initial step before switching to Prednisone once ulceration does not heal within two weeks.
    2. Mycophenolate Mofetil - 500mg tablets taken twice per day after breakfast.
    3. Clopidogrel - 75mg tablet given every morning until溃疡 heals completely or if there's no improvement over four weeks.
    4. L-Methylfolate Calcium - 400ug one tablet each time it’s mealtime. These treatments aim to manage both conditions effectively while minimizing side effects from long-term steroid use which could potentially lead to complications such as osteoporosis or infections like those mentioned above.

Please note this information should be reviewed by a healthcare professional prior to implementation based upon individual patient needs, medical history, response to previous therapies etc.

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_vlm_3b_q4_v1|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|2.6 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q4" /><category term="3b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.sql.functions import lit from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; from sparknlp_jsl.utils import * prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;./images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = DocumentAssembler()\ .setInputCol(&quot;prompt&quot;)\ .setOutputCol(&quot;document&quot;) image_assembler = ImageAssembler()\ .setInputCol(&quot;image&quot;)\ .setOutputCol(&quot;image_assembler&quot;) medical_vision_llm = MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;, &quot;image_assembler&quot;])\ .setOutputCol(&quot;completions&quot;)\ .setChatTemplate(&quot;vicuna&quot;)\ .setBatchSize(4)\ .setNGpuLayers(99)\ .setNCtx(4096)\ .setMinKeep(0)\ .setMinP(0.05)\ .setNPredict(-1)\ .setNProbs(0)\ .setPenalizeNl(False)\ .setRepeatLastN(256)\ .setRepeatPenalty(1.18)\ .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;])\ .setTemperature(0.05)\ .setTfsZ(1)\ .setTypicalP(1)\ .setTopK(40)\ .setTopP(0.95) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medical_vision_llm ]) result = pipeline.fit(input_df).transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; data = nlp.ImageAssembler.loadImagesAsBytes(spark, '/content/images') data = data.withColumn(&quot;caption&quot;, lit(prompt)) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(False) .setRepeatLastN(256) .setRepeatPenalty(1.18) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;]) .setTemperature(0.05) .setTfsZ(1) .setTypicalP(1) .setTopK(40) .setTopP(0.95) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(data) result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_vlm_3b_q4_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(false) .setRepeatLastN(256) .setRepeatPenalty(1.18f) .setStopStrings(Array(&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;)) .setTemperature(0.05f) .setTfsZ(1f) .setTypicalP(1f) .setTopK(40) .setTopP(0.95f) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results The outpatient summary provided in the document indicates that Ms. Rukhsana Shaheen is 56 years old and female. She has been diagnosed with systemic lupus erythematosus (SLE) along with scleroderma overlap syndrome due to interstitial lung disease on medications. Her current symptoms include tightness of skin around her fists and ulcers appearing at the pulp area of her fingers. The treatment advised includes: 1. Sildenafil Citrate - 0.5 mg twice daily for five days as an initial step before switching to Prednisone once ulceration does not heal within two weeks. 2. Mycophenolate Mofetil - 500mg tablets taken twice per day after breakfast. 3. Clopidogrel - 75mg tablet given every morning until溃疡 heals completely or if there's no improvement over four weeks. 4. L-Methylfolate Calcium - 400ug one tablet each time it’s mealtime. These treatments aim to manage both conditions effectively while minimizing side effects from long-term steroid use which could potentially lead to complications such as osteoporosis or infections like those mentioned above. Please note this information should be reviewed by a healthcare professional prior to implementation based upon individual patient needs, medical history, response to previous therapies etc. Model Information Model Name: jsl_meds_vlm_3b_q4_v1 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 2.6 GB</summary></entry><entry><title type="html">JSL_MedS_VLM_v1 (VLM - 3b - q8)</title><link href="/2025/08/08/jsl_meds_vlm_3b_q8_v1_en.html" rel="alternate" type="text/html" title="JSL_MedS_VLM_v1 (VLM - 3b - q8)" /><published>2025-08-08T00:00:00+00:00</published><updated>2025-08-08T00:00:00+00:00</updated><id>/2025/08/08/jsl_meds_vlm_3b_q8_v1_en</id><content type="html" xml:base="/2025/08/08/jsl_meds_vlm_3b_q8_v1_en.html">## Description

This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/jsl_meds_vlm_3b_q8_v1_en_6.1.0_3.0_1754686030561.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/jsl_meds_vlm_3b_q8_v1_en_6.1.0_3.0_1754686030561.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler, ImageAssembler
from sparknlp_jsl.utils import vision_llm_preprocessor
from sparknlp_jsl.annotator import MedicalVisionLLM
from pyspark.ml import Pipeline

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;
 
prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;
 
input_df = vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;vicuna&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setMinKeep(0)
    .setMinP(0.05)
    .setNPredict(-1)
    .setNProbs(0)
    .setPenalizeNl(False)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.18)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;])
    .setTemperature(0.05)
    .setTfsZ(1)
    .setTypicalP(1)
    .setTopK(40)
    .setTopP(0.95)
)

pipeline = Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```

{:.jsl-block}
```python
from johnsnowlabs import nlp, medical

!mkdir -p images

!wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;
!wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;
 
prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;
 
input_df = nlp.vision_llm_preprocessor(
    spark=spark,
    images_path=&quot;images&quot;,
    prompt=prompt,
    output_col_name=&quot;prompt&quot;
)

document_assembler = (
    nlp.DocumentAssembler()
    .setInputCol(&quot;prompt&quot;)
    .setOutputCol(&quot;caption_document&quot;)
)

image_assembler = (
    nlp.ImageAssembler()
    .setInputCol(&quot;image&quot;)
    .setOutputCol(&quot;image_assembler&quot;)
)

medicalVisionLLM = (
    medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;])
    .setOutputCol(&quot;completions&quot;)
    .setChatTemplate(&quot;vicuna&quot;)
    .setBatchSize(4)
    .setNGpuLayers(99)
    .setNCtx(4096)
    .setMinKeep(0)
    .setMinP(0.05)
    .setNPredict(-1)
    .setNProbs(0)
    .setPenalizeNl(False)
    .setRepeatLastN(256)
    .setRepeatPenalty(1.18)
    .setStopStrings([&quot;&lt;/s&gt;&quot;, &quot;User:&quot;])
    .setTemperature(0.05)
    .setTfsZ(1)
    .setTypicalP(1)
    .setTopK(40)
    .setTopP(0.95)
)

pipeline = nlp.Pipeline().setStages([
    document_assembler,
    image_assembler,
    medicalVisionLLM
])

model = pipeline.fit(input_df)
result = model.transform(input_df)

result.selectExpr(
    &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot;
).show(truncate=False)

```
```scala

import com.johnsnowlabs.nlp.base._
import com.johnsnowlabs.nlp.annotators._
import org.apache.spark.sql.functions._
import org.apache.spark.ml.Pipeline

import sys.process._
&quot;mkdir -p images&quot;.!
&quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.!
&quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.!

val prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot;

val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;)
  .withColumn(&quot;caption&quot;, lit(prompt))

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;caption&quot;)
  .setOutputCol(&quot;caption_document&quot;)

val imageAssembler = new ImageAssembler()
  .setInputCol(&quot;image&quot;)
  .setOutputCol(&quot;image_assembler&quot;)

val medicalVisionLLM = MedicalVisionLLM
  .pretrained(&quot;jsl_meds_vlm_3b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;))
  .setOutputCol(&quot;completions&quot;)
  .setChatTemplate(&quot;vicuna&quot;)
  .setBatchSize(4)
  .setNGpuLayers(99)
  .setNCtx(4096)
  .setMinKeep(0)
  .setMinP(0.05)
  .setNPredict(-1)
  .setNProbs(0)
  .setPenalizeNl(false)
  .setRepeatLastN(256)
  .setRepeatPenalty(1.18f)
  .setStopStrings(Array(&quot;&lt;/s&gt;&quot;, &quot;User:&quot;))
  .setTemperature(0.05f)
  .setTfsZ(1f)
  .setTypicalP(1f)
  .setTopK(40)
  .setTopP(0.95f)

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  imageAssembler,
  medicalVisionLLM
))

val model = pipeline.fit(data)
val result = model.transform(data)

result.selectExpr(
  &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;,
  &quot;completions.result&quot;
).show(false)

```
&lt;/div&gt;

## Results

```bash

The document you provided is an outpatient summary from the Department of Rheumatology at Human Care Medical Charitable Trust. Here's the extracted information:

Demographic Information:
    Name: Ms Rukhsana Shaheen
    Age / Sex: 56 yrs / Female

Clinical Disease Information:
    Disease Diagnosis: Systemic Lupus Erythematosus (SLE) with Scleroderma overlap syndrome.
    Additional Conditions: Interstitial Lung Disease on Medication.

Medications Prescribed:
    Systemic Steroids:
        Prednisolone 0.5 mg twice daily
    Antimalarials:
        Mycophenolate mofetil 500 mg two tablets before meals
    Immunosuppressants:
        Azathioprine 75 mg once daily after breakfast
    Antiplatelet Agents:
        Clopidogrel 75 mg once daily
    Corticosteroid Injections:
        Triamcinolone acetonide injection in finger joints as needed for flare-ups
    Other Medications:
        L-Methylfolate calcium 400 µg one tablet per day
        Amlodipine 5 mg once a day
        Ciprofloxacin 250 mg twice a day
        Other medications not specified but likely related to systemic lupus erythematosus management such as methotrexate or cyclophosphamide depending on the severity of symptoms

This summary provides an overview of Ms Rukhsana Shaheen's medical condition along with her current treatment regimen under the care of Dr Darshan Singh Bhakuni at Human Care Medical Charitable Trust.

If you need further details about any specific medication or if there are additional questions regarding this information, please let me know!

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|jsl_meds_vlm_3b_q8_v1|
|Compatibility:|Healthcare NLP 6.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[caption_document, image_assembler]|
|Output Labels:|[completions]|
|Language:|en|
|Size:|3.9 GB|</content><author><name>John Snow Labs</name></author><category term="medical" /><category term="clinical" /><category term="vlm" /><category term="q8" /><category term="3b" /><category term="en" /><category term="licensed" /><category term="llamacpp" /><summary type="html">Description This vision-language model is trained to understand medical images and extract key details such as patient demographics, clinical conditions, and prescribed medications, etc. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler, ImageAssembler from sparknlp_jsl.utils import vision_llm_preprocessor from sparknlp_jsl.annotator import MedicalVisionLLM from pyspark.ml import Pipeline !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; input_df = vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(False) .setRepeatLastN(256) .setRepeatPenalty(1.18) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;]) .setTemperature(0.05) .setTfsZ(1) .setTypicalP(1) .setTopK(40) .setTopP(0.95) ) pipeline = Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) from johnsnowlabs import nlp, medical !mkdir -p images !wget -O images/prescription_01.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot; !wget -O images/prescription_02.png -q &quot;https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot; prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; input_df = nlp.vision_llm_preprocessor( spark=spark, images_path=&quot;images&quot;, prompt=prompt, output_col_name=&quot;prompt&quot; ) document_assembler = ( nlp.DocumentAssembler() .setInputCol(&quot;prompt&quot;) .setOutputCol(&quot;caption_document&quot;) ) image_assembler = ( nlp.ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) ) medicalVisionLLM = ( medical.MedicalVisionLLM.pretrained(&quot;jsl_meds_vlm_3b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols([&quot;caption_document&quot;, &quot;image_assembler&quot;]) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(False) .setRepeatLastN(256) .setRepeatPenalty(1.18) .setStopStrings([&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;]) .setTemperature(0.05) .setTfsZ(1) .setTypicalP(1) .setTopK(40) .setTopP(0.95) ) pipeline = nlp.Pipeline().setStages([ document_assembler, image_assembler, medicalVisionLLM ]) model = pipeline.fit(input_df) result = model.transform(input_df) result.selectExpr( &quot;reverse(split(image.origin, '/')) as image_name&quot;, &quot;completions.result&quot; ).show(truncate=False) import com.johnsnowlabs.nlp.base._ import com.johnsnowlabs.nlp.annotators._ import org.apache.spark.sql.functions._ import org.apache.spark.ml.Pipeline import sys.process._ &quot;mkdir -p images&quot;.! &quot;wget -O images/prescription_01.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_01.png&quot;.! &quot;wget -O images/prescription_02.png https://raw.githubusercontent.com/JohnSnowLabs/spark-nlp-workshop/master/healthcare-nlp/data/ocr/prescription_02.png&quot;.! val prompt = &quot;&quot;&quot;Extract demografig, clinical disease and medication informations&quot;&quot;&quot; val data = ImageAssembler.loadImagesAsBytes(spark, &quot;/content/images&quot;) .withColumn(&quot;caption&quot;, lit(prompt)) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;caption&quot;) .setOutputCol(&quot;caption_document&quot;) val imageAssembler = new ImageAssembler() .setInputCol(&quot;image&quot;) .setOutputCol(&quot;image_assembler&quot;) val medicalVisionLLM = MedicalVisionLLM .pretrained(&quot;jsl_meds_vlm_3b_q8_v1&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;caption_document&quot;, &quot;image_assembler&quot;)) .setOutputCol(&quot;completions&quot;) .setChatTemplate(&quot;vicuna&quot;) .setBatchSize(4) .setNGpuLayers(99) .setNCtx(4096) .setMinKeep(0) .setMinP(0.05) .setNPredict(-1) .setNProbs(0) .setPenalizeNl(false) .setRepeatLastN(256) .setRepeatPenalty(1.18f) .setStopStrings(Array(&quot;&amp;lt;/s&amp;gt;&quot;, &quot;User:&quot;)) .setTemperature(0.05f) .setTfsZ(1f) .setTypicalP(1f) .setTopK(40) .setTopP(0.95f) val pipeline = new Pipeline().setStages(Array( documentAssembler, imageAssembler, medicalVisionLLM )) val model = pipeline.fit(data) val result = model.transform(data) result.selectExpr( &quot;reverse(split(image.origin, '/'))[0] as image_name&quot;, &quot;completions.result&quot; ).show(false) Results The document you provided is an outpatient summary from the Department of Rheumatology at Human Care Medical Charitable Trust. Here's the extracted information: Demographic Information: Name: Ms Rukhsana Shaheen Age / Sex: 56 yrs / Female Clinical Disease Information: Disease Diagnosis: Systemic Lupus Erythematosus (SLE) with Scleroderma overlap syndrome. Additional Conditions: Interstitial Lung Disease on Medication. Medications Prescribed: Systemic Steroids: Prednisolone 0.5 mg twice daily Antimalarials: Mycophenolate mofetil 500 mg two tablets before meals Immunosuppressants: Azathioprine 75 mg once daily after breakfast Antiplatelet Agents: Clopidogrel 75 mg once daily Corticosteroid Injections: Triamcinolone acetonide injection in finger joints as needed for flare-ups Other Medications: L-Methylfolate calcium 400 µg one tablet per day Amlodipine 5 mg once a day Ciprofloxacin 250 mg twice a day Other medications not specified but likely related to systemic lupus erythematosus management such as methotrexate or cyclophosphamide depending on the severity of symptoms This summary provides an overview of Ms Rukhsana Shaheen's medical condition along with her current treatment regimen under the care of Dr Darshan Singh Bhakuni at Human Care Medical Charitable Trust. If you need further details about any specific medication or if there are additional questions regarding this information, please let me know! Model Information Model Name: jsl_meds_vlm_3b_q8_v1 Compatibility: Healthcare NLP 6.1.0+ License: Licensed Edition: Official Input Labels: [caption_document, image_assembler] Output Labels: [completions] Language: en Size: 3.9 GB</summary></entry><entry><title type="html">Phenotype Entity Recognition and HPO Mapping to UMLS, EOM, Genes, and Diseases (Pretrained Pipeline)</title><link href="/2025/08/07/hpo_mapper_pipeline_v3_en.html" rel="alternate" type="text/html" title="Phenotype Entity Recognition and HPO Mapping to UMLS, EOM, Genes, and Diseases (Pretrained Pipeline)" /><published>2025-08-07T00:00:00+00:00</published><updated>2025-08-07T00:00:00+00:00</updated><id>/2025/08/07/hpo_mapper_pipeline_v3_en</id><content type="html" xml:base="/2025/08/07/hpo_mapper_pipeline_v3_en.html">## Description

This pipeline is designed to extract phenotype-related entities from clinical or biomedical text, map them to their corresponding Human Phenotype Ontology (HPO) codes, and determine their assertion status (e.g., present, absent, suspected).
In addition to HPO mapping, the pipeline also performs the following:
 - Maps HPO codes to UMLS CUIs
 - Identifies associations with Extraocular Movements (EOM)
 - Maps HPO terms to related genes
 - Retrieves diseases associated with those genes
This pretrained pipeline enables deeper phenotypic and genomic insights directly from unstructured text.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/healthcare-nlp/06.1.Code_Mapping_Pipelines.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_v3_en_6.0.4_3.4_1754587104660.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_v3_en_6.0.4_3.4_1754587104660.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline_v3&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.
Mother is A+, GBS unknown, and infant delivered
for decreasing fetal movement and preeclampsia.
Long finger and toes detected.
he has a increased overbite expression.
&quot;&quot;&quot;)

```

{:.jsl-block}
```python

pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline_v3&quot;, &quot;en&quot;, &quot;clinical/models&quot;)


result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.
Mother is A+, GBS unknown, and infant delivered
for decreasing fetal movement and preeclampsia.
Long finger and toes detected.
he has a increased overbite expression.
&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline_v3&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.
Mother is A+, GBS unknown, and infant delivered
for decreasing fetal movement and preeclampsia.
Long finger and toes detected.
he has a increased overbite expression.
&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash

+-----------------------+-------------------------+-----+---+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+------------+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
|           matched_text|                ner_chunk|begin|end|assertion|  hpo_code|                                                                                                                                            hpo_parent|umls_mapping|         eom_mapping|                                                                                                                                          gene_disease|
+-----------------------+-------------------------+-----+---+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+------------+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
|      apnea prematurity|     apnea of prematurity|   16| 35|  present|HP:0034236|HP:0002104: Apnea ## Lack of breathing with no movement of the respiratory muscles and no exchange of air in the lungs. This term refers to a dispo...|        NONE|                NONE|                                                                                                                                                  NONE|
|     hyperbilirubinemia|       hyperbilirubinemia|  104|121|  present|HP:0002904|HP:0033479: Abnormal circulating bilirubin concentration ##  =&gt; HP:0010995: Abnormal circulating dicarboxylic acid concentration ## A dicarboxylic ...|    C1142335|                NONE|{&quot;ADK&quot;: [&quot;poor speech&quot;, &quot;seizure&quot;, &quot;hypotonia&quot;, &quot;increased csf methionine concentration&quot;, &quot;hepatic steatosis&quot;, &quot;cholestasis&quot;, &quot;muscle weakness&quot;, &quot;a...|
|                 sepsis|                   sepsis|  186|191|  present|HP:0100806|HP:0010978: Abnormality of immune system physiology ## A functional abnormality of the immune system. =&gt; HP:0002715: Abnormality of the immune syst...|        NONE|                NONE|{&quot;ABCA3&quot;: [&quot;honeycomb lung&quot;, &quot;ground-glass opacification&quot;, &quot;nonspecific interstitial pneumonia&quot;, &quot;bronchial wall thickening&quot;, &quot;sepsis&quot;, &quot;clubbing&quot;,...|
|decrease fetal movement|decreasing fetal movement|  257|281|  present|HP:0001558|HP:0001557: Prenatal movement abnormality ## Fetal movements generally become apparent during the second trimester of pregnancy around the 20th wee...|        NONE|                NONE|{&quot;AARS1&quot;: [&quot;distal muscle weakness&quot;, &quot;limb dystonia&quot;, &quot;bilateral sensorineural hearing impairment&quot;, &quot;abnormality of prenatal development or birth&quot;,...|
|           preeclampsia|             preeclampsia|  287|298|  present|HP:0100602|HP:0100603: Toxemia of pregnancy ## Pregnancy-induced toxic reactions of the mother that can be as harmless as slight Maternal hypertension or as l...|        NONE|                NONE|{&quot;SLC25A20&quot;: [&quot;reduced circulating 6-pyruvoyltetrahydropterin synthase activity&quot;, &quot;reduced tissue carnitine-acylcarnitine translocase activity&quot;, &quot;e...|
|            Long finger|              Long finger|  301|311|  present|HP:0100807|HP:0001167: Abnormal finger morphology ## An anomaly of a finger. =&gt; HP:0001155: Abnormality of the hand ## An abnormality affecting one or both ha...|        NONE|EOM:41535e8ed3dc9076|{&quot;BIN1&quot;: [&quot;distal muscle weakness&quot;, &quot;exercise-induced myalgia&quot;, &quot;proximal muscle weakness&quot;, &quot;generalized amyotrophy&quot;, &quot;generalized hypotonia&quot;, &quot;lon...|
|     increased overbite|       increased overbite|  341|358|  present|HP:0011094|HP:0000692: Tooth malposition ## Abnormal alignment, positioning, or spacing of the teeth, i.e., misaligned teeth. =&gt; HP:0000164: Abnormality of th...|        NONE|                NONE|{&quot;EP300&quot;: [&quot;adducted thumb&quot;, &quot;syndactyly&quot;, &quot;trichiasis&quot;, &quot;simple ear&quot;, &quot;spina bifida&quot;, &quot;sporadic&quot;, &quot;panic attack&quot;, &quot;generalized hypotonia&quot;, &quot;agenes...|
+-----------------------+-------------------------+-----+---+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+------------+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|hpo_mapper_pipeline_v3|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.4+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.8 GB|

## Included Models

- DocumentAssembler
- SentenceDetector
- TokenizerModel
- InternalDocumentSplitter
- TokenizerModel
- TextMatcherInternalModel
- ChunkMergeModel
- WordEmbeddingsModel
- ChunkMapperModel
- Mapper2Chunk
- ChunkMapperModel
- ChunkMapperModel
- ChunkMapperModel
- ChunkMapperModel
- AssertionDLModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="hpo" /><category term="pipeline" /><category term="ner" /><category term="assertion" /><category term="mapper" /><category term="disease" /><category term="gene" /><category term="eom" /><summary type="html">Description This pipeline is designed to extract phenotype-related entities from clinical or biomedical text, map them to their corresponding Human Phenotype Ontology (HPO) codes, and determine their assertion status (e.g., present, absent, suspected). In addition to HPO mapping, the pipeline also performs the following: Maps HPO codes to UMLS CUIs Identifies associations with Extraocular Movements (EOM) Maps HPO terms to related genes Retrieves diseases associated with those genes This pretrained pipeline enables deeper phenotypic and genomic insights directly from unstructured text. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline_v3&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation. Mother is A+, GBS unknown, and infant delivered for decreasing fetal movement and preeclampsia. Long finger and toes detected. he has a increased overbite expression. &quot;&quot;&quot;) pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline_v3&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation. Mother is A+, GBS unknown, and infant delivered for decreasing fetal movement and preeclampsia. Long finger and toes detected. he has a increased overbite expression. &quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline_v3&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation. Mother is A+, GBS unknown, and infant delivered for decreasing fetal movement and preeclampsia. Long finger and toes detected. he has a increased overbite expression. &quot;&quot;&quot;) Results +-----------------------+-------------------------+-----+---+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+------------+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+ | matched_text| ner_chunk|begin|end|assertion| hpo_code| hpo_parent|umls_mapping| eom_mapping| gene_disease| +-----------------------+-------------------------+-----+---+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+------------+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+ | apnea prematurity| apnea of prematurity| 16| 35| present|HP:0034236|HP:0002104: Apnea ## Lack of breathing with no movement of the respiratory muscles and no exchange of air in the lungs. This term refers to a dispo...| NONE| NONE| NONE| | hyperbilirubinemia| hyperbilirubinemia| 104|121| present|HP:0002904|HP:0033479: Abnormal circulating bilirubin concentration ## =&amp;gt; HP:0010995: Abnormal circulating dicarboxylic acid concentration ## A dicarboxylic ...| C1142335| NONE|{&quot;ADK&quot;: [&quot;poor speech&quot;, &quot;seizure&quot;, &quot;hypotonia&quot;, &quot;increased csf methionine concentration&quot;, &quot;hepatic steatosis&quot;, &quot;cholestasis&quot;, &quot;muscle weakness&quot;, &quot;a...| | sepsis| sepsis| 186|191| present|HP:0100806|HP:0010978: Abnormality of immune system physiology ## A functional abnormality of the immune system. =&amp;gt; HP:0002715: Abnormality of the immune syst...| NONE| NONE|{&quot;ABCA3&quot;: [&quot;honeycomb lung&quot;, &quot;ground-glass opacification&quot;, &quot;nonspecific interstitial pneumonia&quot;, &quot;bronchial wall thickening&quot;, &quot;sepsis&quot;, &quot;clubbing&quot;,...| |decrease fetal movement|decreasing fetal movement| 257|281| present|HP:0001558|HP:0001557: Prenatal movement abnormality ## Fetal movements generally become apparent during the second trimester of pregnancy around the 20th wee...| NONE| NONE|{&quot;AARS1&quot;: [&quot;distal muscle weakness&quot;, &quot;limb dystonia&quot;, &quot;bilateral sensorineural hearing impairment&quot;, &quot;abnormality of prenatal development or birth&quot;,...| | preeclampsia| preeclampsia| 287|298| present|HP:0100602|HP:0100603: Toxemia of pregnancy ## Pregnancy-induced toxic reactions of the mother that can be as harmless as slight Maternal hypertension or as l...| NONE| NONE|{&quot;SLC25A20&quot;: [&quot;reduced circulating 6-pyruvoyltetrahydropterin synthase activity&quot;, &quot;reduced tissue carnitine-acylcarnitine translocase activity&quot;, &quot;e...| | Long finger| Long finger| 301|311| present|HP:0100807|HP:0001167: Abnormal finger morphology ## An anomaly of a finger. =&amp;gt; HP:0001155: Abnormality of the hand ## An abnormality affecting one or both ha...| NONE|EOM:41535e8ed3dc9076|{&quot;BIN1&quot;: [&quot;distal muscle weakness&quot;, &quot;exercise-induced myalgia&quot;, &quot;proximal muscle weakness&quot;, &quot;generalized amyotrophy&quot;, &quot;generalized hypotonia&quot;, &quot;lon...| | increased overbite| increased overbite| 341|358| present|HP:0011094|HP:0000692: Tooth malposition ## Abnormal alignment, positioning, or spacing of the teeth, i.e., misaligned teeth. =&amp;gt; HP:0000164: Abnormality of th...| NONE| NONE|{&quot;EP300&quot;: [&quot;adducted thumb&quot;, &quot;syndactyly&quot;, &quot;trichiasis&quot;, &quot;simple ear&quot;, &quot;spina bifida&quot;, &quot;sporadic&quot;, &quot;panic attack&quot;, &quot;generalized hypotonia&quot;, &quot;agenes...| +-----------------------+-------------------------+-----+---+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+------------+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+ Model Information Model Name: hpo_mapper_pipeline_v3 Type: pipeline Compatibility: Healthcare NLP 6.0.4+ License: Licensed Edition: Official Language: en Size: 1.8 GB Included Models DocumentAssembler SentenceDetector TokenizerModel InternalDocumentSplitter TokenizerModel TextMatcherInternalModel ChunkMergeModel WordEmbeddingsModel ChunkMapperModel Mapper2Chunk ChunkMapperModel ChunkMapperModel ChunkMapperModel ChunkMapperModel AssertionDLModel</summary></entry></feed>