<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-07-17T18:03:03+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Detect Assertion Status (assertion_bert_classification_clinical_onnx)</title><link href="/2025/07/15/assertion_bert_classification_clinical_onnx_en.html" rel="alternate" type="text/html" title="Detect Assertion Status (assertion_bert_classification_clinical_onnx)" /><published>2025-07-15T00:00:00+00:00</published><updated>2025-07-15T00:00:00+00:00</updated><id>/2025/07/15/assertion_bert_classification_clinical_onnx_en</id><content type="html" xml:base="/2025/07/15/assertion_bert_classification_clinical_onnx_en.html">## Description

Assign assertion status to clinical entities.

## Predicted Entities

`absent`, `present`, `conditional`, `associated_with_someone_else`, `hypothetical`, `possible`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_clinical_onnx_en_6.0.2_3.0_1752593721962.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_clinical_onnx_en_6.0.2_3.0_1752593721962.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)
    
embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;PROBLEM&quot;])
    
assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_clinical_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])

# Generating example
text = &quot;&quot;&quot;
Patient with severe fever and sore throat.
He shows no stomach pain and he maintained on an epidural and PCA for pain control.
He also became short of breath with climbing a flight of stairs.
After CT, lung tumor located at the right lower lobe. Father with Alzheimer.
&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

# Checking results
result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False)

```

{:.jsl-block}
```python
# Test classifier in Spark NLP pipeline
document_assembler = nlp.DocumentAssembler() \
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = nlp.SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)
    
tokenizer = nlp.Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = medical.NerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;PROBLEM&quot;])
    
assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_clinical_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = nlp.Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])
# Generating example
text = &quot;&quot;&quot;
Patient with severe fever and sore throat.
He shows no stomach pain and he maintained on an epidural and PCA for pain control.
He also became short of breath with climbing a flight of stairs.
After CT, lung tumor located at the right lower lobe. Father with Alzheimer.
&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

```
```scala
val document_assembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentences&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)
    .setCaseSensitive(false)

val ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;PROBLEM&quot;))
        
val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_clinical_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;))
    .setOutputCol(&quot;assertion_class&quot;)
    .setCaseSensitive(false)

val pipeline = new Pipeline().setStages(
    Array(
        document_assembler, 
        sentence_detector,
        tokenizer, 
        embeddings,
        ner,
        ner_converter,
        assertion_classifier
))

val text = &quot;&quot;&quot;
Patient with severe fever and sore throat.
He shows no stomach pain and he maintained on an epidural and PCA for pain control.
He also became short of breath with climbing a flight of stairs.
After CT, lung tumor located at the right lower lobe. Father with Alzheimer.
&quot;&quot;&quot;


val data = Seq(text).toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash

|    | chunks                                                         |   begin |   end | entities   | assertion   |   confidence |
|---:|:---------------------------------------------------------------|--------:|------:|:-----------|:------------|-------------:|
|  0 | acute distress                                                 |      43 |    56 | PROBLEM    | Absent      |     0.992191 |
|  1 | mild arcus senilis in the right                                |     191 |   221 | PROBLEM    | Present     |     0.99537  |
|  2 | jugular venous pressure distention                             |     380 |   413 | PROBLEM    | Absent      |     0.997313 |
|  3 | adenopathy in the cervical, supraclavicular, or axillary areas |     428 |   489 | PROBLEM    | Absent      |     0.996413 |
|  4 | tender                                                         |     514 |   519 | PROBLEM    | Absent      |     0.995015 |
|  5 | some fullness in the left upper quadrant                       |     535 |   574 | PROBLEM    | Possible    |     0.524748 |
|  6 | some edema                                                     |     660 |   669 | PROBLEM    | Present     |     0.987595 |
|  7 | cyanosis                                                       |     679 |   686 | PROBLEM    | Absent      |     0.996593 |
|  8 | clubbing                                                       |     692 |   699 | PROBLEM    | Absent      |     0.996629 |

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|assertion_bert_classification_clinical_onnx|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, ner_chunk]|
|Output Labels:|[assertion_onnx]|
|Language:|en|
|Size:|405.6 MB|
|Case sensitive:|true|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="assertion" /><category term="classification" /><category term="onnx" /><summary type="html">Description Assign assertion status to clinical entities. Predicted Entities absent, present, conditional, associated_with_someone_else, hypothetical, possible Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;PROBLEM&quot;]) assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_clinical_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) # Generating example text = &quot;&quot;&quot; Patient with severe fever and sore throat. He shows no stomach pain and he maintained on an epidural and PCA for pain control. He also became short of breath with climbing a flight of stairs. After CT, lung tumor located at the right lower lobe. Father with Alzheimer. &quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) # Checking results result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False) # Test classifier in Spark NLP pipeline document_assembler = nlp.DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = nlp.SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = medical.NerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;PROBLEM&quot;]) assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_clinical_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) # Generating example text = &quot;&quot;&quot; Patient with severe fever and sore throat. He shows no stomach pain and he maintained on an epidural and PCA for pain control. He also became short of breath with climbing a flight of stairs. After CT, lung tumor located at the right lower lobe. Father with Alzheimer. &quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentences&quot;) .setOutputCol(&quot;token&quot;) val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) .setCaseSensitive(false) val ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;PROBLEM&quot;)) val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_clinical_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;)) .setOutputCol(&quot;assertion_class&quot;) .setCaseSensitive(false) val pipeline = new Pipeline().setStages( Array( document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier )) val text = &quot;&quot;&quot; Patient with severe fever and sore throat. He shows no stomach pain and he maintained on an epidural and PCA for pain control. He also became short of breath with climbing a flight of stairs. After CT, lung tumor located at the right lower lobe. Father with Alzheimer. &quot;&quot;&quot; val data = Seq(text).toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results | | chunks | begin | end | entities | assertion | confidence | |---:|:---------------------------------------------------------------|--------:|------:|:-----------|:------------|-------------:| | 0 | acute distress | 43 | 56 | PROBLEM | Absent | 0.992191 | | 1 | mild arcus senilis in the right | 191 | 221 | PROBLEM | Present | 0.99537 | | 2 | jugular venous pressure distention | 380 | 413 | PROBLEM | Absent | 0.997313 | | 3 | adenopathy in the cervical, supraclavicular, or axillary areas | 428 | 489 | PROBLEM | Absent | 0.996413 | | 4 | tender | 514 | 519 | PROBLEM | Absent | 0.995015 | | 5 | some fullness in the left upper quadrant | 535 | 574 | PROBLEM | Possible | 0.524748 | | 6 | some edema | 660 | 669 | PROBLEM | Present | 0.987595 | | 7 | cyanosis | 679 | 686 | PROBLEM | Absent | 0.996593 | | 8 | clubbing | 692 | 699 | PROBLEM | Absent | 0.996629 | Model Information Model Name: assertion_bert_classification_clinical_onnx Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [document, ner_chunk] Output Labels: [assertion_onnx] Language: en Size: 405.6 MB Case sensitive: true</summary></entry><entry><title type="html">Detect Assertion Status (assertion_bert_classification_jsl_onnx)</title><link href="/2025/07/15/assertion_bert_classification_jsl_onnx_en.html" rel="alternate" type="text/html" title="Detect Assertion Status (assertion_bert_classification_jsl_onnx)" /><published>2025-07-15T00:00:00+00:00</published><updated>2025-07-15T00:00:00+00:00</updated><id>/2025/07/15/assertion_bert_classification_jsl_onnx_en</id><content type="html" xml:base="/2025/07/15/assertion_bert_classification_jsl_onnx_en.html">## Description

Assign assertion status to clinical entities.

## Predicted Entities

`Present`, `Planned`, `SomeoneElse`, `Past`, `Family`, `Absent`, `Hypothetical`, `Possible`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_jsl_onnx_en_6.0.2_3.0_1752596719405.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_jsl_onnx_en_6.0.2_3.0_1752596719405.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)
    
embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;PROBLEM&quot;])
    
assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_jsl_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])


text = &quot;&quot;&quot;
The patient is a 21-day-old Caucasian male here for 2 days of congestion -
mom has been suctioning yellow discharge from the patient's nares,
plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions).
One day ago, mom also noticed a tactile temperature and gave the patient Tylenol.
Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion.
He sleeps well, but has been more tired and has been fussy over the past 2 days.
The parents noticed no improvement with albuterol treatments given in the ER.
His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours.
Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature.

Patient with severe fever and sore throat.
He shows no stomach pain and he maintained on an epidural and PCA for pain control.
He also became short of breath with climbing a flight of stairs.
After CT, lung tumor located at the right lower lobe. Father with Alzheimer.
&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

# Checking results
result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False)

```

{:.jsl-block}
```python
# Test classifier in Spark NLP pipeline
document_assembler = nlp.DocumentAssembler() \
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = nlp.SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)
    
tokenizer = nlp.Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = medical.NerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;PROBLEM&quot;])
    
assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_jsl_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = nlp.Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])

text = &quot;&quot;&quot;
The patient is a 21-day-old Caucasian male here for 2 days of congestion -
mom has been suctioning yellow discharge from the patient's nares,
plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions).
One day ago, mom also noticed a tactile temperature and gave the patient Tylenol.
Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion.
He sleeps well, but has been more tired and has been fussy over the past 2 days.
The parents noticed no improvement with albuterol treatments given in the ER.
His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours.
Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature.

Patient with severe fever and sore throat.
He shows no stomach pain and he maintained on an epidural and PCA for pain control.
He also became short of breath with climbing a flight of stairs.
After CT, lung tumor located at the right lower lobe. Father with Alzheimer.
&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

```
```scala
val document_assembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentences&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)
    .setCaseSensitive(false)

val ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;PROBLEM&quot;))
        
val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_jsl_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;))
    .setOutputCol(&quot;assertion_class&quot;)
    .setCaseSensitive(false)

val pipeline = new Pipeline().setStages(
    Array(
        document_assembler, 
        sentence_detector,
        tokenizer, 
        embeddings,
        ner,
        ner_converter,
        assertion_classifier
))

val text = &quot;&quot;&quot;
The patient is a 21-day-old Caucasian male here for 2 days of congestion -
mom has been suctioning yellow discharge from the patient's nares,
plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions).
One day ago, mom also noticed a tactile temperature and gave the patient Tylenol.
Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion.
He sleeps well, but has been more tired and has been fussy over the past 2 days.
The parents noticed no improvement with albuterol treatments given in the ER.
His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours.
Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature.

Patient with severe fever and sore throat.
He shows no stomach pain and he maintained on an epidural and PCA for pain control.
He also became short of breath with climbing a flight of stairs.
After CT, lung tumor located at the right lower lobe. Father with Alzheimer.
&quot;&quot;&quot;


val data = Seq(text).toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash

|    | chunks                                |   begin |   end | entities   | assertion    |   confidence |
|---:|:--------------------------------------|--------:|------:|:-----------|:-------------|-------------:|
|  0 | congestion                            |      63 |    72 | PROBLEM    | Present      |     0.981844 |
|  1 | some mild problems with his breathing |     164 |   200 | PROBLEM    | Present      |     0.996332 |
|  2 | any perioral cyanosis                 |     234 |   254 | PROBLEM    | Absent       |     0.998711 |
|  3 | retractions                           |     259 |   269 | PROBLEM    | Absent       |     0.998287 |
|  4 | a tactile temperature                 |     303 |   323 | PROBLEM    | Present      |     0.995938 |
|  5 | his respiratory congestion            |     489 |   514 | PROBLEM    | Present      |     0.999145 |
|  6 | more tired                            |     546 |   555 | PROBLEM    | Present      |     0.999283 |
|  7 | any diarrhea                          |     833 |   844 | PROBLEM    | Absent       |     0.998015 |
|  8 | yellow colored                        |     871 |   884 | PROBLEM    | Present      |     0.997913 |
|  9 | severe fever                          |     920 |   931 | PROBLEM    | Present      |     0.99936  |
| 10 | sore throat                           |     937 |   947 | PROBLEM    | Present      |     0.999398 |
| 11 | stomach pain                          |     962 |   973 | PROBLEM    | Absent       |     0.99866  |
| 12 | pain control                          |    1020 |  1031 | PROBLEM    | Hypothetical |     0.945752 |
| 13 | short of breath                       |    1049 |  1063 | PROBLEM    | Present      |     0.998179 |
| 14 | lung tumor                            |    1109 |  1118 | PROBLEM    | Present      |     0.998691 |
| 15 | Alzheimer                             |    1165 |  1173 | PROBLEM    | SomeoneElse  |     0.996398 |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|assertion_bert_classification_jsl_onnx|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, ner_chunk]|
|Output Labels:|[assertion_onnx]|
|Language:|en|
|Size:|405.6 MB|
|Case sensitive:|true|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="assertion" /><category term="classification" /><category term="jsl" /><category term="onnx" /><summary type="html">Description Assign assertion status to clinical entities. Predicted Entities Present, Planned, SomeoneElse, Past, Family, Absent, Hypothetical, Possible Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;PROBLEM&quot;]) assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_jsl_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) text = &quot;&quot;&quot; The patient is a 21-day-old Caucasian male here for 2 days of congestion - mom has been suctioning yellow discharge from the patient's nares, plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions). One day ago, mom also noticed a tactile temperature and gave the patient Tylenol. Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion. He sleeps well, but has been more tired and has been fussy over the past 2 days. The parents noticed no improvement with albuterol treatments given in the ER. His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours. Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature. Patient with severe fever and sore throat. He shows no stomach pain and he maintained on an epidural and PCA for pain control. He also became short of breath with climbing a flight of stairs. After CT, lung tumor located at the right lower lobe. Father with Alzheimer. &quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) # Checking results result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False) # Test classifier in Spark NLP pipeline document_assembler = nlp.DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = nlp.SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = medical.NerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;PROBLEM&quot;]) assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_jsl_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) text = &quot;&quot;&quot; The patient is a 21-day-old Caucasian male here for 2 days of congestion - mom has been suctioning yellow discharge from the patient's nares, plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions). One day ago, mom also noticed a tactile temperature and gave the patient Tylenol. Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion. He sleeps well, but has been more tired and has been fussy over the past 2 days. The parents noticed no improvement with albuterol treatments given in the ER. His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours. Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature. Patient with severe fever and sore throat. He shows no stomach pain and he maintained on an epidural and PCA for pain control. He also became short of breath with climbing a flight of stairs. After CT, lung tumor located at the right lower lobe. Father with Alzheimer. &quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentences&quot;) .setOutputCol(&quot;token&quot;) val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) .setCaseSensitive(false) val ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;PROBLEM&quot;)) val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_jsl_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;)) .setOutputCol(&quot;assertion_class&quot;) .setCaseSensitive(false) val pipeline = new Pipeline().setStages( Array( document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier )) val text = &quot;&quot;&quot; The patient is a 21-day-old Caucasian male here for 2 days of congestion - mom has been suctioning yellow discharge from the patient's nares, plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions). One day ago, mom also noticed a tactile temperature and gave the patient Tylenol. Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion. He sleeps well, but has been more tired and has been fussy over the past 2 days. The parents noticed no improvement with albuterol treatments given in the ER. His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours. Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature. Patient with severe fever and sore throat. He shows no stomach pain and he maintained on an epidural and PCA for pain control. He also became short of breath with climbing a flight of stairs. After CT, lung tumor located at the right lower lobe. Father with Alzheimer. &quot;&quot;&quot; val data = Seq(text).toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results | | chunks | begin | end | entities | assertion | confidence | |---:|:--------------------------------------|--------:|------:|:-----------|:-------------|-------------:| | 0 | congestion | 63 | 72 | PROBLEM | Present | 0.981844 | | 1 | some mild problems with his breathing | 164 | 200 | PROBLEM | Present | 0.996332 | | 2 | any perioral cyanosis | 234 | 254 | PROBLEM | Absent | 0.998711 | | 3 | retractions | 259 | 269 | PROBLEM | Absent | 0.998287 | | 4 | a tactile temperature | 303 | 323 | PROBLEM | Present | 0.995938 | | 5 | his respiratory congestion | 489 | 514 | PROBLEM | Present | 0.999145 | | 6 | more tired | 546 | 555 | PROBLEM | Present | 0.999283 | | 7 | any diarrhea | 833 | 844 | PROBLEM | Absent | 0.998015 | | 8 | yellow colored | 871 | 884 | PROBLEM | Present | 0.997913 | | 9 | severe fever | 920 | 931 | PROBLEM | Present | 0.99936 | | 10 | sore throat | 937 | 947 | PROBLEM | Present | 0.999398 | | 11 | stomach pain | 962 | 973 | PROBLEM | Absent | 0.99866 | | 12 | pain control | 1020 | 1031 | PROBLEM | Hypothetical | 0.945752 | | 13 | short of breath | 1049 | 1063 | PROBLEM | Present | 0.998179 | | 14 | lung tumor | 1109 | 1118 | PROBLEM | Present | 0.998691 | | 15 | Alzheimer | 1165 | 1173 | PROBLEM | SomeoneElse | 0.996398 | Model Information Model Name: assertion_bert_classification_jsl_onnx Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [document, ner_chunk] Output Labels: [assertion_onnx] Language: en Size: 405.6 MB Case sensitive: true</summary></entry><entry><title type="html">Detect Assertion Status (assertion_bert_classification_oncology_onnx)</title><link href="/2025/07/15/assertion_bert_classification_oncology_onnx_en.html" rel="alternate" type="text/html" title="Detect Assertion Status (assertion_bert_classification_oncology_onnx)" /><published>2025-07-15T00:00:00+00:00</published><updated>2025-07-15T00:00:00+00:00</updated><id>/2025/07/15/assertion_bert_classification_oncology_onnx_en</id><content type="html" xml:base="/2025/07/15/assertion_bert_classification_oncology_onnx_en.html">## Description

Assign assertion status to clinical entities.

## Predicted Entities

`Present`, `Past`, `Family`, `Absent`, `Hypothetical`, `Possible`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_oncology_onnx_en_6.0.2_3.0_1752577763743.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_oncology_onnx_en_6.0.2_3.0_1752577763743.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)
    
embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;PROBLEM&quot;])
    
assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_oncology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])

# Generating example
text = &quot;&quot;&quot;
GENERAL: He is an elderly gentleman in no acute distress. He is sitting up in bed eating his breakfast. He is alert and oriented and answering questions appropriately.
HEENT: Sclerae showed mild arcus senilis in the right. Left was clear. Pupils are equally round and reactive to light. Extraocular movements are intact. Oropharynx is clear.
NECK: Supple. Trachea is midline. No jugular venous pressure distention is noted. No adenopathy in the cervical, supraclavicular, or axillary areas.
ABDOMEN: Soft and not tender. There may be some fullness in the left upper quadrant, although I do not appreciate a true spleen with inspiration.
EXTREMITIES: There is some edema, but no cyanosis and clubbing .&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

# Checking results
result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False)

```

{:.jsl-block}
```python
# Test classifier in Spark NLP pipeline
document_assembler = nlp.DocumentAssembler() \
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = nlp.SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)
    
tokenizer = nlp.Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = medical.NerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;PROBLEM&quot;])
    
assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_oncology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = nlp.Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])
# Generating example
text = &quot;&quot;&quot;
GENERAL: He is an elderly gentleman in no acute distress. He is sitting up in bed eating his breakfast. He is alert and oriented and answering questions appropriately.
HEENT: Sclerae showed mild arcus senilis in the right. Left was clear. Pupils are equally round and reactive to light. Extraocular movements are intact. Oropharynx is clear.
NECK: Supple. Trachea is midline. No jugular venous pressure distention is noted. No adenopathy in the cervical, supraclavicular, or axillary areas.
ABDOMEN: Soft and not tender. There may be some fullness in the left upper quadrant, although I do not appreciate a true spleen with inspiration.
EXTREMITIES: There is some edema, but no cyanosis and clubbing .&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

```
```scala
val document_assembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentences&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)
    .setCaseSensitive(false)

val ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;PROBLEM&quot;))
        
val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_oncology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;))
    .setOutputCol(&quot;assertion_class&quot;)
    .setCaseSensitive(false)

val pipeline = new Pipeline().setStages(
    Array(
        document_assembler, 
        sentence_detector,
        tokenizer, 
        embeddings,
        ner,
        ner_converter,
        assertion_classifier
))

val text = &quot;&quot;&quot;
GENERAL: He is an elderly gentleman in no acute distress. He is sitting up in bed eating his breakfast. He is alert and oriented and answering questions appropriately.
HEENT: Sclerae showed mild arcus senilis in the right. Left was clear. Pupils are equally round and reactive to light. Extraocular movements are intact. Oropharynx is clear.
NECK: Supple. Trachea is midline. No jugular venous pressure distention is noted. No adenopathy in the cervical, supraclavicular, or axillary areas.
ABDOMEN: Soft and not tender. There may be some fullness in the left upper quadrant, although I do not appreciate a true spleen with inspiration.
EXTREMITIES: There is some edema, but no cyanosis and clubbing .&quot;&quot;&quot;


val data = Seq(text).toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash

|    | chunks                                                         |   begin |   end | entities   | assertion   |   confidence |
|---:|:---------------------------------------------------------------|--------:|------:|:-----------|:------------|-------------:|
|  0 | acute distress                                                 |      43 |    56 | PROBLEM    | Absent      |     0.992191 |
|  1 | mild arcus senilis in the right                                |     191 |   221 | PROBLEM    | Present     |     0.99537  |
|  2 | jugular venous pressure distention                             |     380 |   413 | PROBLEM    | Absent      |     0.997313 |
|  3 | adenopathy in the cervical, supraclavicular, or axillary areas |     428 |   489 | PROBLEM    | Absent      |     0.996413 |
|  4 | tender                                                         |     514 |   519 | PROBLEM    | Absent      |     0.995015 |
|  5 | some fullness in the left upper quadrant                       |     535 |   574 | PROBLEM    | Possible    |     0.524748 |
|  6 | some edema                                                     |     660 |   669 | PROBLEM    | Present     |     0.987595 |
|  7 | cyanosis                                                       |     679 |   686 | PROBLEM    | Absent      |     0.996593 |
|  8 | clubbing                                                       |     692 |   699 | PROBLEM    | Absent      |     0.996629 |

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|assertion_bert_classification_oncology_onnx|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, ner_chunk]|
|Output Labels:|[assertion_onnx]|
|Language:|en|
|Size:|405.6 MB|
|Case sensitive:|true|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="assertion" /><category term="classification" /><category term="oncology" /><category term="onnx" /><summary type="html">Description Assign assertion status to clinical entities. Predicted Entities Present, Past, Family, Absent, Hypothetical, Possible Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;PROBLEM&quot;]) assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_oncology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) # Generating example text = &quot;&quot;&quot; GENERAL: He is an elderly gentleman in no acute distress. He is sitting up in bed eating his breakfast. He is alert and oriented and answering questions appropriately. HEENT: Sclerae showed mild arcus senilis in the right. Left was clear. Pupils are equally round and reactive to light. Extraocular movements are intact. Oropharynx is clear. NECK: Supple. Trachea is midline. No jugular venous pressure distention is noted. No adenopathy in the cervical, supraclavicular, or axillary areas. ABDOMEN: Soft and not tender. There may be some fullness in the left upper quadrant, although I do not appreciate a true spleen with inspiration. EXTREMITIES: There is some edema, but no cyanosis and clubbing .&quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) # Checking results result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False) # Test classifier in Spark NLP pipeline document_assembler = nlp.DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = nlp.SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = medical.NerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;PROBLEM&quot;]) assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_oncology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) # Generating example text = &quot;&quot;&quot; GENERAL: He is an elderly gentleman in no acute distress. He is sitting up in bed eating his breakfast. He is alert and oriented and answering questions appropriately. HEENT: Sclerae showed mild arcus senilis in the right. Left was clear. Pupils are equally round and reactive to light. Extraocular movements are intact. Oropharynx is clear. NECK: Supple. Trachea is midline. No jugular venous pressure distention is noted. No adenopathy in the cervical, supraclavicular, or axillary areas. ABDOMEN: Soft and not tender. There may be some fullness in the left upper quadrant, although I do not appreciate a true spleen with inspiration. EXTREMITIES: There is some edema, but no cyanosis and clubbing .&quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentences&quot;) .setOutputCol(&quot;token&quot;) val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) .setCaseSensitive(false) val ner = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;PROBLEM&quot;)) val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_oncology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;)) .setOutputCol(&quot;assertion_class&quot;) .setCaseSensitive(false) val pipeline = new Pipeline().setStages( Array( document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier )) val text = &quot;&quot;&quot; GENERAL: He is an elderly gentleman in no acute distress. He is sitting up in bed eating his breakfast. He is alert and oriented and answering questions appropriately. HEENT: Sclerae showed mild arcus senilis in the right. Left was clear. Pupils are equally round and reactive to light. Extraocular movements are intact. Oropharynx is clear. NECK: Supple. Trachea is midline. No jugular venous pressure distention is noted. No adenopathy in the cervical, supraclavicular, or axillary areas. ABDOMEN: Soft and not tender. There may be some fullness in the left upper quadrant, although I do not appreciate a true spleen with inspiration. EXTREMITIES: There is some edema, but no cyanosis and clubbing .&quot;&quot;&quot; val data = Seq(text).toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results | | chunks | begin | end | entities | assertion | confidence | |---:|:---------------------------------------------------------------|--------:|------:|:-----------|:------------|-------------:| | 0 | acute distress | 43 | 56 | PROBLEM | Absent | 0.992191 | | 1 | mild arcus senilis in the right | 191 | 221 | PROBLEM | Present | 0.99537 | | 2 | jugular venous pressure distention | 380 | 413 | PROBLEM | Absent | 0.997313 | | 3 | adenopathy in the cervical, supraclavicular, or axillary areas | 428 | 489 | PROBLEM | Absent | 0.996413 | | 4 | tender | 514 | 519 | PROBLEM | Absent | 0.995015 | | 5 | some fullness in the left upper quadrant | 535 | 574 | PROBLEM | Possible | 0.524748 | | 6 | some edema | 660 | 669 | PROBLEM | Present | 0.987595 | | 7 | cyanosis | 679 | 686 | PROBLEM | Absent | 0.996593 | | 8 | clubbing | 692 | 699 | PROBLEM | Absent | 0.996629 | Model Information Model Name: assertion_bert_classification_oncology_onnx Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [document, ner_chunk] Output Labels: [assertion_onnx] Language: en Size: 405.6 MB Case sensitive: true</summary></entry><entry><title type="html">Detect Assertion Status (assertion_bert_classification_radiology_onnx)</title><link href="/2025/07/15/assertion_bert_classification_radiology_onnx_en.html" rel="alternate" type="text/html" title="Detect Assertion Status (assertion_bert_classification_radiology_onnx)" /><published>2025-07-15T00:00:00+00:00</published><updated>2025-07-15T00:00:00+00:00</updated><id>/2025/07/15/assertion_bert_classification_radiology_onnx_en</id><content type="html" xml:base="/2025/07/15/assertion_bert_classification_radiology_onnx_en.html">## Description

Assign assertion status to clinical entities.

## Predicted Entities

`Confirmed`, `Suspected`, `Negative`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_radiology_onnx_en_6.0.2_3.0_1752595964071.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/assertion_bert_classification_radiology_onnx_en_6.0.2_3.0_1752595964071.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)
    
embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;ImagingFindings&quot;])
    
assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_radiology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])

# Generating example
text = &quot;&quot;&quot;
INTERPRETATION: There has been interval development of a moderate left-sided pneumothorax with near complete collapse of the left upper lobe. 
The lower lobe appears aerated. There is stable, diffuse, bilateral interstitial thickening with no definite acute air space consolidation. 
The heart and pulmonary vascularity are within normal limits. Left-sided port is seen with Groshong tip at the SVC/RA junction. 
No evidence for acute fracture, malalignment, or dislocation.
&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

# Checking results
result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False)

```

{:.jsl-block}
```python
# Test classifier in Spark NLP pipeline
document_assembler = nlp.DocumentAssembler() \
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

sentence_detector = nlp.SentenceDetector()\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)
    
tokenizer = nlp.Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(False)

ner = medical.NerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;ImagingFindings&quot;])
    
assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_radiology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\
    .setOutputCol(&quot;assertion_class&quot;)\
    .setCaseSensitive(False)
    
pipeline = nlp.Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner,
    ner_converter,
    assertion_classifier
])
# Generating example
text = &quot;&quot;&quot;
INTERPRETATION: There has been interval development of a moderate left-sided pneumothorax with near complete collapse of the left upper lobe. 
The lower lobe appears aerated. There is stable, diffuse, bilateral interstitial thickening with no definite acute air space consolidation. 
The heart and pulmonary vascularity are within normal limits. Left-sided port is seen with Groshong tip at the SVC/RA junction. 
No evidence for acute fracture, malalignment, or dislocation.
&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)
                              
result = pipeline.fit(data).transform(data)

```
```scala
val document_assembler = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentences&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)
    .setCaseSensitive(false)

val ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;ImagingFindings&quot;))
        
val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_radiology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;))
    .setOutputCol(&quot;assertion_class&quot;)
    .setCaseSensitive(false)

val pipeline = new Pipeline().setStages(
    Array(
        document_assembler, 
        sentence_detector,
        tokenizer, 
        embeddings,
        ner,
        ner_converter,
        assertion_classifier
))

val text = &quot;&quot;&quot;
INTERPRETATION: There has been interval development of a moderate left-sided pneumothorax with near complete collapse of the left upper lobe. 
The lower lobe appears aerated. There is stable, diffuse, bilateral interstitial thickening with no definite acute air space consolidation. 
The heart and pulmonary vascularity are within normal limits. Left-sided port is seen with Groshong tip at the SVC/RA junction. 
No evidence for acute fracture, malalignment, or dislocation.
&quot;&quot;&quot;


val data = Seq(text).toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash

|    | chunks                        |   begin |   end | entities        | assertion   |   confidence |
|---:|:------------------------------|--------:|------:|:----------------|:------------|-------------:|
|  0 | pneumothorax                  |      78 |    89 | ImagingFindings | Confirmed   |     0.999775 |
|  1 | complete collapse             |     101 |   117 | ImagingFindings | Confirmed   |     0.999778 |
|  2 | aerated                       |     167 |   173 | ImagingFindings | Confirmed   |     0.999811 |
|  3 | thickening                    |     225 |   234 | ImagingFindings | Confirmed   |     0.999158 |
|  4 | acute air space consolidation |     253 |   281 | ImagingFindings | Negative    |     0.999907 |
|  5 | within normal limits          |     325 |   344 | ImagingFindings | Confirmed   |     0.999777 |
|  6 | acute fracture                |     430 |   443 | ImagingFindings | Negative    |     0.999927 |
|  7 | malalignment                  |     446 |   457 | ImagingFindings | Negative    |     0.999929 |
|  8 | dislocation                   |     463 |   473 | ImagingFindings | Negative    |     0.999925 |

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|assertion_bert_classification_radiology_onnx|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, ner_chunk]|
|Output Labels:|[assertion_onnx]|
|Language:|en|
|Size:|405.6 MB|
|Case sensitive:|true|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="assertion" /><category term="classification" /><category term="radiology" /><category term="onnx" /><summary type="html">Description Assign assertion status to clinical entities. Predicted Entities Confirmed, Suspected, Negative Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;ImagingFindings&quot;]) assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_radiology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) # Generating example text = &quot;&quot;&quot; INTERPRETATION: There has been interval development of a moderate left-sided pneumothorax with near complete collapse of the left upper lobe. The lower lobe appears aerated. There is stable, diffuse, bilateral interstitial thickening with no definite acute air space consolidation. The heart and pulmonary vascularity are within normal limits. Left-sided port is seen with Groshong tip at the SVC/RA junction. No evidence for acute fracture, malalignment, or dislocation. &quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) # Checking results result.select(&quot;text&quot;, &quot;assertion_class.result&quot;).show(truncate=False) # Test classifier in Spark NLP pipeline document_assembler = nlp.DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) sentence_detector = nlp.SentenceDetector()\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(False) ner = medical.NerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;ImagingFindings&quot;]) assertion_classifier = medical.BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_radiology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;])\ .setOutputCol(&quot;assertion_class&quot;)\ .setCaseSensitive(False) pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier ]) # Generating example text = &quot;&quot;&quot; INTERPRETATION: There has been interval development of a moderate left-sided pneumothorax with near complete collapse of the left upper lobe. The lower lobe appears aerated. There is stable, diffuse, bilateral interstitial thickening with no definite acute air space consolidation. The heart and pulmonary vascularity are within normal limits. Left-sided port is seen with Groshong tip at the SVC/RA junction. No evidence for acute fracture, malalignment, or dislocation. &quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentences&quot;) .setOutputCol(&quot;token&quot;) val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) .setCaseSensitive(false) val ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;ImagingFindings&quot;)) val assertion_classifier = BertForAssertionClassification.pretrained(&quot;assertion_bert_classification_radiology_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;, &quot;ner_chunk&quot;)) .setOutputCol(&quot;assertion_class&quot;) .setCaseSensitive(false) val pipeline = new Pipeline().setStages( Array( document_assembler, sentence_detector, tokenizer, embeddings, ner, ner_converter, assertion_classifier )) val text = &quot;&quot;&quot; INTERPRETATION: There has been interval development of a moderate left-sided pneumothorax with near complete collapse of the left upper lobe. The lower lobe appears aerated. There is stable, diffuse, bilateral interstitial thickening with no definite acute air space consolidation. The heart and pulmonary vascularity are within normal limits. Left-sided port is seen with Groshong tip at the SVC/RA junction. No evidence for acute fracture, malalignment, or dislocation. &quot;&quot;&quot; val data = Seq(text).toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results | | chunks | begin | end | entities | assertion | confidence | |---:|:------------------------------|--------:|------:|:----------------|:------------|-------------:| | 0 | pneumothorax | 78 | 89 | ImagingFindings | Confirmed | 0.999775 | | 1 | complete collapse | 101 | 117 | ImagingFindings | Confirmed | 0.999778 | | 2 | aerated | 167 | 173 | ImagingFindings | Confirmed | 0.999811 | | 3 | thickening | 225 | 234 | ImagingFindings | Confirmed | 0.999158 | | 4 | acute air space consolidation | 253 | 281 | ImagingFindings | Negative | 0.999907 | | 5 | within normal limits | 325 | 344 | ImagingFindings | Confirmed | 0.999777 | | 6 | acute fracture | 430 | 443 | ImagingFindings | Negative | 0.999927 | | 7 | malalignment | 446 | 457 | ImagingFindings | Negative | 0.999929 | | 8 | dislocation | 463 | 473 | ImagingFindings | Negative | 0.999925 | Model Information Model Name: assertion_bert_classification_radiology_onnx Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [document, ner_chunk] Output Labels: [assertion_onnx] Language: en Size: 405.6 MB Case sensitive: true</summary></entry><entry><title type="html">MedEmbed large: Specialized Embedding Model for Medical and Clinical Information Retrieval (OpenVINO)</title><link href="/2025/07/14/bert_medembed_large_v0_1_openvino_en.html" rel="alternate" type="text/html" title="MedEmbed large: Specialized Embedding Model for Medical and Clinical Information Retrieval (OpenVINO)" /><published>2025-07-14T00:00:00+00:00</published><updated>2025-07-14T00:00:00+00:00</updated><id>/2025/07/14/bert_medembed_large_v0_1_openvino_en</id><content type="html" xml:base="/2025/07/14/bert_medembed_large_v0_1_openvino_en.html">## Description

MedEmbed is a family of embedding models fine-tuned specifically for medical and clinical data, designed to enhance performance in healthcare-related natural language processing (NLP) tasks, particularly information retrieval.

GitHub Repo: https://github.com/abhinand5/MedEmbed
Technical Blog Post: https://huggingface.co/blog/abhinand/medembed-finetuned-embedding-models-for-medical-ir

This model is intended for use in medical and clinical contexts to improve information retrieval, question answering, and semantic search tasks. It can be integrated into healthcare systems, research tools, and medical literature databases to enhance search capabilities and information access.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/bert_medembed_large_v0_1_openvino_en_6.0.0_3.0_1752515197550.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/bert_medembed_large_v0_1_openvino_en_6.0.0_3.0_1752515197550.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.base import DocumentAssembler
from sparknlp.annotator import BertSentenceEmbeddings
from pyspark.ml import Pipeline

document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

bert_loaded = BertSentenceEmbeddings.load(&quot;bert_medembed_large_v0_1_openvino&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;bert&quot;)\

pipeline = Pipeline(
    stages = [
        document_assembler,
        bert_loaded
  ])

data = spark.createDataFrame([
    ['William Henry Gates III (born October 28, 1955) is an American business magnate, software developer, investor,and philanthropist.']
]).toDF(&quot;text&quot;)

model = pipeline.fit(data)
result = model.transform(data)

result.selectExpr(&quot;explode(bert.embeddings) as embeddings&quot;).show(

```
```scala
import com.johnsnowlabs.nlp.base.DocumentAssembler
import com.johnsnowlabs.nlp.embeddings.BertSentenceEmbeddings
import org.apache.spark.ml.Pipeline
import org.apache.spark.sql.functions.explode
import spark.implicits._

val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;text&quot;)
  .setOutputCol(&quot;document&quot;)

val bertEmbeddings = BertSentenceEmbeddings.load(&quot;bert_medembed_large_v0_1_openvino&quot;)
  .setInputCols(&quot;document&quot;)
  .setOutputCol(&quot;bert&quot;)

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  bertEmbeddings
))

val data = Seq(
  &quot;William Henry Gates III (born October 28, 1955) is an American business magnate, software developer, investor, and philanthropist.&quot;
).toDF(&quot;text&quot;)

val model = pipeline.fit(data)
val result = model.transform(data)

result.select(explode($&quot;bert.embeddings&quot;).alias(&quot;embeddings&quot;)).show(false)

```
&lt;/div&gt;

## Results

```bash

+--------------------+
|          embeddings|
+--------------------+
|[0.461878, -0.240...|
+--------------------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|bert_medembed_large_v0_1_openvino|
|Compatibility:|Spark NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[bert]|
|Language:|en|
|Size:|1.2 GB|
|Case sensitive:|true|</content><author><name>John Snow Labs</name></author><category term="openvino" /><category term="english" /><category term="medical_embedding" /><category term="clinical_embedding" /><category term="information_retrieval" /><category term="open_source" /><category term="bert" /><category term="en" /><category term="licensed" /><summary type="html">Description MedEmbed is a family of embedding models fine-tuned specifically for medical and clinical data, designed to enhance performance in healthcare-related natural language processing (NLP) tasks, particularly information retrieval. GitHub Repo: https://github.com/abhinand5/MedEmbed Technical Blog Post: https://huggingface.co/blog/abhinand/medembed-finetuned-embedding-models-for-medical-ir This model is intended for use in medical and clinical contexts to improve information retrieval, question answering, and semantic search tasks. It can be integrated into healthcare systems, research tools, and medical literature databases to enhance search capabilities and information access. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.base import DocumentAssembler from sparknlp.annotator import BertSentenceEmbeddings from pyspark.ml import Pipeline document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) bert_loaded = BertSentenceEmbeddings.load(&quot;bert_medembed_large_v0_1_openvino&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;bert&quot;)\ pipeline = Pipeline( stages = [ document_assembler, bert_loaded ]) data = spark.createDataFrame([ ['William Henry Gates III (born October 28, 1955) is an American business magnate, software developer, investor,and philanthropist.'] ]).toDF(&quot;text&quot;) model = pipeline.fit(data) result = model.transform(data) result.selectExpr(&quot;explode(bert.embeddings) as embeddings&quot;).show( import com.johnsnowlabs.nlp.base.DocumentAssembler import com.johnsnowlabs.nlp.embeddings.BertSentenceEmbeddings import org.apache.spark.ml.Pipeline import org.apache.spark.sql.functions.explode import spark.implicits._ val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val bertEmbeddings = BertSentenceEmbeddings.load(&quot;bert_medembed_large_v0_1_openvino&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;bert&quot;) val pipeline = new Pipeline().setStages(Array( documentAssembler, bertEmbeddings )) val data = Seq( &quot;William Henry Gates III (born October 28, 1955) is an American business magnate, software developer, investor, and philanthropist.&quot; ).toDF(&quot;text&quot;) val model = pipeline.fit(data) val result = model.transform(data) result.select(explode($&quot;bert.embeddings&quot;).alias(&quot;embeddings&quot;)).show(false) Results +--------------------+ | embeddings| +--------------------+ |[0.461878, -0.240...| +--------------------+ Model Information Model Name: bert_medembed_large_v0_1_openvino Compatibility: Spark NLP 6.0.0+ License: Licensed Edition: Official Input Labels: [document] Output Labels: [bert] Language: en Size: 1.2 GB Case sensitive: true</summary></entry><entry><title type="html">Vaccinations and Infectious Diseases</title><link href="/2025/07/14/ner_vaccine_types_en.html" rel="alternate" type="text/html" title="Vaccinations and Infectious Diseases" /><published>2025-07-14T00:00:00+00:00</published><updated>2025-07-14T00:00:00+00:00</updated><id>/2025/07/14/ner_vaccine_types_en</id><content type="html" xml:base="/2025/07/14/ner_vaccine_types_en.html">## Description

This model is trained to extract vaccine and related disease/symptom entities from clinical/medical texts.

This project has been funded in whole or in part with Federal funds from the National Institute of 
Allergy and Infectious Diseases, National Institutes of Health, Department of Health and Human 
Services, under Contract No. 75N93024C00010.

## Predicted Entities

`Bacterial_Vax`, `Viral_Vax`, `Cancer_Vax`, `Bac_Vir_Comb`, `Other_Vax`, `Vax_Dose`, `Infectious_Disease`, `Other_Disease_Disorder`, `Sign_Symptom`, `Toxoid`, `Adaptive_Immunity`, `Inactivated`, `Date`, `Age`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_vaccine_types_en_6.0.3_3.4_1752516478959.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_vaccine_types_en_6.0.3_3.4_1752516478959.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_vaccine_types&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
    ])

sample_texts = [&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. 
She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. 
&quot;&quot;&quot;]

data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = nlp.SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = nlp.Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

clinical_embeddings = nlp.WordEmbeddingsModel.pretrained('embeddings_clinical', &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner_model = medical.NerModel.pretrained('ner_vaccine_types', &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = medical.NerConverterInternal()\
    .setInputCols(['sentence', 'token', 'ner'])\
    .setOutputCol('ner_chunk')

pipeline = nlp.Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
    ])

sample_texts = [&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. 
She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. 
&quot;&quot;&quot;]

data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_vaccine_types&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(
    document_assembler, 
    sentenceDetector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
))

val sample_texts = Seq(&quot;&quot;&quot;On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. 
She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. .
&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = pipeline.fit(sample_texts).transform(sample_texts)
```
&lt;/div&gt;

## Results

```bash
+-----------+--------------------+-----+---+----------------------+
|sentence_id|chunk               |begin|end|entities              |
+-----------+--------------------+-----+---+----------------------+
|0          |May 14, 2023        |4    |15 |Date                  |
|0          |57-year-old         |20   |30 |Age                   |
|0          |fever               |54   |58 |Sign_Symptom          |
|0          |joint pain          |61   |70 |Sign_Symptom          |
|0          |fatigue             |77   |83 |Sign_Symptom          |
|0          |third dose          |116  |125|Vax_Dose              |
|0          |Shingrix            |134  |141|Viral_Vax             |
|0          |vaccine             |143  |149|Adaptive_Immunity     |
|1          |rheumatoid arthritis|174  |193|Other_Disease_Disorder|
|1          |breast cancer       |239  |251|Other_Disease_Disorder|
|2          |Gardasil            |292  |301|Viral_Vax             |
|2          |HPV                 |307  |309|Infectious_Disease    |
|2          |vaccine             |311  |317|Adaptive_Immunity     |
|2          |hepatitis B         |328  |338|Infectious_Disease    |
|2          |recombinant         |340  |350|Other_Vax             |
|2          |vaccine             |352  |358|Adaptive_Immunity     |
|2          |2020                |370  |373|Date                  |
|3          |aches               |405  |409|Sign_Symptom          |
|3          |influenza           |432  |440|Infectious_Disease    |
|3          |inactivated         |460  |470|Inactivated           |
|3          |vaccine             |472  |478|Adaptive_Immunity     |
|4          |DTaP                |517  |520|Bacterial_Vax         |
|4          |vaccine             |522  |528|Adaptive_Immunity     |
|4          |toxoid              |533  |538|Toxoid                |
|4          |vaccine             |540  |546|Adaptive_Immunity     |
|4          |child               |554  |558|Age                   |
|5          |tuberculosis        |575  |586|Infectious_Disease    |
|5          |COVID-19            |610  |617|Infectious_Disease    |
|6          |2022                |650  |653|Date                  |
|6          |Stimuvax            |697  |704|Cancer_Vax            |
|6          |cancer              |709  |714|Other_Disease_Disorder|
|6          |vaccine             |716  |722|Adaptive_Immunity     |
|6          |tumors              |750  |755|Other_Disease_Disorder|
|7          |vaccine             |876  |882|Adaptive_Immunity     |
+-----------+--------------------+-----+---+----------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_vaccine_types|
|Compatibility:|Healthcare NLP 6.0.3+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|4.9 MB|

## References

In-house annotated real case reports.

## Benchmarking

```bash
                  label  precision    recall  f1-score   support
      Adaptive_Immunity       0.96      0.98      0.97       659
                    Age       0.87      0.91      0.89       379
           Bac_Vir_Comb       0.94      0.97      0.96        66
          Bacterial_Vax       0.94      0.73      0.82       129
             Cancer_Vax       0.92      0.96      0.94       112
                   Date       0.93      0.92      0.92        99
            Inactivated       0.93      0.78      0.85        32
     Infectious_Disease       0.96      0.98      0.97       772
 Other_Disease_Disorder       0.87      0.90      0.89       441
              Other_Vax       0.77      1.00      0.87        17
           Sign_Symptom       0.87      0.86      0.87       197
                 Toxoid       0.94      1.00      0.97        15
               Vax_Dose       0.78      0.95      0.86       169
              Viral_Vax       0.94      0.94      0.94       186
              micro-avg       0.92      0.93      0.92      3273
              macro-avg       0.90      0.92      0.91      3273
           weighted-avg       0.92      0.93      0.92      3273
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="ner" /><category term="vaccines" /><category term="infectious_diseases" /><summary type="html">Description This model is trained to extract vaccine and related disease/symptom entities from clinical/medical texts. This project has been funded in whole or in part with Federal funds from the National Institute of Allergy and Infectious Diseases, National Institutes of Health, Department of Health and Human Services, under Contract No. 75N93024C00010. Predicted Entities Bacterial_Vax, Viral_Vax, Cancer_Vax, Bac_Vir_Comb, Other_Vax, Vax_Dose, Infectious_Disease, Other_Disease_Disorder, Sign_Symptom, Toxoid, Adaptive_Immunity, Inactivated, Date, Age Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_vaccine_types&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, clinical_embeddings, ner_model, ner_converter ]) sample_texts = [&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;] data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = nlp.SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) clinical_embeddings = nlp.WordEmbeddingsModel.pretrained('embeddings_clinical', &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = medical.NerModel.pretrained('ner_vaccine_types', &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = medical.NerConverterInternal()\ .setInputCols(['sentence', 'token', 'ner'])\ .setOutputCol('ner_chunk') pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, clinical_embeddings, ner_model, ner_converter ]) sample_texts = [&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;] data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_vaccine_types&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array( document_assembler, sentenceDetector, tokenizer, clinical_embeddings, ner_model, ner_converter )) val sample_texts = Seq(&quot;&quot;&quot;On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. . &quot;&quot;&quot;).toDF(&quot;text&quot;) val result = pipeline.fit(sample_texts).transform(sample_texts) Results +-----------+--------------------+-----+---+----------------------+ |sentence_id|chunk |begin|end|entities | +-----------+--------------------+-----+---+----------------------+ |0 |May 14, 2023 |4 |15 |Date | |0 |57-year-old |20 |30 |Age | |0 |fever |54 |58 |Sign_Symptom | |0 |joint pain |61 |70 |Sign_Symptom | |0 |fatigue |77 |83 |Sign_Symptom | |0 |third dose |116 |125|Vax_Dose | |0 |Shingrix |134 |141|Viral_Vax | |0 |vaccine |143 |149|Adaptive_Immunity | |1 |rheumatoid arthritis|174 |193|Other_Disease_Disorder| |1 |breast cancer |239 |251|Other_Disease_Disorder| |2 |Gardasil |292 |301|Viral_Vax | |2 |HPV |307 |309|Infectious_Disease | |2 |vaccine |311 |317|Adaptive_Immunity | |2 |hepatitis B |328 |338|Infectious_Disease | |2 |recombinant |340 |350|Other_Vax | |2 |vaccine |352 |358|Adaptive_Immunity | |2 |2020 |370 |373|Date | |3 |aches |405 |409|Sign_Symptom | |3 |influenza |432 |440|Infectious_Disease | |3 |inactivated |460 |470|Inactivated | |3 |vaccine |472 |478|Adaptive_Immunity | |4 |DTaP |517 |520|Bacterial_Vax | |4 |vaccine |522 |528|Adaptive_Immunity | |4 |toxoid |533 |538|Toxoid | |4 |vaccine |540 |546|Adaptive_Immunity | |4 |child |554 |558|Age | |5 |tuberculosis |575 |586|Infectious_Disease | |5 |COVID-19 |610 |617|Infectious_Disease | |6 |2022 |650 |653|Date | |6 |Stimuvax |697 |704|Cancer_Vax | |6 |cancer |709 |714|Other_Disease_Disorder| |6 |vaccine |716 |722|Adaptive_Immunity | |6 |tumors |750 |755|Other_Disease_Disorder| |7 |vaccine |876 |882|Adaptive_Immunity | +-----------+--------------------+-----+---+----------------------+ Model Information Model Name: ner_vaccine_types Compatibility: Healthcare NLP 6.0.3+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 4.9 MB References In-house annotated real case reports. Benchmarking label precision recall f1-score support Adaptive_Immunity 0.96 0.98 0.97 659 Age 0.87 0.91 0.89 379 Bac_Vir_Comb 0.94 0.97 0.96 66 Bacterial_Vax 0.94 0.73 0.82 129 Cancer_Vax 0.92 0.96 0.94 112 Date 0.93 0.92 0.92 99 Inactivated 0.93 0.78 0.85 32 Infectious_Disease 0.96 0.98 0.97 772 Other_Disease_Disorder 0.87 0.90 0.89 441 Other_Vax 0.77 1.00 0.87 17 Sign_Symptom 0.87 0.86 0.87 197 Toxoid 0.94 1.00 0.97 15 Vax_Dose 0.78 0.95 0.86 169 Viral_Vax 0.94 0.94 0.94 186 micro-avg 0.92 0.93 0.92 3273 macro-avg 0.90 0.92 0.91 3273 weighted-avg 0.92 0.93 0.92 3273</summary></entry><entry><title type="html">Vaccinations and Infectious Diseases</title><link href="/2025/07/14/ner_vaccine_types_pipeline_en.html" rel="alternate" type="text/html" title="Vaccinations and Infectious Diseases" /><published>2025-07-14T00:00:00+00:00</published><updated>2025-07-14T00:00:00+00:00</updated><id>/2025/07/14/ner_vaccine_types_pipeline_en</id><content type="html" xml:base="/2025/07/14/ner_vaccine_types_pipeline_en.html">## Description

This pipeline is designed to extract types of vaccines and related disease/symptom entities from clinical/medical texts.

Predicted entities are:

`Bacterial_Vax`, `Viral_Vax`, `Cancer_Vax`, `Bac_Vir_Comb`, `Other_Vax`, `Vax_Dose`, `Infectious_Disease`, `Other_Disease_Disorder`, `Sign_Symptom`, `Toxoid`, `Adaptive_Immunity`, `Inactivated`, `Date`, `Age`


{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_vaccine_types_pipeline_en_6.0.3_3.4_1752516272515.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_vaccine_types_pipeline_en_6.0.3_3.4_1752516272515.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;ner_vaccine_types_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission.
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020.
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine.
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic.
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors.
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction.
&quot;&quot;&quot;)
```

{:.jsl-block}
```python
ner_pipeline = nlp.PretrainedPipeline(&quot;ner_vaccine_types_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission.
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020.
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine.
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic.
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors.
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction.
&quot;&quot;&quot;)
```

```scala
import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;ner_vaccine_types_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission.
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020.
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine.
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic.
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors.
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction.
&quot;&quot;&quot;)
```
&lt;/div&gt;

## Results

```bash
|    | chunks               |   begin |   end | entities               |
|---:|:---------------------|--------:|------:|:-----------------------|
|  0 | May 14, 2023         |       4 |    15 | Date                   |
|  1 | 57-year-old          |      20 |    30 | Age                    |
|  2 | fever                |      54 |    58 | Sign_Symptom           |
|  3 | joint pain           |      61 |    70 | Sign_Symptom           |
|  4 | fatigue              |      77 |    83 | Sign_Symptom           |
|  5 | third dose           |     116 |   125 | Vax_Dose               |
|  6 | Shingrix             |     134 |   141 | Viral_Vax              |
|  7 | vaccine              |     143 |   149 | Adaptive_Immunity      |
|  8 | rheumatoid arthritis |     173 |   192 | Other_Disease_Disorder |
|  9 | breast cancer        |     238 |   250 | Other_Disease_Disorder |
| 10 | Gardasil 9           |     290 |   299 | Viral_Vax              |
| 11 | HPV                  |     305 |   307 | Infectious_Disease     |
| 12 | vaccine              |     309 |   315 | Adaptive_Immunity      |
| 13 | hepatitis B          |     326 |   336 | Infectious_Disease     |
| 14 | recombinant          |     338 |   348 | Other_Vax              |
| 15 | vaccine              |     350 |   356 | Adaptive_Immunity      |
| 16 | 2020                 |     368 |   371 | Date                   |
| 17 | aches                |     402 |   406 | Sign_Symptom           |
| 18 | influenza            |     429 |   437 | Infectious_Disease     |
| 19 | inactivated          |     457 |   467 | Inactivated            |
| 20 | vaccine              |     469 |   475 | Adaptive_Immunity      |
| 21 | DTaP                 |     513 |   516 | Bacterial_Vax          |
| 22 | vaccine              |     518 |   524 | Adaptive_Immunity      |
| 23 | toxoid               |     529 |   534 | Toxoid                 |
| 24 | vaccine              |     536 |   542 | Adaptive_Immunity      |
| 25 | child                |     550 |   554 | Age                    |
| 26 | tuberculosis         |     570 |   581 | Infectious_Disease     |
| 27 | COVID-19             |     605 |   612 | Infectious_Disease     |
| 28 | 2022                 |     644 |   647 | Date                   |
| 29 | Stimuvax             |     691 |   698 | Cancer_Vax             |
| 30 | cancer               |     703 |   708 | Other_Disease_Disorder |
| 31 | vaccine              |     710 |   716 | Adaptive_Immunity      |
| 32 | tumors               |     744 |   749 | Other_Disease_Disorder |
| 33 | vaccine              |     869 |   875 | Adaptive_Immunity      |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_vaccine_types_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.3+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.7 GB|


## Benchmarking

```bash
                  label  precision    recall  f1-score   support
      Adaptive_Immunity       0.96      0.98      0.97       659
                    Age       0.87      0.91      0.89       379
           Bac_Vir_Comb       0.94      0.97      0.96        66
          Bacterial_Vax       0.94      0.73      0.82       129
             Cancer_Vax       0.92      0.96      0.94       112
                   Date       0.93      0.92      0.92        99
            Inactivated       0.93      0.78      0.85        32
     Infectious_Disease       0.96      0.98      0.97       772
 Other_Disease_Disorder       0.87      0.90      0.89       441
              Other_Vax       0.77      1.00      0.87        17
           Sign_Symptom       0.87      0.86      0.87       197
                 Toxoid       0.94      1.00      0.97        15
               Vax_Dose       0.78      0.95      0.86       169
              Viral_Vax       0.94      0.94      0.94       186
              micro-avg       0.92      0.93      0.92      3273
              macro-avg       0.90      0.92      0.91      3273
           weighted-avg       0.92      0.93      0.92      3273

```

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- TextMatcherInternalModel
- MedicalNerModel
- NerConverterInternalModel
- ChunkMergeModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="pipeline" /><category term="ner" /><category term="vaccines" /><category term="infectious_diseases" /><summary type="html">Description This pipeline is designed to extract types of vaccines and related disease/symptom entities from clinical/medical texts. Predicted entities are: Bacterial_Vax, Viral_Vax, Cancer_Vax, Bac_Vir_Comb, Other_Vax, Vax_Dose, Infectious_Disease, Other_Disease_Disorder, Sign_Symptom, Toxoid, Adaptive_Immunity, Inactivated, Date, Age Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;ner_vaccine_types_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;) ner_pipeline = nlp.PretrainedPipeline(&quot;ner_vaccine_types_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;ner_vaccine_types_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;) Results | | chunks | begin | end | entities | |---:|:---------------------|--------:|------:|:-----------------------| | 0 | May 14, 2023 | 4 | 15 | Date | | 1 | 57-year-old | 20 | 30 | Age | | 2 | fever | 54 | 58 | Sign_Symptom | | 3 | joint pain | 61 | 70 | Sign_Symptom | | 4 | fatigue | 77 | 83 | Sign_Symptom | | 5 | third dose | 116 | 125 | Vax_Dose | | 6 | Shingrix | 134 | 141 | Viral_Vax | | 7 | vaccine | 143 | 149 | Adaptive_Immunity | | 8 | rheumatoid arthritis | 173 | 192 | Other_Disease_Disorder | | 9 | breast cancer | 238 | 250 | Other_Disease_Disorder | | 10 | Gardasil 9 | 290 | 299 | Viral_Vax | | 11 | HPV | 305 | 307 | Infectious_Disease | | 12 | vaccine | 309 | 315 | Adaptive_Immunity | | 13 | hepatitis B | 326 | 336 | Infectious_Disease | | 14 | recombinant | 338 | 348 | Other_Vax | | 15 | vaccine | 350 | 356 | Adaptive_Immunity | | 16 | 2020 | 368 | 371 | Date | | 17 | aches | 402 | 406 | Sign_Symptom | | 18 | influenza | 429 | 437 | Infectious_Disease | | 19 | inactivated | 457 | 467 | Inactivated | | 20 | vaccine | 469 | 475 | Adaptive_Immunity | | 21 | DTaP | 513 | 516 | Bacterial_Vax | | 22 | vaccine | 518 | 524 | Adaptive_Immunity | | 23 | toxoid | 529 | 534 | Toxoid | | 24 | vaccine | 536 | 542 | Adaptive_Immunity | | 25 | child | 550 | 554 | Age | | 26 | tuberculosis | 570 | 581 | Infectious_Disease | | 27 | COVID-19 | 605 | 612 | Infectious_Disease | | 28 | 2022 | 644 | 647 | Date | | 29 | Stimuvax | 691 | 698 | Cancer_Vax | | 30 | cancer | 703 | 708 | Other_Disease_Disorder | | 31 | vaccine | 710 | 716 | Adaptive_Immunity | | 32 | tumors | 744 | 749 | Other_Disease_Disorder | | 33 | vaccine | 869 | 875 | Adaptive_Immunity | Model Information Model Name: ner_vaccine_types_pipeline Type: pipeline Compatibility: Healthcare NLP 6.0.3+ License: Licensed Edition: Official Language: en Size: 1.7 GB Benchmarking label precision recall f1-score support Adaptive_Immunity 0.96 0.98 0.97 659 Age 0.87 0.91 0.89 379 Bac_Vir_Comb 0.94 0.97 0.96 66 Bacterial_Vax 0.94 0.73 0.82 129 Cancer_Vax 0.92 0.96 0.94 112 Date 0.93 0.92 0.92 99 Inactivated 0.93 0.78 0.85 32 Infectious_Disease 0.96 0.98 0.97 772 Other_Disease_Disorder 0.87 0.90 0.89 441 Other_Vax 0.77 1.00 0.87 17 Sign_Symptom 0.87 0.86 0.87 197 Toxoid 0.94 1.00 0.97 15 Vax_Dose 0.78 0.95 0.86 169 Viral_Vax 0.94 0.94 0.94 186 micro-avg 0.92 0.93 0.92 3273 macro-avg 0.90 0.92 0.91 3273 weighted-avg 0.92 0.93 0.92 3273 Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel TextMatcherInternalModel MedicalNerModel NerConverterInternalModel ChunkMergeModel</summary></entry><entry><title type="html">Vaccinations and Infectious Diseases</title><link href="/2025/07/09/ner_vaccine_types_en.html" rel="alternate" type="text/html" title="Vaccinations and Infectious Diseases" /><published>2025-07-09T00:00:00+00:00</published><updated>2025-07-09T00:00:00+00:00</updated><id>/2025/07/09/ner_vaccine_types_en</id><content type="html" xml:base="/2025/07/09/ner_vaccine_types_en.html">## Description

This model is trained to extract vaccine and related disease/symptom entities from clinical/medical texts.

This project has been funded in whole or in part with Federal funds from the National Institute of 
Allergy and Infectious Diseases, National Institutes of Health, Department of Health and Human 
Services, under Contract No. 75N93024C00010&quot;

## Predicted Entities

`Bacterial_Vax`, `Viral_Vax`, `Cancer_Vax`, `Bac_Vir_Comb`, `Other_Vax`, `Vax_Dose`, `Infectious_Disease`, `Other_Disease_Disorder`, `Sign_Symptom`, `Toxoid`, `Adaptive_Immunity`, `Inactivated`, `Date`, `Age`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_vaccine_types_en_6.0.3_3.4_1752075858996.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_vaccine_types_en_6.0.3_3.4_1752075858996.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

clinical_embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical', &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained('ner_cancer_names', &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols(['sentence', 'token', 'ner'])\
    .setOutputCol('ner_chunk')

pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
    ])

sample_texts = [&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. 
She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. 
&quot;&quot;&quot;]

data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = nlp.SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = nlp.Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

clinical_embeddings = nlp.WordEmbeddingsModel.pretrained('embeddings_clinical', &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner_model = medical.NerModel.pretrained('ner_cancer_names', &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = medical.NerConverterInternal()\
    .setInputCols(['sentence', 'token', 'ner'])\
    .setOutputCol('ner_chunk')

pipeline = nlp.Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
    ])

sample_texts = [&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. 
She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. 
&quot;&quot;&quot;]

data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_vaccine_names&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(
    document_assembler, 
    sentenceDetector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
))

val sample_texts = Seq(&quot;&quot;&quot;On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine.
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. 
She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. .
&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = pipeline.fit(sample_texts).transform(sample_texts)
```
&lt;/div&gt;

## Results

```bash
+-----------+--------------------+-----+---+----------------------+
|sentence_id|chunk               |begin|end|entities              |
+-----------+--------------------+-----+---+----------------------+
|0          |May 14, 2023        |4    |15 |Date                  |
|0          |57-year-old         |20   |30 |Age                   |
|0          |fever               |54   |58 |Sign_Symptom          |
|0          |joint pain          |61   |70 |Sign_Symptom          |
|0          |fatigue             |77   |83 |Sign_Symptom          |
|0          |third dose          |116  |125|Vax_Dose              |
|0          |Shingrix            |134  |141|Viral_Vax             |
|0          |vaccine             |143  |149|Adaptive_Immunity     |
|1          |rheumatoid arthritis|174  |193|Other_Disease_Disorder|
|1          |breast cancer       |239  |251|Other_Disease_Disorder|
|2          |Gardasil            |292  |301|Viral_Vax             |
|2          |HPV                 |307  |309|Infectious_Disease    |
|2          |vaccine             |311  |317|Adaptive_Immunity     |
|2          |hepatitis B         |328  |338|Infectious_Disease    |
|2          |recombinant         |340  |350|Other_Vax             |
|2          |vaccine             |352  |358|Adaptive_Immunity     |
|2          |2020                |370  |373|Date                  |
|3          |aches               |405  |409|Sign_Symptom          |
|3          |influenza           |432  |440|Infectious_Disease    |
|3          |inactivated         |460  |470|Inactivated           |
|3          |vaccine             |472  |478|Adaptive_Immunity     |
|4          |DTaP                |517  |520|Bacterial_Vax         |
|4          |vaccine             |522  |528|Adaptive_Immunity     |
|4          |toxoid              |533  |538|Toxoid                |
|4          |vaccine             |540  |546|Adaptive_Immunity     |
|4          |child               |554  |558|Age                   |
|5          |tuberculosis        |575  |586|Infectious_Disease    |
|5          |COVID-19            |610  |617|Infectious_Disease    |
|6          |2022                |650  |653|Date                  |
|6          |Stimuvax            |697  |704|Cancer_Vax            |
|6          |cancer              |709  |714|Other_Disease_Disorder|
|6          |vaccine             |716  |722|Adaptive_Immunity     |
|6          |tumors              |750  |755|Other_Disease_Disorder|
|7          |vaccine             |876  |882|Adaptive_Immunity     |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_vaccine_types|
|Compatibility:|Healthcare NLP 6.0.3+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|4.9 MB|

## References

In-house annotated case reports.

## Benchmarking

```bash
                  label  precision    recall  f1-score   support

      Adaptive_Immunity       0.96      0.98      0.97       659
                    Age       0.87      0.91      0.89       379
           Bac_Vir_Comb       0.94      0.97      0.96        66
          Bacterial_Vax       0.94      0.73      0.82       129
             Cancer_Vax       0.92      0.96      0.94       112
                   Date       0.93      0.92      0.92        99
            Inactivated       0.93      0.78      0.85        32
     Infectious_Disease       0.96      0.98      0.97       772
 Other_Disease_Disorder       0.87      0.90      0.89       441
              Other_Vax       0.77      1.00      0.87        17
           Sign_Symptom       0.87      0.86      0.87       197
                 Toxoid       0.94      1.00      0.97        15
               Vax_Dose       0.78      0.95      0.86       169
              Viral_Vax       0.94      0.94      0.94       186


              micro_avg       0.92      0.93      0.92      3273
              macro avg       0.90      0.92      0.91      3273
           weighted avg       0.92      0.93      0.92      3273
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="ner" /><category term="vaccines" /><category term="infectious_diseases" /><summary type="html">Description This model is trained to extract vaccine and related disease/symptom entities from clinical/medical texts. This project has been funded in whole or in part with Federal funds from the National Institute of Allergy and Infectious Diseases, National Institutes of Health, Department of Health and Human Services, under Contract No. 75N93024C00010” Predicted Entities Bacterial_Vax, Viral_Vax, Cancer_Vax, Bac_Vir_Comb, Other_Vax, Vax_Dose, Infectious_Disease, Other_Disease_Disorder, Sign_Symptom, Toxoid, Adaptive_Immunity, Inactivated, Date, Age Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) clinical_embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical', &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained('ner_cancer_names', &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols(['sentence', 'token', 'ner'])\ .setOutputCol('ner_chunk') pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, clinical_embeddings, ner_model, ner_converter ]) sample_texts = [&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;] data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = nlp.SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) clinical_embeddings = nlp.WordEmbeddingsModel.pretrained('embeddings_clinical', &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = medical.NerModel.pretrained('ner_cancer_names', &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = medical.NerConverterInternal()\ .setInputCols(['sentence', 'token', 'ner'])\ .setOutputCol('ner_chunk') pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, clinical_embeddings, ner_model, ner_converter ]) sample_texts = [&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;] data = spark.createDataFrame(sample_texts, StringType()).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_vaccine_names&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;,&quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array( document_assembler, sentenceDetector, tokenizer, clinical_embeddings, ner_model, ner_converter )) val sample_texts = Seq(&quot;&quot;&quot;On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. . &quot;&quot;&quot;).toDF(&quot;text&quot;) val result = pipeline.fit(sample_texts).transform(sample_texts) Results +-----------+--------------------+-----+---+----------------------+ |sentence_id|chunk |begin|end|entities | +-----------+--------------------+-----+---+----------------------+ |0 |May 14, 2023 |4 |15 |Date | |0 |57-year-old |20 |30 |Age | |0 |fever |54 |58 |Sign_Symptom | |0 |joint pain |61 |70 |Sign_Symptom | |0 |fatigue |77 |83 |Sign_Symptom | |0 |third dose |116 |125|Vax_Dose | |0 |Shingrix |134 |141|Viral_Vax | |0 |vaccine |143 |149|Adaptive_Immunity | |1 |rheumatoid arthritis|174 |193|Other_Disease_Disorder| |1 |breast cancer |239 |251|Other_Disease_Disorder| |2 |Gardasil |292 |301|Viral_Vax | |2 |HPV |307 |309|Infectious_Disease | |2 |vaccine |311 |317|Adaptive_Immunity | |2 |hepatitis B |328 |338|Infectious_Disease | |2 |recombinant |340 |350|Other_Vax | |2 |vaccine |352 |358|Adaptive_Immunity | |2 |2020 |370 |373|Date | |3 |aches |405 |409|Sign_Symptom | |3 |influenza |432 |440|Infectious_Disease | |3 |inactivated |460 |470|Inactivated | |3 |vaccine |472 |478|Adaptive_Immunity | |4 |DTaP |517 |520|Bacterial_Vax | |4 |vaccine |522 |528|Adaptive_Immunity | |4 |toxoid |533 |538|Toxoid | |4 |vaccine |540 |546|Adaptive_Immunity | |4 |child |554 |558|Age | |5 |tuberculosis |575 |586|Infectious_Disease | |5 |COVID-19 |610 |617|Infectious_Disease | |6 |2022 |650 |653|Date | |6 |Stimuvax |697 |704|Cancer_Vax | |6 |cancer |709 |714|Other_Disease_Disorder| |6 |vaccine |716 |722|Adaptive_Immunity | |6 |tumors |750 |755|Other_Disease_Disorder| |7 |vaccine |876 |882|Adaptive_Immunity | Model Information Model Name: ner_vaccine_types Compatibility: Healthcare NLP 6.0.3+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 4.9 MB References In-house annotated case reports. Benchmarking label precision recall f1-score support Adaptive_Immunity 0.96 0.98 0.97 659 Age 0.87 0.91 0.89 379 Bac_Vir_Comb 0.94 0.97 0.96 66 Bacterial_Vax 0.94 0.73 0.82 129 Cancer_Vax 0.92 0.96 0.94 112 Date 0.93 0.92 0.92 99 Inactivated 0.93 0.78 0.85 32 Infectious_Disease 0.96 0.98 0.97 772 Other_Disease_Disorder 0.87 0.90 0.89 441 Other_Vax 0.77 1.00 0.87 17 Sign_Symptom 0.87 0.86 0.87 197 Toxoid 0.94 1.00 0.97 15 Vax_Dose 0.78 0.95 0.86 169 Viral_Vax 0.94 0.94 0.94 186 micro_avg 0.92 0.93 0.92 3273 macro avg 0.90 0.92 0.91 3273 weighted avg 0.92 0.93 0.92 3273</summary></entry><entry><title type="html">Vaccinations and Infectious Diseases</title><link href="/2025/07/09/vaccine_names_en.html" rel="alternate" type="text/html" title="Vaccinations and Infectious Diseases" /><published>2025-07-09T00:00:00+00:00</published><updated>2025-07-09T00:00:00+00:00</updated><id>/2025/07/09/vaccine_names_en</id><content type="html" xml:base="/2025/07/09/vaccine_names_en.html">## Description

This pipeline is designed to extract vaccine and related disease/symptom entities from clinical/medical texts. 

Predicted entities are:


`Bacterial_Vax`, `Viral_Vax`, `Cancer_Vax`, `Bac_Vir_Comb`, `Other_Vax`, `Vax_Dose`, `Infectious_Disease`, `Other_Disease_Disorder`, `Sign_Symptom`, `Toxoid`, `Adaptive_Immunity`, `Inactivated`, `Date`, `Age`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/vaccine_names_en_6.0.3_3.4_1752074827939.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/vaccine_names_en_6.0.3_3.4_1752074827939.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;vaccine_names&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. 
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. 
&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;vaccine_names&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;
On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. 
Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. 
She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. 
Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. 
The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. 
In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. 
The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. 
&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
|    | chunks               |   begin |   end | entities               |
|---:|:---------------------|--------:|------:|:-----------------------|
|  0 | May 14, 2023         |       4 |    15 | Date                   |
|  1 | 57-year-old          |      20 |    30 | Age                    |
|  2 | fever                |      54 |    58 | Sign_Symptom           |
|  3 | joint pain           |      61 |    70 | Sign_Symptom           |
|  4 | fatigue              |      77 |    83 | Sign_Symptom           |
|  5 | third dose           |     116 |   125 | Vax_Dose               |
|  6 | Shingrix             |     134 |   141 | Viral_Vax              |
|  7 | vaccine              |     143 |   149 | Adaptive_Immunity      |
|  8 | rheumatoid arthritis |     174 |   193 | Other_Disease_Disorder |
|  9 | breast cancer        |     239 |   251 | Other_Disease_Disorder |
| 10 | Gardasil 9           |     292 |   301 | Viral_Vax              |
| 11 | HPV                  |     307 |   309 | Infectious_Disease     |
| 12 | vaccine              |     311 |   317 | Adaptive_Immunity      |
| 13 | hepatitis B          |     328 |   338 | Infectious_Disease     |
| 14 | recombinant          |     340 |   350 | Other_Vax              |
| 15 | vaccine              |     352 |   358 | Adaptive_Immunity      |
| 16 | 2020                 |     370 |   373 | Date                   |
| 17 | aches                |     405 |   409 | Sign_Symptom           |
| 18 | influenza            |     432 |   440 | Infectious_Disease     |
| 19 | inactivated          |     460 |   470 | Inactivated            |
| 20 | vaccine              |     472 |   478 | Adaptive_Immunity      |
| 21 | DTaP                 |     517 |   520 | Bacterial_Vax          |
| 22 | vaccine              |     522 |   528 | Adaptive_Immunity      |
| 23 | toxoid               |     533 |   538 | Toxoid                 |
| 24 | vaccine              |     540 |   546 | Adaptive_Immunity      |
| 25 | child                |     554 |   558 | Age                    |
| 26 | tuberculosis         |     574 |   585 | Infectious_Disease     |
| 27 | COVID-19             |     609 |   616 | Infectious_Disease     |
| 28 | 2022                 |     649 |   652 | Date                   |
| 29 | Stimuvax             |     696 |   703 | Cancer_Vax             |
| 30 | cancer               |     708 |   713 | Other_Disease_Disorder |
| 31 | vaccine              |     715 |   721 | Adaptive_Immunity      |
| 32 | tumors               |     749 |   754 | Other_Disease_Disorder |
| 33 | vaccine              |     875 |   881 | Adaptive_Immunity      |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|vaccine_names|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.3+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.7 GB|


## Benchmarking

```bash

                  label  precision    recall  f1-score   support

      Adaptive_Immunity       0.96      0.98      0.97       659
                    Age       0.87      0.91      0.89       379
           Bac_Vir_Comb       0.94      0.97      0.96        66
          Bacterial_Vax       0.94      0.73      0.82       129
             Cancer_Vax       0.92      0.96      0.94       112
                   Date       0.93      0.92      0.92        99
            Inactivated       0.93      0.78      0.85        32
     Infectious_Disease       0.96      0.98      0.97       772
 Other_Disease_Disorder       0.87      0.90      0.89       441
              Other_Vax       0.77      1.00      0.87        17
           Sign_Symptom       0.87      0.86      0.87       197
                 Toxoid       0.94      1.00      0.97        15
               Vax_Dose       0.78      0.95      0.86       169
              Viral_Vax       0.94      0.94      0.94       186
            

              micro_avg       0.92      0.93      0.92      3273
              macro avg       0.90      0.92      0.91      3273
           weighted avg       0.92      0.93      0.92      3273

```


## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- TextMatcherInternalModel
- MedicalNerModel
- NerConverterInternalModel
- ChunkMergeModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="pipeline" /><category term="ner" /><category term="vaccines" /><category term="infectious_diseases" /><summary type="html">Description This pipeline is designed to extract vaccine and related disease/symptom entities from clinical/medical texts. Predicted entities are: Bacterial_Vax, Viral_Vax, Cancer_Vax, Bac_Vir_Comb, Other_Vax, Vax_Dose, Infectious_Disease, Other_Disease_Disorder, Sign_Symptom, Toxoid, Adaptive_Immunity, Inactivated, Date, Age Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;vaccine_names&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;vaccine_names&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot; On May 14, 2023, a 57-year-old female presented with fever, joint pain, and fatigue three days after receiving her third dose of the Shingrix vaccine. Her history includes rheumatoid arthritis, managed with immunosuppressants, and prior breast cancer in remission. She previously received Gardasil 9, an HPV vaccine, and the hepatitis B recombinant vaccine series in 2020. Notably, she developed mild aches following her annual influenza shot, which is an inactivated vaccine. The patient reported receiving the DTaP vaccine (a toxoid vaccine) as a child. She also had tuberculosis as a teenager and had COVID-19 twice during the pandemic. In 2022, she was enrolled in a clinical trial for Stimuvax, a cancer vaccine targeting MUC1-expressing tumors. The team is assessing whether the patient's symptoms are due to a flare in her autoimmune disease or a delayed viral vaccine reaction. &quot;&quot;&quot;) Results | | chunks | begin | end | entities | |---:|:---------------------|--------:|------:|:-----------------------| | 0 | May 14, 2023 | 4 | 15 | Date | | 1 | 57-year-old | 20 | 30 | Age | | 2 | fever | 54 | 58 | Sign_Symptom | | 3 | joint pain | 61 | 70 | Sign_Symptom | | 4 | fatigue | 77 | 83 | Sign_Symptom | | 5 | third dose | 116 | 125 | Vax_Dose | | 6 | Shingrix | 134 | 141 | Viral_Vax | | 7 | vaccine | 143 | 149 | Adaptive_Immunity | | 8 | rheumatoid arthritis | 174 | 193 | Other_Disease_Disorder | | 9 | breast cancer | 239 | 251 | Other_Disease_Disorder | | 10 | Gardasil 9 | 292 | 301 | Viral_Vax | | 11 | HPV | 307 | 309 | Infectious_Disease | | 12 | vaccine | 311 | 317 | Adaptive_Immunity | | 13 | hepatitis B | 328 | 338 | Infectious_Disease | | 14 | recombinant | 340 | 350 | Other_Vax | | 15 | vaccine | 352 | 358 | Adaptive_Immunity | | 16 | 2020 | 370 | 373 | Date | | 17 | aches | 405 | 409 | Sign_Symptom | | 18 | influenza | 432 | 440 | Infectious_Disease | | 19 | inactivated | 460 | 470 | Inactivated | | 20 | vaccine | 472 | 478 | Adaptive_Immunity | | 21 | DTaP | 517 | 520 | Bacterial_Vax | | 22 | vaccine | 522 | 528 | Adaptive_Immunity | | 23 | toxoid | 533 | 538 | Toxoid | | 24 | vaccine | 540 | 546 | Adaptive_Immunity | | 25 | child | 554 | 558 | Age | | 26 | tuberculosis | 574 | 585 | Infectious_Disease | | 27 | COVID-19 | 609 | 616 | Infectious_Disease | | 28 | 2022 | 649 | 652 | Date | | 29 | Stimuvax | 696 | 703 | Cancer_Vax | | 30 | cancer | 708 | 713 | Other_Disease_Disorder | | 31 | vaccine | 715 | 721 | Adaptive_Immunity | | 32 | tumors | 749 | 754 | Other_Disease_Disorder | | 33 | vaccine | 875 | 881 | Adaptive_Immunity | Model Information Model Name: vaccine_names Type: pipeline Compatibility: Healthcare NLP 6.0.3+ License: Licensed Edition: Official Language: en Size: 1.7 GB Benchmarking label precision recall f1-score support Adaptive_Immunity 0.96 0.98 0.97 659 Age 0.87 0.91 0.89 379 Bac_Vir_Comb 0.94 0.97 0.96 66 Bacterial_Vax 0.94 0.73 0.82 129 Cancer_Vax 0.92 0.96 0.94 112 Date 0.93 0.92 0.92 99 Inactivated 0.93 0.78 0.85 32 Infectious_Disease 0.96 0.98 0.97 772 Other_Disease_Disorder 0.87 0.90 0.89 441 Other_Vax 0.77 1.00 0.87 17 Sign_Symptom 0.87 0.86 0.87 197 Toxoid 0.94 1.00 0.97 15 Vax_Dose 0.78 0.95 0.86 169 Viral_Vax 0.94 0.94 0.94 186 micro_avg 0.92 0.93 0.92 3273 macro avg 0.90 0.92 0.91 3273 weighted avg 0.92 0.93 0.92 3273 Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel TextMatcherInternalModel MedicalNerModel NerConverterInternalModel ChunkMergeModel</summary></entry><entry><title type="html">Clinical Deidentification Pipeline (Document Wise)</title><link href="/2025/07/03/clinical_deidentification_docwise_benchmark_optimized_en.html" rel="alternate" type="text/html" title="Clinical Deidentification Pipeline (Document Wise)" /><published>2025-07-03T00:00:00+00:00</published><updated>2025-07-03T00:00:00+00:00</updated><id>/2025/07/03/clinical_deidentification_docwise_benchmark_optimized_en</id><content type="html" xml:base="/2025/07/03/clinical_deidentification_docwise_benchmark_optimized_en.html">## Description

This pipeline can be used to deidentify PHI information from medical texts. The PHI information will be masked and obfuscated in the resulting text.
The pipeline can mask and obfuscate `LOCATION`, `CONTACT`, `PROFESSION`, `NAME`, `DATE`, `AGE`, `MEDICALRECORD`, `ORGANIZATION`, `HEALTHPLAN`, `DOCTOR`, `USERNAME`,
`LOCATION-OTHER`, `URL`, `DEVICE`, `CITY`, `ZIP`, `STATE`, `PATIENT`, `STREET`, `PHONE`, `HOSPITAL`, `EMAIL`, `IDNUM`, `BIOID`, `FAX`, `LOCATION_OTHER`, `DLN`,
`SSN`, `ACCOUNT`, `PLATE`, `VIN`, `LICENSE`, `IP` entities.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/clinical_deidentification_docwise_benchmark_optimized_en_5.5.3_3.4_1751551119965.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/clinical_deidentification_docwise_benchmark_optimized_en_5.5.3_3.4_1751551119965.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

from sparknlp.pretrained import PretrainedPipeline

deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification_docwise_benchmark_optimized&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

text = &quot;&quot;&quot;Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024.
The patient’s medical record number is 56467890.
The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 .&quot;&quot;&quot;

deid_result = deid_pipeline.fullAnnotate(text)


```

{:.jsl-block}
```python

from sparknlp.pretrained import PretrainedPipeline

deid_pipeline = nlp.PretrainedPipeline(&quot;clinical_deidentification_docwise_benchmark_optimized&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

text = &quot;&quot;&quot;Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024.
The patient’s medical record number is 56467890.
The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 .&quot;&quot;&quot;

deid_result = deid_pipeline.fullAnnotate(text)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification_docwise_benchmark_optimized&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val text = &quot;&quot;&quot;Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024.
The patient’s medical record number is 56467890.
The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 .&quot;&quot;&quot;

val deid_result = deid_pipeline.fullAnnotate(text)

```
&lt;/div&gt;

## Results

```bash
|    | text                                                                                       | result                                                                                                                                                                                         | result                                                                                                                                                                                                                                   |
|---:|:-------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|  0 | Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024. | ['Dr. &lt;DOCTOR&gt;, from &lt;HOSPITAL&gt; in &lt;CITY&gt;, attended to the patient on &lt;DATE&gt;.\nThe patient’s medical record number is &lt;ID&gt;.\nThe patient, &lt;PATIENT&gt;, is &lt;AGE&gt;, her Contact number: &lt;PHONE&gt; .'] | ['Dr. Candice Chalet, from MERCY HOSPITAL AURORA in Berea, attended to the patient on 05/06/2024.\nThe patient’s medical record number is 58687092.\nThe patient, Shari Daughters, is 55 years old, her Contact number: 333-325-4769 .'] |
|    | The patient’s medical record number is 56467890.                                           |                                                                                                                                                                                                |                                                                                                                                                                                                                                          |
|    | The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 .              |                                                                                                                                                                                                |                                                                                                                                                                                                                                          |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|clinical_deidentification_docwise_benchmark_optimized|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.5.3+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.8 GB|

## Included Models

- DocumentAssembler
- InternalDocumentSplitter
- TokenizerModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- ChunkMergeModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- RegexMatcherInternalModel
- ContextualParserModel
- ContextualParserModel
- RegexMatcherInternalModel
- RegexMatcherInternalModel
- RegexMatcherInternalModel
- ContextualParserModel
- TextMatcherInternalModel
- TextMatcherInternalModel
- ContextualParserModel
- ContextualParserModel
- ChunkMergeModel
- ChunkMergeModel
- LightDeIdentification
- LightDeIdentification</content><author><name>John Snow Labs</name></author><category term="deidentification" /><category term="deid" /><category term="en" /><category term="licensed" /><category term="clinical" /><category term="pipeline" /><category term="docwise" /><summary type="html">Description This pipeline can be used to deidentify PHI information from medical texts. The PHI information will be masked and obfuscated in the resulting text. The pipeline can mask and obfuscate LOCATION, CONTACT, PROFESSION, NAME, DATE, AGE, MEDICALRECORD, ORGANIZATION, HEALTHPLAN, DOCTOR, USERNAME, LOCATION-OTHER, URL, DEVICE, CITY, ZIP, STATE, PATIENT, STREET, PHONE, HOSPITAL, EMAIL, IDNUM, BIOID, FAX, LOCATION_OTHER, DLN, SSN, ACCOUNT, PLATE, VIN, LICENSE, IP entities. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification_docwise_benchmark_optimized&quot;, &quot;en&quot;, &quot;clinical/models&quot;) text = &quot;&quot;&quot;Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024. The patient’s medical record number is 56467890. The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 .&quot;&quot;&quot; deid_result = deid_pipeline.fullAnnotate(text) from sparknlp.pretrained import PretrainedPipeline deid_pipeline = nlp.PretrainedPipeline(&quot;clinical_deidentification_docwise_benchmark_optimized&quot;, &quot;en&quot;, &quot;clinical/models&quot;) text = &quot;&quot;&quot;Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024. The patient’s medical record number is 56467890. The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 .&quot;&quot;&quot; deid_result = deid_pipeline.fullAnnotate(text) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification_docwise_benchmark_optimized&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val text = &quot;&quot;&quot;Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024. The patient’s medical record number is 56467890. The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 .&quot;&quot;&quot; val deid_result = deid_pipeline.fullAnnotate(text) Results | | text | result | result | |---:|:-------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | 0 | Dr. John Lee, from Royal Medical Clinic in Chicago, attended to the patient on 11/05/2024. | ['Dr. &amp;lt;DOCTOR&amp;gt;, from &amp;lt;HOSPITAL&amp;gt; in &amp;lt;CITY&amp;gt;, attended to the patient on &amp;lt;DATE&amp;gt;.\nThe patient’s medical record number is &amp;lt;ID&amp;gt;.\nThe patient, &amp;lt;PATIENT&amp;gt;, is &amp;lt;AGE&amp;gt;, her Contact number: &amp;lt;PHONE&amp;gt; .'] | ['Dr. Candice Chalet, from MERCY HOSPITAL AURORA in Berea, attended to the patient on 05/06/2024.\nThe patient’s medical record number is 58687092.\nThe patient, Shari Daughters, is 55 years old, her Contact number: 333-325-4769 .'] | | | The patient’s medical record number is 56467890. | | | | | The patient, Emma Wilson, is 50 years old, her Contact number: 444-456-7890 . | | | Model Information Model Name: clinical_deidentification_docwise_benchmark_optimized Type: pipeline Compatibility: Healthcare NLP 5.5.3+ License: Licensed Edition: Official Language: en Size: 1.8 GB Included Models DocumentAssembler InternalDocumentSplitter TokenizerModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel ChunkMergeModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel RegexMatcherInternalModel ContextualParserModel ContextualParserModel RegexMatcherInternalModel RegexMatcherInternalModel RegexMatcherInternalModel ContextualParserModel TextMatcherInternalModel TextMatcherInternalModel ContextualParserModel ContextualParserModel ChunkMergeModel ChunkMergeModel LightDeIdentification LightDeIdentification</summary></entry></feed>