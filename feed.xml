<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-07-05T00:26:37+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Mapping Entities (Clinical Drugs) with Corresponding UMLS CUI Codes</title><link href="/2025/06/22/umls_clinical_drugs_mapper_en.html" rel="alternate" type="text/html" title="Mapping Entities (Clinical Drugs) with Corresponding UMLS CUI Codes" /><published>2025-06-22T00:00:00+00:00</published><updated>2025-06-22T00:00:00+00:00</updated><id>/2025/06/22/umls_clinical_drugs_mapper_en</id><content type="html" xml:base="/2025/06/22/umls_clinical_drugs_mapper_en.html">## Description

This pretrained model maps entities (Clinical Drugs) with their corresponding UMLS CUI codes.

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_clinical_drugs_mapper_en_6.0.2_3.0_1750587865249.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_clinical_drugs_mapper_en_6.0.2_3.0_1750587865249.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_clinical_drugs_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer, 
        word_embeddings,
        ner_model, 
        ner_model_converter, 
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient was prescribed Neosporin Cream to be applied externally to the infected area, metformin 1000 mg for diabetes management, and acetaminophen 500 mg oral capsule for pain relief.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = nlp.SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = nlp.Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = medical.NerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_clinical_drugs_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer, 
        word_embeddings,
        ner_model, 
        ner_model_converter, 
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient was prescribed Neosporin Cream to be applied externally to the infected area, metformin 1000 mg for diabetes management, and acetaminophen 500 mg oral capsule for pain relief.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
      .setInputCols(Array(&quot;document&quot;))
      .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
      .setInputCols(&quot;sentence&quot;)
      .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel
      .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
      .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel
      .pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
      .setOutputCol(&quot;clinical_ner&quot;)

val ner_model_converter = new NerConverterInternal()
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;))
      .setOutputCol(&quot;ner_chunk&quot;)

val chunkerMapper = ChunkMapperModel
      .pretrained(&quot;umls_clinical_drugs_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;ner_chunk&quot;))
      .setOutputCol(&quot;mappings&quot;)
      .setRels(Array(&quot;umls_code&quot;)) 

val mapper_pipeline = new Pipeline().setStages(Array(
                                                  document_assembler,
                                                  sentence_detector,
                                                  tokenizer, 
                                                  word_embeddings,
                                                  ner_model, 
                                                  ner_model_converter, 
                                                  chunkerMapper))

val data = Seq(&quot;&quot;&quot;The patient was prescribed Neosporin Cream to be applied externally to the infected area, metformin 1000 mg for diabetes management, and acetaminophen 500 mg oral capsule for pain relief.&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------------------------------+---------+
|ner_chunk                        |umls_code|
+---------------------------------+---------+
|Neosporin Cream                  |C0132149 |
|metformin 1000 mg                |C0987664 |
|acetaminophen 500 mg oral capsule|C0691088 |
+---------------------------------+---------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_clinical_drugs_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|31.2 MB|

## References

Trained on concepts from clinical drugs for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="licensed" /><category term="en" /><summary type="html">Description This pretrained model maps entities (Clinical Drugs) with their corresponding UMLS CUI codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_clinical_drugs_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient was prescribed Neosporin Cream to be applied externally to the infected area, metformin 1000 mg for diabetes management, and acetaminophen 500 mg oral capsule for pain relief.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = nlp.SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = medical.NerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_clinical_drugs_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient was prescribed Neosporin Cream to be applied externally to the infected area, metformin 1000 mg for diabetes management, and acetaminophen 500 mg oral capsule for pain relief.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel .pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;clinical_ner&quot;) val ner_model_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;umls_clinical_drugs_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;mappings&quot;) .setRels(Array(&quot;umls_code&quot;)) val mapper_pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper)) val data = Seq(&quot;&quot;&quot;The patient was prescribed Neosporin Cream to be applied externally to the infected area, metformin 1000 mg for diabetes management, and acetaminophen 500 mg oral capsule for pain relief.&quot;&quot;&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +---------------------------------+---------+ |ner_chunk |umls_code| +---------------------------------+---------+ |Neosporin Cream |C0132149 | |metformin 1000 mg |C0987664 | |acetaminophen 500 mg oral capsule|C0691088 | +---------------------------------+---------+ Model Information Model Name: umls_clinical_drugs_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 31.2 MB References Trained on concepts from clinical drugs for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping Entities (Clinical Findings) with Corresponding UMLS CUI Codes</title><link href="/2025/06/22/umls_clinical_findings_mapper_en.html" rel="alternate" type="text/html" title="Mapping Entities (Clinical Findings) with Corresponding UMLS CUI Codes" /><published>2025-06-22T00:00:00+00:00</published><updated>2025-06-22T00:00:00+00:00</updated><id>/2025/06/22/umls_clinical_findings_mapper_en</id><content type="html" xml:base="/2025/06/22/umls_clinical_findings_mapper_en.html">## Description

This pretrained model maps clinical entities and concepts to 4 major categories of UMLS CUI codes.

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_clinical_findings_mapper_en_6.0.2_3.0_1750594576447.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_clinical_findings_mapper_en_6.0.2_3.0_1750594576447.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_clinical_findings_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer,
        word_embeddings,
        ner_model,
        ner_model_converter,
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;A 28-year-old female with a history of obesity with BMI of 33.5 kg/m2, presented with a one-week history of reduced fatigue.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = nlp.SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = nlp.Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = medical.NerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_clinical_findings_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer,
        word_embeddings,
        ner_model,
        ner_model_converter,
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;A 28-year-old female with a history of obesity with BMI of 33.5 kg/m2, presented with a one-week history of reduced fatigue.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
      .setInputCols(Array(&quot;document&quot;))
      .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
      .setInputCols(&quot;sentence&quot;)
      .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel
      .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
      .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel
      .pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
      .setOutputCol(&quot;clinical_ner&quot;)

val ner_model_converter = new NerConverterInternal()
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;))
      .setOutputCol(&quot;ner_chunk&quot;)

val chunkerMapper = ChunkMapperModel
      .pretrained(&quot;umls_clinical_findings_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;ner_chunk&quot;))
      .setOutputCol(&quot;mappings&quot;)
      .setRels(Array(&quot;umls_code&quot;))

val mapper_pipeline = new Pipeline().setStages(Array(
                                                  document_assembler,
                                                  sentence_detector,
                                                  tokenizer,
                                                  word_embeddings,
                                                  ner_model,
                                                  ner_model_converter,
                                                  chunkerMapper))

val data = Seq(&quot;&quot;&quot;A 28-year-old female with a history of obesity with BMI of 33.5 kg/m2, presented with a one-week history of reduced fatigue.&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash
+---------------+---------+
|ner_chunk      |umls_code|
+---------------+---------+
|obesity        |C4759928 |
|BMI            |C0578022 |
|reduced fatigue|C5547024 |
+---------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_clinical_findings_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|27.2 MB|

## References

Trained on concepts from clinical findings for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="licensed" /><category term="en" /><summary type="html">Description This pretrained model maps clinical entities and concepts to 4 major categories of UMLS CUI codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_clinical_findings_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;A 28-year-old female with a history of obesity with BMI of 33.5 kg/m2, presented with a one-week history of reduced fatigue.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = nlp.SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = medical.NerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_clinical_findings_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;A 28-year-old female with a history of obesity with BMI of 33.5 kg/m2, presented with a one-week history of reduced fatigue.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel .pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;clinical_ner&quot;) val ner_model_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;umls_clinical_findings_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;mappings&quot;) .setRels(Array(&quot;umls_code&quot;)) val mapper_pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper)) val data = Seq(&quot;&quot;&quot;A 28-year-old female with a history of obesity with BMI of 33.5 kg/m2, presented with a one-week history of reduced fatigue.&quot;&quot;&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +---------------+---------+ |ner_chunk |umls_code| +---------------+---------+ |obesity |C4759928 | |BMI |C0578022 | |reduced fatigue|C5547024 | +---------------+---------+ Model Information Model Name: umls_clinical_findings_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 27.2 MB References Trained on concepts from clinical findings for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping Entities (Disease or Syndrome) with Corresponding UMLS CUI Codes</title><link href="/2025/06/22/umls_disease_syndrome_mapper_en.html" rel="alternate" type="text/html" title="Mapping Entities (Disease or Syndrome) with Corresponding UMLS CUI Codes" /><published>2025-06-22T00:00:00+00:00</published><updated>2025-06-22T00:00:00+00:00</updated><id>/2025/06/22/umls_disease_syndrome_mapper_en</id><content type="html" xml:base="/2025/06/22/umls_disease_syndrome_mapper_en.html">## Description

This pretrained model maps entities (Disease or Syndrome) with corresponding UMLS CUI codes.


## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_disease_syndrome_mapper_en_6.0.2_3.0_1750592264449.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_disease_syndrome_mapper_en_6.0.2_3.0_1750592264449.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = NerConverterInternal()\
    .setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_disease_syndrome_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer, 
        word_embeddings,
        ner_model, 
        ner_model_converter, 
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;A 35-year-old male with a history of obesity and gestational diabetes mellitus and acyclovir allergy.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = nlp.SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = nlp.Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = medical.NerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = medical.NerConverterInternal()\
    .setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_disease_syndrome_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = nlp.Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer, 
        word_embeddings,
        ner_model, 
        ner_model_converter, 
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;A 35-year-old male with a history of obesity and gestational diabetes mellitus and acyclovir allergy.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
       .setInputCol(&quot;text&quot;)
       .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
       .setInputCols(Array(&quot;document&quot;))
       .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
       .setInputCols(&quot;sentence&quot;)
       .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel
       .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
       .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
       .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel
       .pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
       .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
       .setOutputCol(&quot;clinical_ner&quot;)

val ner_model_converter = new NerConverterInternal()
       .setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)
       .setOutputCol(&quot;ner_chunk&quot;)

val chunkerMapper = ChunkMapperModel
       .pretrained(&quot;umls_disease_syndrome_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
       .setInputCols(Array(&quot;ner_chunk&quot;))
       .setOutputCol(&quot;mappings&quot;)
       .setRels(Array(&quot;umls_code&quot;)) 

val mapper_pipeline = new Pipeline().setStages(Array(
                                                   document_assembler,
                                                   sentence_detector,
                                                   tokenizer, 
                                                   word_embeddings,
                                                   ner_model, 
                                                   ner_model_converter, 
                                                   chunkerMapper))

val data = Seq(&quot;&quot;&quot;A 35-year-old male with a history of obesity and gestational diabetes mellitus and acyclovir allergy.&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash
+-----------------------------+---------+
|ner_chunk                    |umls_code|
+-----------------------------+---------+
|obesity                      |C0028754 |
|gestational diabetes mellitus|C0085207 |
|acyclovir allergy            |C0571297 |
+-----------------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_disease_syndrome_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|14.8 MB|

## References

Trained on concepts from disease syndrome for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="licensed" /><category term="en" /><summary type="html">Description This pretrained model maps entities (Disease or Syndrome) with corresponding UMLS CUI codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = NerConverterInternal()\ .setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_disease_syndrome_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;A 35-year-old male with a history of obesity and gestational diabetes mellitus and acyclovir allergy.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = nlp.SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = medical.NerModel.pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = medical.NerConverterInternal()\ .setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_disease_syndrome_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = nlp.Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;A 35-year-old male with a history of obesity and gestational diabetes mellitus and acyclovir allergy.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel .pretrained(&quot;ner_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;clinical_ner&quot;) val ner_model_converter = new NerConverterInternal() .setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;) .setOutputCol(&quot;ner_chunk&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;umls_disease_syndrome_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;mappings&quot;) .setRels(Array(&quot;umls_code&quot;)) val mapper_pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper)) val data = Seq(&quot;&quot;&quot;A 35-year-old male with a history of obesity and gestational diabetes mellitus and acyclovir allergy.&quot;&quot;&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +-----------------------------+---------+ |ner_chunk |umls_code| +-----------------------------+---------+ |obesity |C0028754 | |gestational diabetes mellitus|C0085207 | |acyclovir allergy |C0571297 | +-----------------------------+---------+ Model Information Model Name: umls_disease_syndrome_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 14.8 MB References Trained on concepts from disease syndrome for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping Entities (Drug Substances) with Corresponding UMLS CUI Codes</title><link href="/2025/06/22/umls_drug_substance_mapper_en.html" rel="alternate" type="text/html" title="Mapping Entities (Drug Substances) with Corresponding UMLS CUI Codes" /><published>2025-06-22T00:00:00+00:00</published><updated>2025-06-22T00:00:00+00:00</updated><id>/2025/06/22/umls_drug_substance_mapper_en</id><content type="html" xml:base="/2025/06/22/umls_drug_substance_mapper_en.html">## Description

This pretrained model maps entities (Drug Substances) with their corresponding UMLS CUI codes.

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_drug_substance_mapper_en_6.0.2_3.0_1750593298287.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_drug_substance_mapper_en_6.0.2_3.0_1750593298287.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_drug_substance_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer,
        word_embeddings,
        ner_model,
        ner_model_converter,
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient was given  metformin, lenvatinib and gallopamil 50 MG Oral Tablet.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = nlp.SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = nlp.Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = medical.NerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_drug_substance_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer,
        word_embeddings,
        ner_model,
        ner_model_converter,
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient was given  metformin, lenvatinib and gallopamil 50 MG Oral Tablet.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
      .setInputCols(Array(&quot;document&quot;))
      .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
      .setInputCols(&quot;sentence&quot;)
      .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel
      .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
      .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel
      .pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
      .setOutputCol(&quot;clinical_ner&quot;)

val ner_model_converter = new NerConverterInternal()
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;))
      .setOutputCol(&quot;ner_chunk&quot;)

val chunkerMapper = ChunkMapperModel
      .pretrained(&quot;umls_drug_substance_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;ner_chunk&quot;))
      .setOutputCol(&quot;mappings&quot;)
      .setRels(Array(&quot;umls_code&quot;))

val mapper_pipeline = new Pipeline().setStages(Array(
                                                  document_assembler,
                                                  sentence_detector,
                                                  tokenizer,
                                                  word_embeddings,
                                                  ner_model,
                                                  ner_model_converter,
                                                  chunkerMapper))

val data = Seq(&quot;&quot;&quot;The patient was given  metformin, lenvatinib and gallopamil 50 MG Oral Tablet.&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------------------+---------+
|ner_chunk                   |umls_code|
+----------------------------+---------+
|metformin                   |C0025598 |
|lenvatinib                  |C2986924 |
|gallopamil 50 MG Oral Tablet|C0787234 |
+----------------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_drug_substance_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|44.1 MB|

## References

2025AA UMLS datasetâs Clinical Drug, Pharmacologic Substance, Antibiotic, Hazardous or Poisonous Substance categories. https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="en" /><category term="licensed" /><summary type="html">Description This pretrained model maps entities (Drug Substances) with their corresponding UMLS CUI codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_drug_substance_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient was given metformin, lenvatinib and gallopamil 50 MG Oral Tablet.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = nlp.SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = medical.NerModel.pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_drug_substance_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient was given metformin, lenvatinib and gallopamil 50 MG Oral Tablet.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel .pretrained(&quot;ner_posology_greedy&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;clinical_ner&quot;) val ner_model_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;umls_drug_substance_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;mappings&quot;) .setRels(Array(&quot;umls_code&quot;)) val mapper_pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper)) val data = Seq(&quot;&quot;&quot;The patient was given metformin, lenvatinib and gallopamil 50 MG Oral Tablet.&quot;&quot;&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +----------------------------+---------+ |ner_chunk |umls_code| +----------------------------+---------+ |metformin |C0025598 | |lenvatinib |C2986924 | |gallopamil 50 MG Oral Tablet|C0787234 | +----------------------------+---------+ Model Information Model Name: umls_drug_substance_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 44.1 MB References 2025AA UMLS datasetâs Clinical Drug, Pharmacologic Substance, Antibiotic, Hazardous or Poisonous Substance categories. https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping Entities (Major Clinical Concepts) with Corresponding UMLS CUI Codes</title><link href="/2025/06/22/umls_major_concepts_mapper_en.html" rel="alternate" type="text/html" title="Mapping Entities (Major Clinical Concepts) with Corresponding UMLS CUI Codes" /><published>2025-06-22T00:00:00+00:00</published><updated>2025-06-22T00:00:00+00:00</updated><id>/2025/06/22/umls_major_concepts_mapper_en</id><content type="html" xml:base="/2025/06/22/umls_major_concepts_mapper_en.html">## Description

This pretrained model maps entities (Major Clinical Concepts) with corresponding UMLS CUI codes.

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_major_concepts_mapper_en_6.0.2_3.0_1750595632906.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_major_concepts_mapper_en_6.0.2_3.0_1750595632906.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_medmentions_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_major_concepts_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer,
        word_embeddings,
        ner_model,
        ner_model_converter,
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient complains of pustules after falling from stairs. Also,  she has a history of quadriceps tendon rupture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

sentence_detector = nlp.SentenceDetector()\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = nlp.Tokenizer()\
      .setInputCols(&quot;sentence&quot;)\
      .setOutputCol(&quot;token&quot;)

word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_model = medical.NerModel.pretrained(&quot;ner_medmentions_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;clinical_ner&quot;)

ner_model_converter = medical.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_major_concepts_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;ner_chunk&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;umls_code&quot;])\
      .setLowerCase(True)

mapper_pipeline = Pipeline().setStages([
        document_assembler,
        sentence_detector,
        tokenizer,
        word_embeddings,
        ner_model,
        ner_model_converter,
        chunkerMapper])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient complains of pustules after falling from stairs. Also,  she has a history of quadriceps tendon rupture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
      .setInputCols(Array(&quot;document&quot;))
      .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
      .setInputCols(&quot;sentence&quot;)
      .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel
      .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
      .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel
      .pretrained(&quot;ner_medmentions_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
      .setOutputCol(&quot;clinical_ner&quot;)

val ner_model_converter = new NerConverterInternal()
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;))
      .setOutputCol(&quot;ner_chunk&quot;)

val chunkerMapper = ChunkMapperModel
      .pretrained(&quot;umls_major_concepts_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;ner_chunk&quot;))
      .setOutputCol(&quot;mappings&quot;)
      .setRels(Array(&quot;umls_code&quot;))

val mapper_pipeline = new Pipeline().setStages(Array(
                                                  document_assembler,
                                                  sentence_detector,
                                                  tokenizer,
                                                  word_embeddings,
                                                  ner_model,
                                                  ner_model_converter,
                                                  chunkerMapper))

val data = Seq(&quot;&quot;&quot;The patient complains of pustules after falling from stairs. Also,  she has a history of quadriceps tendon rupture.&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash
+-------------------------+---------+
|ner_chunk                |umls_code|
+-------------------------+---------+
|pustules                 |C0241157 |
|stairs                   |C4300351 |
|quadriceps tendon rupture|C0263968 |
+-------------------------+---------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_major_concepts_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|54.0 MB|

## References

Trained on concepts from major for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="licensed" /><category term="en" /><summary type="html">Description This pretrained model maps entities (Major Clinical Concepts) with corresponding UMLS CUI codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_medmentions_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;umls_major_concepts_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient complains of pustules after falling from stairs. Also, she has a history of quadriceps tendon rupture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') sentence_detector = nlp.SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols(&quot;sentence&quot;)\ .setOutputCol(&quot;token&quot;) word_embeddings = nlp.WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = medical.NerModel.pretrained(&quot;ner_medmentions_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;clinical_ner&quot;) ner_model_converter = medical.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;umls_major_concepts_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;])\ .setLowerCase(True) mapper_pipeline = Pipeline().setStages([ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient complains of pustules after falling from stairs. Also, she has a history of quadriceps tendon rupture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel .pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel .pretrained(&quot;ner_medmentions_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;clinical_ner&quot;) val ner_model_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;umls_major_concepts_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;mappings&quot;) .setRels(Array(&quot;umls_code&quot;)) val mapper_pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner_model, ner_model_converter, chunkerMapper)) val data = Seq(&quot;&quot;&quot;The patient complains of pustules after falling from stairs. Also, she has a history of quadriceps tendon rupture.&quot;&quot;&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +-------------------------+---------+ |ner_chunk |umls_code| +-------------------------+---------+ |pustules |C0241157 | |stairs |C4300351 | |quadriceps tendon rupture|C0263968 | +-------------------------+---------+ Model Information Model Name: umls_major_concepts_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 54.0 MB References Trained on concepts from major for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping ICD10CM Codes with Their Corresponding UMLS Codes</title><link href="/2025/06/21/icd10cm_umls_mapper_en.html" rel="alternate" type="text/html" title="Mapping ICD10CM Codes with Their Corresponding UMLS Codes" /><published>2025-06-21T00:00:00+00:00</published><updated>2025-06-21T00:00:00+00:00</updated><id>/2025/06/21/icd10cm_umls_mapper_en</id><content type="html" xml:base="/2025/06/21/icd10cm_umls_mapper_en.html">## Description

This pretrained model maps ICD10CM codes to corresponding UMLS codes under the Unified Medical Language System (UMLS).

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/icd10cm_umls_mapper_en_6.0.2_3.0_1750541403148.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/icd10cm_umls_mapper_en_6.0.2_3.0_1750541403148.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

chunk_assembler = Doc2Chunk()\
      .setInputCols(['document'])\
      .setOutputCol('ner_chunk')

mapperModel = ChunkMapperModel.pretrained(&quot;icd10cm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk&quot;])\
    .setOutputCol(&quot;mappings&quot;)\
    .setRels([&quot;umls_code&quot;])

mapper_pipeline = Pipeline(stages=[
    document_assembler,
    chunk_assembler,
    mapperModel
])

data = spark.createDataFrame([[&quot;A01.2&quot;], [&quot;F10.220&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

chunk_assembler = medical.Doc2Chunk()\
      .setInputCols(['document'])\
      .setOutputCol('ner_chunk')

mapperModel = medical.ChunkMapperModel.pretrained(&quot;icd10cm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk&quot;])\
    .setOutputCol(&quot;mappings&quot;)\
    .setRels([&quot;umls_code&quot;])

mapper_pipeline = Pipeline(stages=[
    document_assembler,
    chunk_assembler,
    mapperModel
])

data = spark.createDataFrame([[&quot;A01.2&quot;], [&quot;F10.220&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val chunk_assembler = new Doc2Chunk()
      .setInputCols(&quot;document&quot;)
      .setOutputCol(&quot;ner_chunk&quot;)

val chunkerMapper = ChunkMapperModel
      .pretrained(&quot;icd10cm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;ner_chunk&quot;))
      .setOutputCol(&quot;mappings&quot;)
      .setRels(Array(&quot;umls_code&quot;))

val mapper_pipeline = new Pipeline().setStages(Array(
                                                  document_assembler,
                                                  chunk_assembler,
                                                  chunkerMapper))

val data = Seq(&quot;A01.2&quot;, &quot;F10.220&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------+---------+---------+
|icd10cm_code|umls_code| relation|
+------------+---------+---------+
|       A01.2| C0343376|umls_code|
|     F10.220| C2874385|umls_code|
+------------+---------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|icd10cm_umls_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|1.4 MB|

## References

Trained on concepts from ICD10CM for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="icd10cm" /><category term="en" /><category term="licensed" /><summary type="html">Description This pretrained model maps ICD10CM codes to corresponding UMLS codes under the Unified Medical Language System (UMLS). Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') chunk_assembler = Doc2Chunk()\ .setInputCols(['document'])\ .setOutputCol('ner_chunk') mapperModel = ChunkMapperModel.pretrained(&quot;icd10cm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;]) mapper_pipeline = Pipeline(stages=[ document_assembler, chunk_assembler, mapperModel ]) data = spark.createDataFrame([[&quot;A01.2&quot;], [&quot;F10.220&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') chunk_assembler = medical.Doc2Chunk()\ .setInputCols(['document'])\ .setOutputCol('ner_chunk') mapperModel = medical.ChunkMapperModel.pretrained(&quot;icd10cm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;]) mapper_pipeline = Pipeline(stages=[ document_assembler, chunk_assembler, mapperModel ]) data = spark.createDataFrame([[&quot;A01.2&quot;], [&quot;F10.220&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val chunk_assembler = new Doc2Chunk() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;ner_chunk&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;icd10cm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;mappings&quot;) .setRels(Array(&quot;umls_code&quot;)) val mapper_pipeline = new Pipeline().setStages(Array( document_assembler, chunk_assembler, chunkerMapper)) val data = Seq(&quot;A01.2&quot;, &quot;F10.220&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +------------+---------+---------+ |icd10cm_code|umls_code| relation| +------------+---------+---------+ | A01.2| C0343376|umls_code| | F10.220| C2874385|umls_code| +------------+---------+---------+ Model Information Model Name: icd10cm_umls_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 1.4 MB References Trained on concepts from ICD10CM for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping LOINC Codes with Their Corresponding UMLS Codes</title><link href="/2025/06/21/loinc_umls_mapper_en.html" rel="alternate" type="text/html" title="Mapping LOINC Codes with Their Corresponding UMLS Codes" /><published>2025-06-21T00:00:00+00:00</published><updated>2025-06-21T00:00:00+00:00</updated><id>/2025/06/21/loinc_umls_mapper_en</id><content type="html" xml:base="/2025/06/21/loinc_umls_mapper_en.html">## Description

This pretrained model maps LOINC codes to corresponding UMLS codes.

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/loinc_umls_mapper_en_6.0.2_3.0_1750534707258.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/loinc_umls_mapper_en_6.0.2_3.0_1750534707258.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol('text')\
    .setOutputCol('doc')

chunkAssembler = Doc2Chunk()\
    .setInputCols(&quot;doc&quot;)\
    .setOutputCol(&quot;loinc_code&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;loinc_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;loinc_code&quot;])\
    .setOutputCol(&quot;mappings&quot;)

mapper_pipeline = Pipeline(stages=[
    document_assembler,
    chunkAssembler,
    chunkerMapper
])

data = spark.createDataFrame([[&quot;LA26702-3&quot;],[&quot;LP99998-4&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
    .setInputCol('text')\
    .setOutputCol('doc')

chunkAssembler = nlp.Doc2Chunk()\
    .setInputCols(&quot;doc&quot;)\
    .setOutputCol(&quot;loinc_code&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;loinc_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;loinc_code&quot;])\
    .setOutputCol(&quot;mappings&quot;)

mapper_pipeline = nlp.Pipeline(stages=[
    document_assembler,
    chunkAssembler,
    chunkerMapper
])

data = spark.createDataFrame([[&quot;LA26702-3&quot;],[&quot;LP99998-4&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val chunk_assembler = new Doc2Chunk()
      .setInputCols(&quot;document&quot;)
      .setOutputCol(&quot;umls_code&quot;)

val chunkerMapper = ChunkMapperModel
      .pretrained(&quot;loinc_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;umls_code&quot;))
      .setOutputCol(&quot;mappings&quot;)

val mapper_pipeline = Pipeline().setStages(Array(
                                            document_assembler,
                                            chunk_assembler,
                                            chunkerMapper))

val data = Seq(&quot;LA26702-3&quot;,&quot;LP99998-4&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash
+----------+---------+
|loinc_code|umls_code|
+----------+---------+
|LA26702-3 |C0004057 |
|LP99998-4 |C0050078 |
+----------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|loinc_umls_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|3.4 MB|

## References

Trained on concepts from LOINC for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licansed" /><category term="umls" /><category term="loinc" /><category term="mapping" /><category term="licensed" /><summary type="html">Description This pretrained model maps LOINC codes to corresponding UMLS codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('doc') chunkAssembler = Doc2Chunk()\ .setInputCols(&quot;doc&quot;)\ .setOutputCol(&quot;loinc_code&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;loinc_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;loinc_code&quot;])\ .setOutputCol(&quot;mappings&quot;) mapper_pipeline = Pipeline(stages=[ document_assembler, chunkAssembler, chunkerMapper ]) data = spark.createDataFrame([[&quot;LA26702-3&quot;],[&quot;LP99998-4&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('doc') chunkAssembler = nlp.Doc2Chunk()\ .setInputCols(&quot;doc&quot;)\ .setOutputCol(&quot;loinc_code&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;loinc_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;loinc_code&quot;])\ .setOutputCol(&quot;mappings&quot;) mapper_pipeline = nlp.Pipeline(stages=[ document_assembler, chunkAssembler, chunkerMapper ]) data = spark.createDataFrame([[&quot;LA26702-3&quot;],[&quot;LP99998-4&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val chunk_assembler = new Doc2Chunk() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;umls_code&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;loinc_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;umls_code&quot;)) .setOutputCol(&quot;mappings&quot;) val mapper_pipeline = Pipeline().setStages(Array( document_assembler, chunk_assembler, chunkerMapper)) val data = Seq(&quot;LA26702-3&quot;,&quot;LP99998-4&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +----------+---------+ |loinc_code|umls_code| +----------+---------+ |LA26702-3 |C0004057 | |LP99998-4 |C0050078 | +----------+---------+ Model Information Model Name: loinc_umls_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 3.4 MB References Trained on concepts from LOINC for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping MESH Codes with Their Corresponding UMLS Codes</title><link href="/2025/06/21/mesh_umls_mapper_en.html" rel="alternate" type="text/html" title="Mapping MESH Codes with Their Corresponding UMLS Codes" /><published>2025-06-21T00:00:00+00:00</published><updated>2025-06-21T00:00:00+00:00</updated><id>/2025/06/21/mesh_umls_mapper_en</id><content type="html" xml:base="/2025/06/21/mesh_umls_mapper_en.html">## Description

This pretrained model maps MESH codes to corresponding UMLS codes under the Unified Medical Language System (UMLS).

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/mesh_umls_mapper_en_6.0.2_3.0_1750536283151.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/mesh_umls_mapper_en_6.0.2_3.0_1750536283151.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol('text')\
    .setOutputCol('doc')

chunkAssembler = Doc2Chunk()\
    .setInputCols(&quot;doc&quot;)\
    .setOutputCol(&quot;mesh_code&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;mesh_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;lmesh_code&quot;])\
    .setOutputCol(&quot;mappings&quot;)

mapper_pipeline = Pipeline(stages=[
    document_assembler,
    chunkAssembler,
    chunkerMapper
])

data = spark.createDataFrame([[&quot;C000015&quot;],[&quot;C000002&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
    .setInputCol('text')\
    .setOutputCol('doc')

chunkAssembler = nlp.Doc2Chunk()\
    .setInputCols(&quot;doc&quot;)\
    .setOutputCol(&quot;mesh_code&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;mesh_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;mesh_code&quot;])\
    .setOutputCol(&quot;mappings&quot;)

mapper_pipeline = nlp.Pipeline(stages=[
    document_assembler,
    chunkAssembler,
    chunkerMapper
])

data = spark.createDataFrame([[&quot;C000015&quot;],[&quot;C000002&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val chunk_assembler = new Doc2Chunk()
      .setInputCols(&quot;document&quot;)
      .setOutputCol(&quot;mesh_code&quot;)

val chunkerMapper = ChunkMapperModel
      .pretrained(&quot;mesh_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;mesh_code&quot;))
      .setOutputCol(&quot;mappings&quot;)

val mapper_pipeline = Pipeline().setStages(Array(
                                            document_assembler,
                                            chunk_assembler,
                                            chunkerMapper))

val data = Seq(&quot;C000015&quot;,&quot;C000002&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------+---------+
|mesh_code|umls_code|
+---------+---------+
|C000015  |C0067655 |
|C000002  |C0950157 |
+---------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|mesh_umls_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|5.4 MB|

## References

Trained on concepts from MESH for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="umls" /><category term="mesh" /><category term="mapping" /><summary type="html">Description This pretrained model maps MESH codes to corresponding UMLS codes under the Unified Medical Language System (UMLS). Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('doc') chunkAssembler = Doc2Chunk()\ .setInputCols(&quot;doc&quot;)\ .setOutputCol(&quot;mesh_code&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;mesh_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;lmesh_code&quot;])\ .setOutputCol(&quot;mappings&quot;) mapper_pipeline = Pipeline(stages=[ document_assembler, chunkAssembler, chunkerMapper ]) data = spark.createDataFrame([[&quot;C000015&quot;],[&quot;C000002&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) document_assembler = nlp.DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('doc') chunkAssembler = nlp.Doc2Chunk()\ .setInputCols(&quot;doc&quot;)\ .setOutputCol(&quot;mesh_code&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;mesh_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;mesh_code&quot;])\ .setOutputCol(&quot;mappings&quot;) mapper_pipeline = nlp.Pipeline(stages=[ document_assembler, chunkAssembler, chunkerMapper ]) data = spark.createDataFrame([[&quot;C000015&quot;],[&quot;C000002&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val chunk_assembler = new Doc2Chunk() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;mesh_code&quot;) val chunkerMapper = ChunkMapperModel .pretrained(&quot;mesh_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;mesh_code&quot;)) .setOutputCol(&quot;mappings&quot;) val mapper_pipeline = Pipeline().setStages(Array( document_assembler, chunk_assembler, chunkerMapper)) val data = Seq(&quot;C000015&quot;,&quot;C000002&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +---------+---------+ |mesh_code|umls_code| +---------+---------+ |C000015 |C0067655 | |C000002 |C0950157 | +---------+---------+ Model Information Model Name: mesh_umls_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 5.4 MB References Trained on concepts from MESH for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping RxNorm Codes with Their Corresponding UMLS Codes</title><link href="/2025/06/21/rxnorm_umls_mapper_en.html" rel="alternate" type="text/html" title="Mapping RxNorm Codes with Their Corresponding UMLS Codes" /><published>2025-06-21T00:00:00+00:00</published><updated>2025-06-21T00:00:00+00:00</updated><id>/2025/06/21/rxnorm_umls_mapper_en</id><content type="html" xml:base="/2025/06/21/rxnorm_umls_mapper_en.html">## Description

This pretrained model maps RxNorm codes to corresponding UMLS codes.

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/rxnorm_umls_mapper_en_6.0.2_3.0_1750526236967.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/rxnorm_umls_mapper_en_6.0.2_3.0_1750526236967.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;ner_chunk&quot;)

sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk&quot;])\
    .setOutputCol(&quot;sbert_embeddings&quot;)

rxnorm_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_rxnorm_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sbert_embeddings&quot;])\
    .setOutputCol(&quot;rxnorm_code&quot;)\
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

resolver2chunk = Resolution2Chunk()\
    .setInputCols([&quot;rxnorm_code&quot;])\
    .setOutputCol(&quot;rxnorm2chunk&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;rxnorm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;rxnorm2chunk&quot;])\
    .setOutputCol(&quot;umls_mappings&quot;)\
    .setRels([&quot;umls_code&quot;])

mapper_pipeline = Pipeline(stages = [
    documentAssembler,
    sbert_embedder,
    rxnorm_resolver,
    resolver2chunk,
    chunkerMapper
])

data = spark.createDataFrame([['amlodipine 5 MG'], ['magnesium hydroxide 100 MG'], ['metformin 1000 MG'], ['dilaudid']]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```

{:.jsl-block}
```python
documentAssembler = nlp.DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;ner_chunk&quot;)

sbert_embedder = nlp.BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk&quot;])\
    .setOutputCol(&quot;sbert_embeddings&quot;)

rxnorm_resolver = medical.SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_rxnorm_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sbert_embeddings&quot;])\
    .setOutputCol(&quot;rxnorm_code&quot;)\
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

resolver2chunk = medical.Resolution2Chunk()\
    .setInputCols([&quot;rxnorm_code&quot;])\
    .setOutputCol(&quot;rxnorm2chunk&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;rxnorm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;rxnorm2chunk&quot;])\
    .setOutputCol(&quot;umls_mappings&quot;)\
    .setRels([&quot;umls_code&quot;])

mapper_pipeline = nlp.Pipeline(stages = [
    documentAssembler,
    sbert_embedder,
    rxnorm_resolver,
    resolver2chunk,
    chunkerMapper
])

data = spark.createDataFrame([['amlodipine 5 MG'], ['magnesium hydroxide 100 MG'], ['metformin 1000 MG'], ['dilaudid']]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```
```scala
val documentAssembler = DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;ner_chunk&quot;)

val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk&quot;))
    .setOutputCol(&quot;sbert_embeddings&quot;)

val rxnorm_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_rxnorm_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sbert_embeddings&quot;))
    .setOutputCol(&quot;rxnorm_code&quot;)
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

val resolver2chunk = Resolution2Chunk()
    .setInputCols(Array(&quot;rxnorm_code&quot;))
    .setOutputCol(&quot;rxnorm2chunk&quot;)

val chunkerMapper = ChunkMapperModel.pretrained(&quot;rxnorm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;rxnorm_code&quot;))
    .setOutputCol(&quot;umls_mappings&quot;)
    .setRels(Array(&quot;umls_code&quot;))


val mapper_pipeline = Pipeline().setStages(Array(
    documentAssembler,
    sbert_embedder,
    rxnorm_resolver,
    resolver2chunk,
    chunkerMapper)

val data = Seq(
  (&quot;amlodipine 5 MG&quot;),
  (&quot;magnesium hydroxide 100 MG&quot;),
  (&quot;metformin 1000 MG&quot;),
  (&quot;dilaudid&quot;)
).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------------------+-----------+---------+
|chunk                     |rxnorm_code|umls_code|
+--------------------------+-----------+---------+
|amlodipine 5 MG           |197361     |C0687883 |
|magnesium hydroxide 100 MG|337012     |C1134402 |
|metformin 1000 MG         |316255     |C0987664 |
|dilaudid                  |224913     |C0728755 |
+--------------------------+-----------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|rxnorm_umls_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|3.0 MB|

## References

Trained on concepts from RXNORM for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="clinical" /><category term="umls" /><category term="rxnorm" /><category term="mapping" /><summary type="html">Description This pretrained model maps RxNorm codes to corresponding UMLS codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;ner_chunk&quot;) sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;) rxnorm_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_rxnorm_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sbert_embeddings&quot;])\ .setOutputCol(&quot;rxnorm_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) resolver2chunk = Resolution2Chunk()\ .setInputCols([&quot;rxnorm_code&quot;])\ .setOutputCol(&quot;rxnorm2chunk&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;rxnorm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;rxnorm2chunk&quot;])\ .setOutputCol(&quot;umls_mappings&quot;)\ .setRels([&quot;umls_code&quot;]) mapper_pipeline = Pipeline(stages = [ documentAssembler, sbert_embedder, rxnorm_resolver, resolver2chunk, chunkerMapper ]) data = spark.createDataFrame([['amlodipine 5 MG'], ['magnesium hydroxide 100 MG'], ['metformin 1000 MG'], ['dilaudid']]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) documentAssembler = nlp.DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;ner_chunk&quot;) sbert_embedder = nlp.BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;) rxnorm_resolver = medical.SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_rxnorm_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sbert_embeddings&quot;])\ .setOutputCol(&quot;rxnorm_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) resolver2chunk = medical.Resolution2Chunk()\ .setInputCols([&quot;rxnorm_code&quot;])\ .setOutputCol(&quot;rxnorm2chunk&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;rxnorm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;rxnorm2chunk&quot;])\ .setOutputCol(&quot;umls_mappings&quot;)\ .setRels([&quot;umls_code&quot;]) mapper_pipeline = nlp.Pipeline(stages = [ documentAssembler, sbert_embedder, rxnorm_resolver, resolver2chunk, chunkerMapper ]) data = spark.createDataFrame([['amlodipine 5 MG'], ['magnesium hydroxide 100 MG'], ['metformin 1000 MG'], ['dilaudid']]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val documentAssembler = DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;ner_chunk&quot;) val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) val rxnorm_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_rxnorm_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sbert_embeddings&quot;)) .setOutputCol(&quot;rxnorm_code&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val resolver2chunk = Resolution2Chunk() .setInputCols(Array(&quot;rxnorm_code&quot;)) .setOutputCol(&quot;rxnorm2chunk&quot;) val chunkerMapper = ChunkMapperModel.pretrained(&quot;rxnorm_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;rxnorm_code&quot;)) .setOutputCol(&quot;umls_mappings&quot;) .setRels(Array(&quot;umls_code&quot;)) val mapper_pipeline = Pipeline().setStages(Array( documentAssembler, sbert_embedder, rxnorm_resolver, resolver2chunk, chunkerMapper) val data = Seq( (&quot;amlodipine 5 MG&quot;), (&quot;magnesium hydroxide 100 MG&quot;), (&quot;metformin 1000 MG&quot;), (&quot;dilaudid&quot;) ).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +--------------------------+-----------+---------+ |chunk |rxnorm_code|umls_code| +--------------------------+-----------+---------+ |amlodipine 5 MG |197361 |C0687883 | |magnesium hydroxide 100 MG|337012 |C1134402 | |metformin 1000 MG |316255 |C0987664 | |dilaudid |224913 |C0728755 | +--------------------------+-----------+---------+ Model Information Model Name: rxnorm_umls_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 3.0 MB References Trained on concepts from RXNORM for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry><entry><title type="html">Mapping SNOMED Codes with Their Corresponding UMLS Codes</title><link href="/2025/06/21/snomed_umls_mapper_en.html" rel="alternate" type="text/html" title="Mapping SNOMED Codes with Their Corresponding UMLS Codes" /><published>2025-06-21T00:00:00+00:00</published><updated>2025-06-21T00:00:00+00:00</updated><id>/2025/06/21/snomed_umls_mapper_en</id><content type="html" xml:base="/2025/06/21/snomed_umls_mapper_en.html">## Description

This pretrained model maps SNOMED codes to corresponding UMLS codes.

## Predicted Entities

`umls_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/snomed_umls_mapper_en_6.0.2_3.0_1750530955032.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/snomed_umls_mapper_en_6.0.2_3.0_1750530955032.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;ner_chunk&quot;)

sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk&quot;])\
    .setOutputCol(&quot;sbert_embeddings&quot;)\
    .setCaseSensitive(False)

snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sbert_embeddings&quot;]) \
    .setOutputCol(&quot;snomed_code&quot;)\
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

resolver2chunk = Resolution2Chunk()\
    .setInputCols([&quot;snomed_code&quot;])\
    .setOutputCol(&quot;snomed2chunk&quot;)

chunkerMapper = ChunkMapperModel.pretrained(&quot;snomed_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;snomed2chunk&quot;])\
    .setOutputCol(&quot;mappings&quot;)\
    .setRels([&quot;umls_code&quot;])

mapper_pipeline = Pipeline(stages = [
    documentAssembler,
    sbert_embedder,
    snomed_resolver,
    resolver2chunk,
    chunkerMapper])

data = spark.createDataFrame([[&quot;acebutolol&quot;],[&quot;fluids&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```

{:.jsl-block}
```python
documentAssembler = nlp.DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;ner_chunk&quot;)

sbert_embedder = nlp.BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk&quot;])\
    .setOutputCol(&quot;sbert_embeddings&quot;)\
    .setCaseSensitive(False)

snomed_resolver = medical.SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sbert_embeddings&quot;]) \
    .setOutputCol(&quot;snomed_code&quot;)\
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

resolver2chunk = medical.Resolution2Chunk()\
    .setInputCols([&quot;snomed_code&quot;])\
    .setOutputCol(&quot;snomed2chunk&quot;)

chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;snomed_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;snomed2chunk&quot;])\
    .setOutputCol(&quot;mappings&quot;)\
    .setRels([&quot;umls_code&quot;])

mapper_pipeline = nlp.Pipeline(stages = [
    documentAssembler,
    sbert_embedder,
    snomed_resolver,
    resolver2chunk,
    chunkerMapper])

data = spark.createDataFrame([[&quot;acebutolol&quot;],[&quot;fluids&quot;]]).toDF(&quot;text&quot;)

result = mapper_pipeline.fit(data).transform(data)

```
```scala
val documentAssembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;ner_chunk&quot;)
	
val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk&quot;))
    .setOutputCol(&quot;sbert_embeddings&quot;)
    .setCaseSensitive(false)
	
val snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sbert_embeddings&quot;))
    .setOutputCol(&quot;snomed_code&quot;)
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)
	
val resolver2chunk = new Resolution2Chunk()
    .setInputCols(Array(&quot;snomed_code&quot;))
    .setOutputCol(&quot;snomed2chunk&quot;)
	
val chunkerMapper = ChunkMapperModel.pretrained(&quot;snomed_umls_mapper&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;snomed2chunk&quot;))
    .setOutputCol(&quot;mappings&quot;)
    .setRels([&quot;umls_code&quot;])
	
val mapper_pipeline = new Pipeline().setStages(Array(
     documentAssembler,
     sbert_embedder,
     snomed_resolver,
     resolver2chunk,
     chunkerMapper))
	
val data = Seq(&quot;acebutolol&quot;, &quot;fluids&quot;).toDF(&quot;text&quot;)

val result = mapper_pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash
+----------+-----------+---------+
|chunk     |snomed_code|umls_code|
+----------+-----------+---------+
|acebutolol|68088000   |C0000946 |
|fluids    |118431008  |C1289919 |
+----------+-----------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|snomed_umls_mapper|
|Compatibility:|Healthcare NLP 6.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[ner_chunk]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|6.4 MB|

## References

Trained on concepts from SNOMED for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="snomed" /><category term="umls" /><category term="mapping" /><summary type="html">Description This pretrained model maps SNOMED codes to corresponding UMLS codes. Predicted Entities umls_code Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;ner_chunk&quot;) sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sbert_embeddings&quot;]) \ .setOutputCol(&quot;snomed_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) resolver2chunk = Resolution2Chunk()\ .setInputCols([&quot;snomed_code&quot;])\ .setOutputCol(&quot;snomed2chunk&quot;) chunkerMapper = ChunkMapperModel.pretrained(&quot;snomed_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;snomed2chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;]) mapper_pipeline = Pipeline(stages = [ documentAssembler, sbert_embedder, snomed_resolver, resolver2chunk, chunkerMapper]) data = spark.createDataFrame([[&quot;acebutolol&quot;],[&quot;fluids&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) documentAssembler = nlp.DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;ner_chunk&quot;) sbert_embedder = nlp.BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) snomed_resolver = medical.SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sbert_embeddings&quot;]) \ .setOutputCol(&quot;snomed_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) resolver2chunk = medical.Resolution2Chunk()\ .setInputCols([&quot;snomed_code&quot;])\ .setOutputCol(&quot;snomed2chunk&quot;) chunkerMapper = medical.ChunkMapperModel.pretrained(&quot;snomed_umls_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;snomed2chunk&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;umls_code&quot;]) mapper_pipeline = nlp.Pipeline(stages = [ documentAssembler, sbert_embedder, snomed_resolver, resolver2chunk, chunkerMapper]) data = spark.createDataFrame([[&quot;acebutolol&quot;],[&quot;fluids&quot;]]).toDF(&quot;text&quot;) result = mapper_pipeline.fit(data).transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;ner_chunk&quot;) val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) .setCaseSensitive(false) val snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;sbert_embeddings&quot;)) .setOutputCol(&quot;snomed_code&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val resolver2chunk = new Resolution2Chunk() .setInputCols(Array(&quot;snomed_code&quot;)) .setOutputCol(&quot;snomed2chunk&quot;) val chunkerMapper = ChunkMapperModel.pretrained(&quot;snomed_umls_mapper&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;snomed2chunk&quot;)) .setOutputCol(&quot;mappings&quot;) .setRels([&quot;umls_code&quot;]) val mapper_pipeline = new Pipeline().setStages(Array( documentAssembler, sbert_embedder, snomed_resolver, resolver2chunk, chunkerMapper)) val data = Seq(&quot;acebutolol&quot;, &quot;fluids&quot;).toDF(&quot;text&quot;) val result = mapper_pipeline.fit(data).transform(data) Results +----------+-----------+---------+ |chunk |snomed_code|umls_code| +----------+-----------+---------+ |acebutolol|68088000 |C0000946 | |fluids |118431008 |C1289919 | +----------+-----------+---------+ Model Information Model Name: snomed_umls_mapper Compatibility: Healthcare NLP 6.0.2+ License: Licensed Edition: Official Input Labels: [ner_chunk] Output Labels: [mappings] Language: en Size: 6.4 MB References Trained on concepts from SNOMED for the 2025AA release of the Unified Medical Language SystemÂ® (UMLS) Knowledge Sources: https://www.nlm.nih.gov/research/umls/index.html</summary></entry></feed>