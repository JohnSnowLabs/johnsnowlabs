<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-06-19T23:33:22+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">PDF Deidentification Multi Model Context Signature Aware</title><link href="/2025/05/23/pdf_deid_multi_model_context_signature_aware_pipeline.html" rel="alternate" type="text/html" title="PDF Deidentification Multi Model Context Signature Aware" /><published>2025-05-23T00:00:00+00:00</published><updated>2025-05-23T00:00:00+00:00</updated><id>/2025/05/23/pdf_deid_multi_model_context_signature_aware_pipeline</id><content type="html" xml:base="/2025/05/23/pdf_deid_multi_model_context_signature_aware_pipeline.html">## Description

This pipeline can be used to mask PHI information in PDFs. Masked entities include 'AGE', 'CITY', 'COUNTRY', 'DATE', 'DOCTOR', 'EMAIL', 'HOSPITAL', 'IDNUM', 'ORGANIZATION', 'PATIENT', 'PHONE', 'PROFESSION', 'STATE', 'STREET', 'USERNAME', 'ZIP'.
The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities, also includes removing signatures.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multi_model_context_signature_aware_pipeline_en_6.0.0_3.0_1747909126000.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multi_model_context_signature_aware_pipeline_en_6.0.0_3.0_1747909126000.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.pretrained import PretrainedPipeline
deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multi_model_context_signature_aware_pipeline&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;)
```

&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|pdf_deid_multi_model_context_signature_aware_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|4.7 GB|

## Included Models

- PdfToImage
- ImageToText
- DocumentAssembler
- SentenceDetectorDLModel
- Regex
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- EntityExtractor
- ContextualParserModel
- RegexMatcher
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- RegexMatcher
- ChunkMergeModel
- ChunkMergeModel
- XLMRobertaEmbeddings
- MedicalNerModel
- NerConverter 
- PretrainedZeroShotNER
- NerConverter
- PretrainedZeroShotNER
- NerConverter
- ChunkMergeModel
- PositionFinder
- ImageDrawRegions
- HW_Signature_Detector
- ImageDrawRegions
- ImageToPdf</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><summary type="html">Description This pipeline can be used to mask PHI information in PDFs. Masked entities include ‘AGE’, ‘CITY’, ‘COUNTRY’, ‘DATE’, ‘DOCTOR’, ‘EMAIL’, ‘HOSPITAL’, ‘IDNUM’, ‘ORGANIZATION’, ‘PATIENT’, ‘PHONE’, ‘PROFESSION’, ‘STATE’, ‘STREET’, ‘USERNAME’, ‘ZIP’. The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities, also includes removing signatures. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multi_model_context_signature_aware_pipeline&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;) Model Information Model Name: pdf_deid_multi_model_context_signature_aware_pipeline Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 4.7 GB Included Models PdfToImage ImageToText DocumentAssembler SentenceDetectorDLModel Regex WordEmbeddingsModel MedicalNerModel NerConverter ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel EntityExtractor ContextualParserModel RegexMatcher ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel RegexMatcher ChunkMergeModel ChunkMergeModel XLMRobertaEmbeddings MedicalNerModel NerConverter PretrainedZeroShotNER NerConverter PretrainedZeroShotNER NerConverter ChunkMergeModel PositionFinder ImageDrawRegions HW_Signature_Detector ImageDrawRegions ImageToPdf</summary></entry><entry><title type="html">PDF Deidentification Multilingual Name Plus</title><link href="/2025/05/17/pdf_deid_multilingual_name_plus.html" rel="alternate" type="text/html" title="PDF Deidentification Multilingual Name Plus" /><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><id>/2025/05/17/pdf_deid_multilingual_name_plus</id><content type="html" xml:base="/2025/05/17/pdf_deid_multilingual_name_plus.html">## Description

This pipeline can be used to mask PHI information in PDFs. Masked entities include 'HOSPITAL', 'NAME', 'PATIENT', 'ID','MEDICALRECORD', 'IDNUM', 'COUNTRY', 'LOCATION', 'STREET', 'STATE', 'ZIP', 'CONTACT', 'PHONE', 'DATE'.
The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multilingual_name_plus_en_6.0.0_3.0_1747131526000.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multilingual_name_plus_en_6.0.0_3.0_1747131526000.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.pretrained import PretrainedPipeline
deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multilingual_name_plus&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;)
```

&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|pdf_deid_multilingual_name_plus|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.8 GB|

## Included Models

- PdfToImage
- ImageToText
- DocumentAssembler
- SentenceDetectorDLModel
- RegexTokenizer
- PretrainedZeroShotNER
- NerConverter
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- XLMRobertaEmbeddings
- MedicalNerModel
- NerConverter
- ContextualParser
- ChunkConverter
- Merge
- DeIdentification
- NerOutputCleaner
- PositionFinder
- ImageDrawRegions
- ImageToPdf</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><summary type="html">Description This pipeline can be used to mask PHI information in PDFs. Masked entities include ‘HOSPITAL’, ‘NAME’, ‘PATIENT’, ‘ID’,’MEDICALRECORD’, ‘IDNUM’, ‘COUNTRY’, ‘LOCATION’, ‘STREET’, ‘STATE’, ‘ZIP’, ‘CONTACT’, ‘PHONE’, ‘DATE’. The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multilingual_name_plus&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;) Model Information Model Name: pdf_deid_multilingual_name_plus Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 3.8 GB Included Models PdfToImage ImageToText DocumentAssembler SentenceDetectorDLModel RegexTokenizer PretrainedZeroShotNER NerConverter WordEmbeddingsModel MedicalNerModel NerConverter XLMRobertaEmbeddings MedicalNerModel NerConverter ContextualParser ChunkConverter Merge DeIdentification NerOutputCleaner PositionFinder ImageDrawRegions ImageToPdf</summary></entry><entry><title type="html">PDF Obfuscate Multilingual Name Plus</title><link href="/2025/05/17/pdf_obfuscate_multilingual_name_plus.html" rel="alternate" type="text/html" title="PDF Obfuscate Multilingual Name Plus" /><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><id>/2025/05/17/pdf_obfuscate_multilingual_name_plus</id><content type="html" xml:base="/2025/05/17/pdf_obfuscate_multilingual_name_plus.html">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;The Clinical Obfuscation for PDF Pipeline is a powerful solution for transforming sensitive PDF documents into safe, shareable assets. It enables organizations to unlock the value of clinical data while ensuring strict compliance with HIPAA, GDPR, and institutional privacy standards.
The pipeline is designed to obfuscate Personally Identifiable Information (PII) in input PDF documents, while preserving readability and format integrity. Its key features include:&lt;/p&gt;

&lt;h3 id=&quot;entity-level-obfuscation&quot;&gt;Entity-Level Obfuscation&lt;/h3&gt;
&lt;p&gt;Detected entities (e.g., names, dates, IDs) are individually replaced with synthetic but realistic alternatives, ensuring sensitive information is protected.&lt;/p&gt;

&lt;h3 id=&quot;layout-aware-replacement&quot;&gt;Layout-Aware Replacement&lt;/h3&gt;
&lt;p&gt;Replacement entities are carefully chosen to match the visual space of the originals, avoiding issues like text overflow or underfitting.&lt;/p&gt;

&lt;h3 id=&quot;supported-entity-types&quot;&gt;Supported Entity Types&lt;/h3&gt;
&lt;p&gt;The pipeline can obfuscate the following types of information:
HOSPITAL, NAME, PATIENT, ID, MEDICALRECORD, IDNUM, COUNTRY, LOCATION, STREET, STATE, ZIP, CONTACT, PHONE, DATE.&lt;/p&gt;

&lt;h3 id=&quot;preserved-document-appearance&quot;&gt;Preserved Document Appearance&lt;/h3&gt;
&lt;p&gt;The output is a PDF document visually similar to the original, with obfuscated text rendered on top of the original positions of sensitive entities.&lt;/p&gt;

&lt;h3 id=&quot;document-wide-consistency&quot;&gt;Document-Wide Consistency&lt;/h3&gt;
&lt;p&gt;Replacement is consistent across the document. For example, if “Lilian Clarke” is replaced by “Nelly Huffman” on page 1, all subsequent instances of “Lilian Clarke” are replaced with the same synthetic name throughout the document.&lt;/p&gt;

&lt;p class=&quot;btn-box&quot;&gt;&lt;button class=&quot;button button-orange&quot; disabled=&quot;&quot;&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled=&quot;&quot;&gt;Open in Colab&lt;/button&gt;
&lt;a href=&quot;https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/ocr/pdf_obfuscate_multilingual_name_plus_en_6.0.0_3.0_1747131526000.zip&quot; class=&quot;button button-orange button-orange-trans arr button-icon hidden&quot;&gt;Download&lt;/a&gt;
&lt;a href=&quot;s3://auxdata.johnsnowlabs.com/clinical/ocr/pdf_obfuscate_multilingual_name_plus_en_6.0.0_3.0_1747131526000.zip&quot; class=&quot;button button-orange button-orange-trans button-icon button-copy-s3&quot;&gt;Copy S3 URI&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to use&lt;/h2&gt;

&lt;div class=&quot;tabs-box&quot;&gt;
  &lt;div class=&quot;tabs-model-aproach-head&quot;&gt;&lt;button class=&quot;tab-li-model-aproach tabheader_active&quot;&gt;Python&lt;strong&gt;Healthcare NLP&lt;/strong&gt;&lt;/button&gt;&lt;button class=&quot;tab-li-model-aproach tab-li-jsl&quot;&gt;Python&lt;strong&gt;JohnSnowLabs&lt;/strong&gt;&lt;/button&gt;&lt;button class=&quot;tab-li-model-aproach&quot;&gt;Scala&lt;/button&gt;&lt;button class=&quot;tab-li-model-aproach tab-li-nlu&quot;&gt;NLU&lt;/button&gt;&lt;/div&gt;
  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sparknlp.pretrained&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PretrainedPipeline&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deid_pipeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PretrainedPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pdf_obfuscate_multilingual_name_plus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;clinical/ocr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;deid_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_pdfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

&lt;/div&gt;

&lt;h2 class=&quot;model-param&quot; id=&quot;model-information&quot;&gt;Model Information&lt;/h2&gt;

&lt;table class=&quot;table-model&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Model Name:&lt;/td&gt;
      &lt;td&gt;pdf_obfuscate_multilingual_name_plus&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Type:&lt;/td&gt;
      &lt;td&gt;pipeline&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Compatibility:&lt;/td&gt;
      &lt;td&gt;Healthcare NLP 6.0.0+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;License:&lt;/td&gt;
      &lt;td&gt;Licensed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Edition:&lt;/td&gt;
      &lt;td&gt;Official&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Language:&lt;/td&gt;
      &lt;td&gt;en&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Size:&lt;/td&gt;
      &lt;td&gt;3.8 GB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;included-models&quot;&gt;Included Models&lt;/h2&gt;

&lt;p&gt;The following models are included in the pipeline,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PdfToImage&lt;/li&gt;
  &lt;li&gt;ImageToText&lt;/li&gt;
  &lt;li&gt;DocumentAssembler&lt;/li&gt;
  &lt;li&gt;SentenceDetectorDLModel&lt;/li&gt;
  &lt;li&gt;RegexTokenizer&lt;/li&gt;
  &lt;li&gt;PretrainedZeroShotNER&lt;/li&gt;
  &lt;li&gt;NerConverter&lt;/li&gt;
  &lt;li&gt;WordEmbeddingsModel&lt;/li&gt;
  &lt;li&gt;MedicalNerModel&lt;/li&gt;
  &lt;li&gt;NerConverter&lt;/li&gt;
  &lt;li&gt;XLMRobertaEmbeddings&lt;/li&gt;
  &lt;li&gt;MedicalNerModel&lt;/li&gt;
  &lt;li&gt;NerConverter&lt;/li&gt;
  &lt;li&gt;ContextualParser&lt;/li&gt;
  &lt;li&gt;ChunkConverter&lt;/li&gt;
  &lt;li&gt;Merge&lt;/li&gt;
  &lt;li&gt;DeIdentification&lt;/li&gt;
  &lt;li&gt;NerOutputCleaner&lt;/li&gt;
  &lt;li&gt;PositionFinder&lt;/li&gt;
  &lt;li&gt;ImageDrawRegions&lt;/li&gt;
  &lt;li&gt;ImageToPdf&lt;/li&gt;
&lt;/ul&gt;</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><summary type="html">Description The Clinical Obfuscation for PDF Pipeline is a powerful solution for transforming sensitive PDF documents into safe, shareable assets. It enables organizations to unlock the value of clinical data while ensuring strict compliance with HIPAA, GDPR, and institutional privacy standards. The pipeline is designed to obfuscate Personally Identifiable Information (PII) in input PDF documents, while preserving readability and format integrity. Its key features include: Entity-Level Obfuscation Detected entities (e.g., names, dates, IDs) are individually replaced with synthetic but realistic alternatives, ensuring sensitive information is protected. Layout-Aware Replacement Replacement entities are carefully chosen to match the visual space of the originals, avoiding issues like text overflow or underfitting. Supported Entity Types The pipeline can obfuscate the following types of information: HOSPITAL, NAME, PATIENT, ID, MEDICALRECORD, IDNUM, COUNTRY, LOCATION, STREET, STATE, ZIP, CONTACT, PHONE, DATE. Preserved Document Appearance The output is a PDF document visually similar to the original, with obfuscated text rendered on top of the original positions of sensitive entities. Document-Wide Consistency Replacement is consistent across the document. For example, if “Lilian Clarke” is replaced by “Nelly Huffman” on page 1, all subsequent instances of “Lilian Clarke” are replaced with the same synthetic name throughout the document. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;pdf_obfuscate_multilingual_name_plus&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;) deid_pipeline.transform(input_pdfs) Model Information Model Name: pdf_obfuscate_multilingual_name_plus Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 3.8 GB Included Models The following models are included in the pipeline, PdfToImage ImageToText DocumentAssembler SentenceDetectorDLModel RegexTokenizer PretrainedZeroShotNER NerConverter WordEmbeddingsModel MedicalNerModel NerConverter XLMRobertaEmbeddings MedicalNerModel NerConverter ContextualParser ChunkConverter Merge DeIdentification NerOutputCleaner PositionFinder ImageDrawRegions ImageToPdf</summary></entry><entry><title type="html">PDF Deidentification Multilingual Name Plus Signature Aware</title><link href="/2025/05/17/pdf_deid_multilingual_name_plus_signature_aware.html" rel="alternate" type="text/html" title="PDF Deidentification Multilingual Name Plus Signature Aware" /><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><id>/2025/05/17/pdf_deid_multilingual_name_plus_signature_aware</id><content type="html" xml:base="/2025/05/17/pdf_deid_multilingual_name_plus_signature_aware.html">## Description

This pipeline can be used to mask PHI information in PDFs. Masked entities include 'HOSPITAL', 'NAME', 'PATIENT', 'ID','MEDICALRECORD', 'IDNUM', 'COUNTRY', 'LOCATION', 'STREET', 'STATE', 'ZIP', 'CONTACT', 'PHONE', 'DATE'.
The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities, also includes removing signatures.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multilingual_name_plus_signature_aware_en_6.0.0_3.0_1747909126000.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multilingual_name_plus_signature_aware_en_6.0.0_3.0_1747909126000.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.pretrained import PretrainedPipeline
deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multilingual_name_plus_signature_aware&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;)
```

&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|pdf_deid_multilingual_name_plus_signature_aware|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|4.0 GB|

## Included Models

- PdfToImage
- ImageToText
- DocumentAssembler
- SentenceDetectorDLModel
- RegexTokenizer
- PretrainedZeroShotNER
- NerConverter
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- XLMRobertaEmbeddings
- MedicalNerModel
- NerConverter
- ContextualParser
- ChunkConverter
- Merge
- DeIdentification
- NerOutputCleaner
- PositionFinder
- ImageDrawRegions
- HW_Signature_Detector
- ImageDrawRegions
- ImageToPdf</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><summary type="html">Description This pipeline can be used to mask PHI information in PDFs. Masked entities include ‘HOSPITAL’, ‘NAME’, ‘PATIENT’, ‘ID’,’MEDICALRECORD’, ‘IDNUM’, ‘COUNTRY’, ‘LOCATION’, ‘STREET’, ‘STATE’, ‘ZIP’, ‘CONTACT’, ‘PHONE’, ‘DATE’. The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities, also includes removing signatures. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multilingual_name_plus_signature_aware&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;) Model Information Model Name: pdf_deid_multilingual_name_plus_signature_aware Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 4.0 GB Included Models PdfToImage ImageToText DocumentAssembler SentenceDetectorDLModel RegexTokenizer PretrainedZeroShotNER NerConverter WordEmbeddingsModel MedicalNerModel NerConverter XLMRobertaEmbeddings MedicalNerModel NerConverter ContextualParser ChunkConverter Merge DeIdentification NerOutputCleaner PositionFinder ImageDrawRegions HW_Signature_Detector ImageDrawRegions ImageToPdf</summary></entry><entry><title type="html">PDF Deidentification Multi Model Context</title><link href="/2025/05/09/pdf_deid_multi_model_context_pipeline.html" rel="alternate" type="text/html" title="PDF Deidentification Multi Model Context" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-09T00:00:00+00:00</updated><id>/2025/05/09/pdf_deid_multi_model_context_pipeline</id><content type="html" xml:base="/2025/05/09/pdf_deid_multi_model_context_pipeline.html">## Description

This pipeline can be used to mask PHI information in PDFs. Masked entities include 'AGE', 'CITY', 'COUNTRY', 'DATE', 'DOCTOR', 'EMAIL', 'HOSPITAL', 'IDNUM', 'ORGANIZATION', 'PATIENT', 'PHONE', 'PROFESSION', 'STATE', 'STREET', 'USERNAME', 'ZIP'.
The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multi_model_context_pipeline_en_6.0.0_3.0_1746569926000.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/ocr/pdf_deid_multi_model_context_pipeline_en_6.0.0_3.0_1746569926000.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.pretrained import PretrainedPipeline
deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multi_model_context_pipeline&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;)
```

&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|pdf_deid_multi_model_context_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|4.4 GB|

## Included Models

- PdfToImage
- ImageToText
- DocumentAssembler
- SentenceDetectorDLModel
- Regex
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- EntityExtractor
- ContextualParserModel
- RegexMatcher
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- RegexMatcher
- ChunkMergeModel
- ChunkMergeModel
- XLMRobertaEmbeddings
- MedicalNerModel
- NerConverter 
- PretrainedZeroShotNER
- NerConverter
- PretrainedZeroShotNER
- NerConverter
- ChunkMergeModel
- PositionFinder
- ImageDrawRegions
- ImageToPdf</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><summary type="html">Description This pipeline can be used to mask PHI information in PDFs. Masked entities include ‘AGE’, ‘CITY’, ‘COUNTRY’, ‘DATE’, ‘DOCTOR’, ‘EMAIL’, ‘HOSPITAL’, ‘IDNUM’, ‘ORGANIZATION’, ‘PATIENT’, ‘PHONE’, ‘PROFESSION’, ‘STATE’, ‘STREET’, ‘USERNAME’, ‘ZIP’. The output is a PDF document, similar to the one at the input, but with black bounding boxes on top of the targeted entities. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;pdf_deid_multi_model_context_pipeline&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;) Model Information Model Name: pdf_deid_multi_model_context_pipeline Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 4.4 GB Included Models PdfToImage ImageToText DocumentAssembler SentenceDetectorDLModel Regex WordEmbeddingsModel MedicalNerModel NerConverter ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel EntityExtractor ContextualParserModel RegexMatcher ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel RegexMatcher ChunkMergeModel ChunkMergeModel XLMRobertaEmbeddings MedicalNerModel NerConverter PretrainedZeroShotNER NerConverter PretrainedZeroShotNER NerConverter ChunkMergeModel PositionFinder ImageDrawRegions ImageToPdf</summary></entry><entry><title type="html">PDF Obfuscation Multi Model Context</title><link href="/2025/05/09/pdf_obfuscation_multi_model_context_pipeline.html" rel="alternate" type="text/html" title="PDF Obfuscation Multi Model Context" /><published>2025-05-09T00:00:00+00:00</published><updated>2025-05-09T00:00:00+00:00</updated><id>/2025/05/09/pdf_obfuscation_multi_model_context_pipeline</id><content type="html" xml:base="/2025/05/09/pdf_obfuscation_multi_model_context_pipeline.html">## Description

This pipeline can be used to mask PHI information in PDFs. Masked entities include 'AGE', 'CITY', 'COUNTRY', 'DATE', 'DOCTOR', 'EMAIL', 'HOSPITAL', 'IDNUM', 'ORGANIZATION', 'PATIENT', 'PHONE', 'PROFESSION', 'STATE', 'STREET', 'USERNAME', 'ZIP'.
The output is a PDF document, similar to the one at the input, but with fake obfuscated text on top of the targeted entities. 

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/ocr/pdf_obfuscation_multi_model_context_pipeline_en_6.0.0_3.0_1746699526000.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/ocr/pdf_obfuscation_multi_model_context_pipeline_en_6.0.0_3.0_1746699526000.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from sparknlp.pretrained import PretrainedPipeline
deid_pipeline = PretrainedPipeline(&quot;pdf_obfuscation_multi_model_context_pipeline&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;)
```

&lt;/div&gt;

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|pdf_obfuscation_multi_model_context_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|4.4 GB|

## Included Models

- PdfToImage
- ImageToText
- DocumentAssembler
- SentenceDetectorDLModel
- Regex
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- EntityExtractor
- ContextualParserModel
- RegexMatcher
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- RegexMatcher
- ChunkMergeModel
- ChunkMergeModel
- XLMRobertaEmbeddings
- MedicalNerModel
- NerConverter 
- PretrainedZeroShotNER
- NerConverter
- PretrainedZeroShotNER
- NerConverter
- ChunkMergeModel
- PositionFinder
- ImageDrawRegions
- ImageToPdf</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><summary type="html">Description This pipeline can be used to mask PHI information in PDFs. Masked entities include ‘AGE’, ‘CITY’, ‘COUNTRY’, ‘DATE’, ‘DOCTOR’, ‘EMAIL’, ‘HOSPITAL’, ‘IDNUM’, ‘ORGANIZATION’, ‘PATIENT’, ‘PHONE’, ‘PROFESSION’, ‘STATE’, ‘STREET’, ‘USERNAME’, ‘ZIP’. The output is a PDF document, similar to the one at the input, but with fake obfuscated text on top of the targeted entities. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;pdf_obfuscation_multi_model_context_pipeline&quot;, &quot;en&quot;, &quot;clinical/ocr&quot;) Model Information Model Name: pdf_obfuscation_multi_model_context_pipeline Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 4.4 GB Included Models PdfToImage ImageToText DocumentAssembler SentenceDetectorDLModel Regex WordEmbeddingsModel MedicalNerModel NerConverter ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel EntityExtractor ContextualParserModel RegexMatcher ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel RegexMatcher ChunkMergeModel ChunkMergeModel XLMRobertaEmbeddings MedicalNerModel NerConverter PretrainedZeroShotNER NerConverter PretrainedZeroShotNER NerConverter ChunkMergeModel PositionFinder ImageDrawRegions ImageToPdf</summary></entry><entry><title type="html">Mapping Phenotype Entities with Corresponding HPO Codes (Pretrained Pipeline)</title><link href="/2025/05/02/hpo_mapper_pipeline_en.html" rel="alternate" type="text/html" title="Mapping Phenotype Entities with Corresponding HPO Codes (Pretrained Pipeline)" /><published>2025-05-02T00:00:00+00:00</published><updated>2025-05-02T00:00:00+00:00</updated><id>/2025/05/02/hpo_mapper_pipeline_en</id><content type="html" xml:base="/2025/05/02/hpo_mapper_pipeline_en.html">## Description

This pipeline is designed to map extracted phenotype entities from clinical or biomedical text to their corresponding Human Phenotype Ontology (HPO) codes. It ensures that observed symptoms, signs, and clinical abnormalities are standardized using HPO terminology.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_en_6.0.0_3.2_1746195935268.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_en_6.0.0_3.2_1746195935268.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```

{:.jsl-block}
```python

pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)


result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash

+------------------+-----+---+-----+----------+
|             chunk|begin|end|label|  hpo_code|
+------------------+-----+---+-----+----------+
|             APNEA|    0|  4|  HPO|HP:0002104|
|             apnea|   16| 20|  HPO|HP:0002104|
|HYPERBILIRUBINEMIA|   66| 83|  HPO|HP:0002904|
|hyperbilirubinemia|   91|108|  HPO|HP:0002904|
|            sepsis|  167|172|  HPO|HP:0100806|
+------------------+-----+---+-----+----------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|hpo_mapper_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|4.0 MB|

## Included Models

- DocumentAssembler
- TokenizerModel
- StopWordsCleaner
- TokenAssembler
- SentenceDetectorDLModel
- TokenizerModel
- TextMatcherInternalModel
- ChunkMapperModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="hpo" /><category term="pipeline" /><category term="ner" /><category term="mapper" /><summary type="html">Description This pipeline is designed to map extracted phenotype entities from clinical or biomedical text to their corresponding Human Phenotype Ontology (HPO) codes. It ensures that observed symptoms, signs, and clinical abnormalities are standardized using HPO terminology. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) Results +------------------+-----+---+-----+----------+ | chunk|begin|end|label| hpo_code| +------------------+-----+---+-----+----------+ | APNEA| 0| 4| HPO|HP:0002104| | apnea| 16| 20| HPO|HP:0002104| |HYPERBILIRUBINEMIA| 66| 83| HPO|HP:0002904| |hyperbilirubinemia| 91|108| HPO|HP:0002904| | sepsis| 167|172| HPO|HP:0100806| +------------------+-----+---+-----+----------+ Model Information Model Name: hpo_mapper_pipeline Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 4.0 MB Included Models DocumentAssembler TokenizerModel StopWordsCleaner TokenAssembler SentenceDetectorDLModel TokenizerModel TextMatcherInternalModel ChunkMapperModel</summary></entry><entry><title type="html">Mapping Phenotype Entities with Corresponding HPO Codes (Pretrained Pipeline)</title><link href="/2025/05/02/hpo_mapper_pipeline_en.html" rel="alternate" type="text/html" title="Mapping Phenotype Entities with Corresponding HPO Codes (Pretrained Pipeline)" /><published>2025-05-02T00:00:00+00:00</published><updated>2025-05-02T00:00:00+00:00</updated><id>/2025/05/02/hpo_mapper_pipeline_en</id><content type="html" xml:base="/2025/05/02/hpo_mapper_pipeline_en.html">## Description

This pipeline is designed to map extracted phenotype entities from clinical or biomedical text to their corresponding Human Phenotype Ontology (HPO) codes. It ensures that observed symptoms, signs, and clinical abnormalities are standardized using HPO terminology.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_en_6.0.0_3.0_1746195778533.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_en_6.0.0_3.0_1746195778533.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```

{:.jsl-block}
```python

pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)


result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash

+------------------+-----+---+-----+----------+
|             chunk|begin|end|label|  hpo_code|
+------------------+-----+---+-----+----------+
|             APNEA|    0|  4|  HPO|HP:0002104|
|             apnea|   16| 20|  HPO|HP:0002104|
|HYPERBILIRUBINEMIA|   66| 83|  HPO|HP:0002904|
|hyperbilirubinemia|   91|108|  HPO|HP:0002904|
|            sepsis|  167|172|  HPO|HP:0100806|
+------------------+-----+---+-----+----------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|hpo_mapper_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|4.0 MB|

## Included Models

- DocumentAssembler
- TokenizerModel
- StopWordsCleaner
- TokenAssembler
- SentenceDetectorDLModel
- TokenizerModel
- TextMatcherInternalModel
- ChunkMapperModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="hpo" /><category term="pipeline" /><category term="ner" /><category term="mapper" /><summary type="html">Description This pipeline is designed to map extracted phenotype entities from clinical or biomedical text to their corresponding Human Phenotype Ontology (HPO) codes. It ensures that observed symptoms, signs, and clinical abnormalities are standardized using HPO terminology. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) Results +------------------+-----+---+-----+----------+ | chunk|begin|end|label| hpo_code| +------------------+-----+---+-----+----------+ | APNEA| 0| 4| HPO|HP:0002104| | apnea| 16| 20| HPO|HP:0002104| |HYPERBILIRUBINEMIA| 66| 83| HPO|HP:0002904| |hyperbilirubinemia| 91|108| HPO|HP:0002904| | sepsis| 167|172| HPO|HP:0100806| +------------------+-----+---+-----+----------+ Model Information Model Name: hpo_mapper_pipeline Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 4.0 MB Included Models DocumentAssembler TokenizerModel StopWordsCleaner TokenAssembler SentenceDetectorDLModel TokenizerModel TextMatcherInternalModel ChunkMapperModel</summary></entry><entry><title type="html">Mapping Phenotype Entities with Corresponding HPO Codes (Pretrained Pipeline)</title><link href="/2025/05/02/hpo_mapper_pipeline_en.html" rel="alternate" type="text/html" title="Mapping Phenotype Entities with Corresponding HPO Codes (Pretrained Pipeline)" /><published>2025-05-02T00:00:00+00:00</published><updated>2025-05-02T00:00:00+00:00</updated><id>/2025/05/02/hpo_mapper_pipeline_en</id><content type="html" xml:base="/2025/05/02/hpo_mapper_pipeline_en.html">## Description

This pipeline is designed to map extracted phenotype entities from clinical or biomedical text to their corresponding Human Phenotype Ontology (HPO) codes. It ensures that observed symptoms, signs, and clinical abnormalities are standardized using HPO terminology.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_en_6.0.0_3.4_1746194839283.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/hpo_mapper_pipeline_en_6.0.0_3.4_1746194839283.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```

{:.jsl-block}
```python

pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)


result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &lt; 34 wks gestation at birth.
HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity.
1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash

+------------------+-----+---+-----+----------+
|             chunk|begin|end|label|  hpo_code|
+------------------+-----+---+-----+----------+
|             APNEA|    0|  4|  HPO|HP:0002104|
|             apnea|   16| 20|  HPO|HP:0002104|
|HYPERBILIRUBINEMIA|   66| 83|  HPO|HP:0002904|
|hyperbilirubinemia|   91|108|  HPO|HP:0002904|
|            sepsis|  167|172|  HPO|HP:0100806|
+------------------+-----+---+-----+----------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|hpo_mapper_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 6.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|4.0 MB|

## Included Models

- DocumentAssembler
- TokenizerModel
- StopWordsCleaner
- TokenAssembler
- SentenceDetectorDLModel
- TokenizerModel
- TextMatcherInternalModel
- ChunkMapperModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="hpo" /><category term="pipeline" /><category term="ner" /><category term="mapper" /><summary type="html">Description This pipeline is designed to map extracted phenotype entities from clinical or biomedical text to their corresponding Human Phenotype Ontology (HPO) codes. It ensures that observed symptoms, signs, and clinical abnormalities are standardized using HPO terminology. Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU from sparknlp.pretrained import PretrainedPipeline pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) pipeline = nlp.PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val pipeline = PretrainedPipeline(&quot;hpo_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = pipeline.fullAnnotate(&quot;&quot;&quot;APNEA: Presumed apnea of prematurity since &amp;lt; 34 wks gestation at birth. HYPERBILIRUBINEMIA: At risk for hyperbilirubinemia d/t prematurity. 1/25-1/30: Received Amp/Gent while undergoing sepsis evaluation.&quot;&quot;&quot;) Results +------------------+-----+---+-----+----------+ | chunk|begin|end|label| hpo_code| +------------------+-----+---+-----+----------+ | APNEA| 0| 4| HPO|HP:0002104| | apnea| 16| 20| HPO|HP:0002104| |HYPERBILIRUBINEMIA| 66| 83| HPO|HP:0002904| |hyperbilirubinemia| 91|108| HPO|HP:0002904| | sepsis| 167|172| HPO|HP:0100806| +------------------+-----+---+-----+----------+ Model Information Model Name: hpo_mapper_pipeline Type: pipeline Compatibility: Healthcare NLP 6.0.0+ License: Licensed Edition: Official Language: en Size: 4.0 MB Included Models DocumentAssembler TokenizerModel StopWordsCleaner TokenAssembler SentenceDetectorDLModel TokenizerModel TextMatcherInternalModel ChunkMapperModel</summary></entry><entry><title type="html">Stop Words Cleaner for HPO</title><link href="/2025/05/02/stopwords_removal_hpo_en.html" rel="alternate" type="text/html" title="Stop Words Cleaner for HPO" /><published>2025-05-02T00:00:00+00:00</published><updated>2025-05-02T00:00:00+00:00</updated><id>/2025/05/02/stopwords_removal_hpo_en</id><content type="html" xml:base="/2025/05/02/stopwords_removal_hpo_en.html">## Description

This model is designed to remove stop words from clinical phenotype descriptions, particularly in the context of Human Phenotype Ontology (HPO).

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/stopwords_removal_hpo_en_5.5.3_3.0_1746187715959.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/stopwords_removal_hpo_en_5.5.3_3.0_1746187715959.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)

stopwords_cleaner = StopWordsCleaner.pretrained(&quot;stopwords_removal_hpo&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols(&quot;token&quot;)\
    .setOutputCol(&quot;cleanTokens&quot;)\
    .setCaseSensitive(False)
    
pipeline = Pipeline().setStages([
    document_assembler,
    tokenizer,
    stopwords_cleaner
])

text_df = spark.createDataFrame([[&quot;The patient shows no signs of muscle weakness or developmental delay&quot;]]).toDF(&quot;text&quot;)
result_df = pipeline.fit(text_df).transform(text_df)
```

{:.jsl-block}
```python
document_assembler = nlp.DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

tokenizer = nlp.Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)

stopwords_cleaner = nlp.StopWordsCleaner.pretrained(&quot;stopwords_removal_hpo&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols(&quot;token&quot;)\
    .setOutputCol(&quot;cleanTokens&quot;)\
    .setCaseSensitive(False)
    
pipeline = nlp.Pipeline().setStages([
    document_assembler,
    tokenizer,
    stopwords_cleaner
])

text_df = spark.createDataFrame([[&quot;The patient shows no signs of muscle weakness or developmental delay&quot;]]).toDF(&quot;text&quot;)
result_df = pipeline.fit(text_df).transform(text_df)
```
```scala
import spark.implicits._
val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;text&quot;)
  .setOutputCol(&quot;document&quot;)

val tokenizer = new Tokenizer()
  .setInputCols(&quot;document&quot;)
  .setOutputCol(&quot;token&quot;)

val stopWordsCleaner = StopWordsCleaner.pretrained(&quot;stopwords_removal_hpo&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(&quot;token&quot;)
  .setOutputCol(&quot;cleanTokens&quot;)
  .setCaseSensitive(false)

val pipeline = new Pipeline().setStages(Array(
  documentAssembler,
  tokenizer,
  stopWordsCleaner
))

val textData = Seq(
  &quot;The patient shows no signs of muscle weakness or developmental delay&quot;
).toDF(&quot;text&quot;)

val model = pipeline.fit(textData)
val resultDF = model.transform(textData)
```
&lt;/div&gt;

## Results

```bash
|   | token         | cleanTokens    |
|---|---------------|----------------|
| 0 | The           | --             |
| 1 | patient       | patient        |
| 2 | shows         | shows          |
| 3 | no            | no             |
| 4 | signs         | signs          |
| 5 | of            | --             |
| 6 | muscle        | muscle         |
| 7 | weakness      | weakness       |
| 8 | or            | --             |
| 9 | developmental | developmental  |
|10 | delay         | delay          |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|stopwords_removal_hpo|
|Compatibility:|Healthcare NLP 5.5.3+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[token]|
|Output Labels:|[cleanTokens]|
|Language:|en|
|Size:|1.4 KB|
|Case sensitive:|false|</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="clinical" /><category term="hpo" /><category term="stopwords" /><summary type="html">Description This model is designed to remove stop words from clinical phenotype descriptions, particularly in the context of Human Phenotype Ontology (HPO). Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonHealthcare NLPPythonJohnSnowLabsScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) stopwords_cleaner = StopWordsCleaner.pretrained(&quot;stopwords_removal_hpo&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols(&quot;token&quot;)\ .setOutputCol(&quot;cleanTokens&quot;)\ .setCaseSensitive(False) pipeline = Pipeline().setStages([ document_assembler, tokenizer, stopwords_cleaner ]) text_df = spark.createDataFrame([[&quot;The patient shows no signs of muscle weakness or developmental delay&quot;]]).toDF(&quot;text&quot;) result_df = pipeline.fit(text_df).transform(text_df) document_assembler = nlp.DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) tokenizer = nlp.Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) stopwords_cleaner = nlp.StopWordsCleaner.pretrained(&quot;stopwords_removal_hpo&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols(&quot;token&quot;)\ .setOutputCol(&quot;cleanTokens&quot;)\ .setCaseSensitive(False) pipeline = nlp.Pipeline().setStages([ document_assembler, tokenizer, stopwords_cleaner ]) text_df = spark.createDataFrame([[&quot;The patient shows no signs of muscle weakness or developmental delay&quot;]]).toDF(&quot;text&quot;) result_df = pipeline.fit(text_df).transform(text_df) import spark.implicits._ val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;token&quot;) val stopWordsCleaner = StopWordsCleaner.pretrained(&quot;stopwords_removal_hpo&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;token&quot;) .setOutputCol(&quot;cleanTokens&quot;) .setCaseSensitive(false) val pipeline = new Pipeline().setStages(Array( documentAssembler, tokenizer, stopWordsCleaner )) val textData = Seq( &quot;The patient shows no signs of muscle weakness or developmental delay&quot; ).toDF(&quot;text&quot;) val model = pipeline.fit(textData) val resultDF = model.transform(textData) Results | | token | cleanTokens | |---|---------------|----------------| | 0 | The | -- | | 1 | patient | patient | | 2 | shows | shows | | 3 | no | no | | 4 | signs | signs | | 5 | of | -- | | 6 | muscle | muscle | | 7 | weakness | weakness | | 8 | or | -- | | 9 | developmental | developmental | |10 | delay | delay | Model Information Model Name: stopwords_removal_hpo Compatibility: Healthcare NLP 5.5.3+ License: Licensed Edition: Official Input Labels: [token] Output Labels: [cleanTokens] Language: en Size: 1.4 KB Case sensitive: false</summary></entry></feed>